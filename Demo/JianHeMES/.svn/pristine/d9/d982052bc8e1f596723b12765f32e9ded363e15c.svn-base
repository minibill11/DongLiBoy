@model IEnumerable<JianHeMES.Models.BarCodes>

@{
    ViewBag.Title = "条码管理和查询";
}
<link href="~/Scripts/Bootstraps/bootstrap-select.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/bootstrap-select.js"></script>

<style>
  
    .selectpicker {
        border: 1px solid #ccc;
    }

    .dropdown-menu > li > a {
        padding: 3px 10px;
    }

    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        width: 150px;
    }

    @@media screen and (max-width: 768px) {
        .selectpicker {
            font-size: 13px;
        }
    }
    .tableBottom tbody tr td,.tabletop tr th{
        display:inline-block;
        text-align:center;
    }
    .tableBottom tbody tr td:nth-child(1),.tabletop tr th:nth-child(1){
        width:150px;
    }
    .tableBottom tbody tr td:nth-child(2),.tabletop tr th:nth-child(2){
        width:200px;
    }
    .tableBottom tbody tr td:nth-child(3),.tabletop tr th:nth-child(3){
        width:180px;
    }
    .tableBottom tbody tr td:nth-child(4), .tabletop tr th:nth-child(4) {
        width: 150px;
    }
    .tableBottom tbody tr td:nth-child(5), .tabletop tr th:nth-child(5) {
        width: 230px;
    }
    .tableBottom tbody tr td:nth-child(6), .tabletop tr th:nth-child(6) {
        width: 80px;
    }
    .tableBottom tbody tr td:nth-child(7), .tabletop tr th:nth-child(7) {
        width: 80px;
    }
</style>
<h2>@ViewBag.Title</h2>

<p>
    @*@Html.ActionLink("创建", "Create")*@
</p>

@using (Html.BeginForm("Index", "BarCodes", FormMethod.Post, new { id = "searchForm" }))
{
    @Html.AntiForgeryToken()
<p class="text-center">
    <span>订单号: @Html.DropDownList("OrderNum",
ViewBag.OrderNumList as IEnumerable<SelectListItem>, "全部", new { @class = "selectpicker", data_live_search = "true", data_style = "form-control" })</span>
    <br class="visible-xs" /><span>类型: @Html.DropDownList("BarCodeType",
ViewBag.BarCodeTypeList as IEnumerable<SelectListItem>, "全部", new { @class = "form-control", style = "display:inline; width: 80px" })</span>
    <br class="visible-xs" /><span>模组条码号：<input type="text" class="form-control" style="display:inline;width:150px;" name="BarCodeNum" /></span>
    
    
    


    <input type="hidden" id="PageIndex" name="PageIndex" value="0" />
    &nbsp; &nbsp; &nbsp;<input type="button" id="searchButton"  class="btn btn-default" value="检索" />
</p>
}


<table class="tabletop" >
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.OrderNum)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BarCodesNum)
            <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',1,'up','tt')"></span>
            <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable',1,'down','tt')"></span>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ModuleGroupNum)
            <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',2,'up','tt')"></span>
            <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable',2,'down','tt')"></span>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BarCodeType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreateDate)
            <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',4,'up','times')"></span>
            <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 4, 'down', 'times')"></span>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Creator)
        </th>
        <th>操作</th>
    </tr>
</table>
<div style="height:640px;overflow-y:auto;">
    <table id="myTable" class="tableBottom" >
        <tbody>
            @if (Model != null)
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderNum)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.BarCodesNum)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ModuleGroupNum)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.BarCodeType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreateDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Creator)
                        </td>
                        <td>
                            @*@Html.ActionLink("修改", "Edit", new { id = item.ID }) |*@
                            @Html.ActionLink("详细", "Details", new { id = item.ID }) @*|
                                @Html.ActionLink("删除", "Delete", new { id = item.ID })*@
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

</div>
<script>
    function sortTable(tableId, indexs, upOrDown, types) {//点击按钮实现表格排序的方法；目前支持纯字符串排序+整数排序+标准时间格式排序
        var oTab = document.getElementById(tableId);
        var arr = [];
        var indexs = indexs;
        if (upOrDown === "up") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = parseInt(tr2.cells[indexs].innerHTML);
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date((tr1.cells[indexs].innerHTML)).getTime();
                    var n2 = new Date((tr2.cells[indexs].innerHTML)).getTime();
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerHTML).charCodeAt();
                    var n2 = (tr2.cells[indexs].innerHTML).charCodeAt();
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n2.value - n1.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n2 > n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        } else if (upOrDown === "down") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = parseInt(tr2.cells[indexs].innerHTML);
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date((tr1.cells[indexs].innerHTML)).getTime();
                    var n2 = new Date((tr2.cells[indexs].innerHTML)).getTime();
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerHTML).charCodeAt();
                    var n2 = (tr2.cells[indexs].innerHTML).charCodeAt();
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n1.value - n2.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n1 > n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        }
    }

    function timeToSec(time) {     //时分秒字符串格式转换为毫秒
        if (time.indexOf("时") != -1 || time.indexOf("分") != -1 || time.indexOf("秒") != -1) {
            var time = time.replace(/天/, ":");
            var time = time.replace(/小时/, ":");
            var time = time.replace(/分/, ":");
            var time = time.replace(/秒/, ":");
            var day = time.split(':')[0]
            var hour = time.split(':')[1]
            var min = time.split(':')[2]
            var sec = time.split(':')[3]
            var s = Number(day * 86400) + Number(hour * 3600) + Number(min * 60) + Number(sec)
            return s * 1000
        } else if (time.length >= 12) {
            var targetNum = time.substring(10);
            return Number(targetNum, 10);
        } else {
            var time = time.replace(/-/, "");
            //console.log(time)
            return time;
        }
    }


    function chackboxVal(input) {    //checkbox状态转换为数值

        if (input.checked == false) {
            input = 1
        } else {
            input = 0
        }
        return input;
    }
</script>
<div id="pagebar">
    @for (var i = 0; i < ViewBag.PageCount; i++)
    {
        if (i == ViewBag.PageIndex)
        {
            <span class="currentpagenumber">@(i + 1)</span>
        }
        else
        {
            <a class="pagenumber" href="javascript:;">@(i + 1)</a>
        }
    }
</div>
@section scripts {
    <script>
        function submitForm(pagenumber) {
            pagenumber = parseInt(pagenumber, 10);
            $('#PageIndex').val(pagenumber - 1);
            $('#searchForm').submit();
        }

        $(function () {

            $('#searchButton').click(function () {
                submitForm($('#pagebar .currentpagenumber').text());
            });

            $('#pagebar .pagenumber').click(function () {
                submitForm($(this).text());
            });

        });
    </script>
}