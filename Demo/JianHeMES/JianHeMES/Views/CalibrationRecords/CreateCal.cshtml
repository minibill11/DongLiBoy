@model JianHeMES.Models.CalibrationRecord

@{
    ViewBag.Title = "开始校正";
}

<h2 class="hidden-xs">@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div id="app" class="form-horizontal">
        <h4 class="hidden-xs">校正记录</h4>
        <h4 class="text-center visible-xs">开始校正</h4>
        <hr class="hidden-xs" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.OrderNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.OrderNum, ViewBag.OrderList as IEnumerable<SelectListItem>, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.OrderNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BarCodesNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BarCodesNum, new { htmlAttributes = new { @class = "form-control", onkeyup = "this.value=this.value.toUpperCase()" } })
                @Html.ValidationMessageFor(model => model.BarCodesNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div v-show="!checkstate" class="form-group">
            @Html.LabelFor(model => model.ModuleGroupNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.ModuleGroupNum, new { htmlAttributes = new { @class = "form-control", onkeyup = "this.value=this.value.toUpperCase()" } })*@
                <input v-model="ModuleGroupNumVal" v-bind:name="!checkstate?'ModuleGroupNum':''" data-val="true" data-val-required="模组号 字段是必需的。" onkeyup="this.value=this.value.toUpperCase()" class="form-control text-box single-line" type="text">
                @Html.ValidationMessageFor(model => model.ModuleGroupNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepetitionCalibration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.RepetitionCalibration, new { htmlAttributes = new { @class = "form-control", @style = "width:34px" } })*@
                <input v-model="checkstate" v-on:click="checkchange(checkstate)" v-bind:name="checkstate?'RepetitionCalibration':''" value="true" class="form-control check-box" data-val="true" data-val-required="是否重复校正 字段是必需的。" style="width:34px" type="checkbox">
                @Html.ValidationMessageFor(model => model.RepetitionCalibration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div v-show="checkstate" class="form-group">
            @Html.LabelFor(model => model.RepetitionCalibrationCause, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.TextAreaFor(model => model.RepetitionCalibrationCause, new { @class = "form-control" })*@
                <textarea v-model="RepetitionCause" v-bind:name="checkstate?'RepetitionCalibrationCause':''" class="form-control" cols="20" rows="2"></textarea>
                @Html.ValidationMessageFor(model => model.RepetitionCalibrationCause, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input v-bind:disabled="confirm" type="submit" value="开始校正" class="btn btn-default" />  @ViewBag.msg
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("返回", "Index")
</div>
<script src="~/Scripts/jquery-1.11.3.js"></script>
<script src="~/Scripts/vue.js"></script>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            confirm: true,
            RepetitionCause: "",
            checkstate: false,
            ModuleGroupNumVal: "",
        },
        created: function () {
        },
        watch: {
            RepetitionCause: function (val) {
                if (this.checkstate == true && val != "") {
                    this.confirm = false;
                } else {
                    this.confirm = true;
                };
            },
            ModuleGroupNumVal: function (val) {
                if (this.checkstate == false && val != "") {
                    this.confirm = false;
                } else {
                    this.confirm = true;
                };
            }
        },
        methods: {
            checkchange: function () {
                checkstate = !checkstate;
            }
        }
    });

    var localOrder = localStorage.getItem('Order');
    if (localOrder != null) {
        $("#OrderNum").val(localOrder);
    }
    $("#OrderNum").change(function (val) {
        localStorage.setItem('Order', val.target.value);
        $("#BarCodesNum").select();
    })
    $("#BarCodesNum").select();

    $("#BarCodesNum,#ModuleGroupNum").keypress(function (e) {
        //console.log(e.keyCode)
        if (e.keyCode == 13) {
            $("#ModuleGroupNum").focus();
            e.preventDefault();
        }
    });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
