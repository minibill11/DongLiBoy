@model JianHeMES.Models.Assemble
@{
    ViewBag.Title = "转接卡安装完成";
}
<link href="~/Scripts/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/vue.js"></script>
<style>
    .table > tbody > tr > td {
        padding: 5px;
        line-height: 1.2;
    }

    .table > tbody > tr > th {
        padding: 5px;
        line-height: 1.3;
    }

    .panel-heading {
        padding: 5px 25px;
    }

    .panel-title {
        font-size: 12px;
        height: 18px;
    }

    .color-show {
        display: flex;
        flex-wrap: wrap;
    }

    .color-box {
        width: 25%;
        text-align: center;
        transition: transform .3s;
    }
</style>





@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
   <div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       @Html.HiddenFor(model => model.Id, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssembleBT, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssemblePrincipal, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssembleFT, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssembleTime, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssembleFinish, new { @class = "control-label col-md-2" })

       @Html.HiddenFor(model => model.WaterproofTestBT, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofTestPrincipal, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofTestFT, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofTestTime, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofAbnormal, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofMaintaince, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.WaterproofTestFinish, new { @class = "control-label col-md-2" })
       @Html.HiddenFor(model => model.AssembleAdapterCardBT)
       @Html.HiddenFor(model => model.AssembleAdapterCardFT)
       @Html.HiddenFor(model => model.AssembleAdapterTime)
       @Html.HiddenFor(model => model.AssembleAdapterFinish)
       @Html.HiddenFor(model => model.AssembleAdapterCardPrincipal, new { @class = "control-label col-md-4" })

       @Html.HiddenFor(model => model.ViewCheckBT)
       @Html.HiddenFor(model => model.AssembleViewCheckPrincipal)
       @Html.HiddenFor(model => model.ViewCheckFT)
       @Html.HiddenFor(model => model.ViewCheckTime)
       @Html.HiddenFor(model => model.ViewCheckAbnormal)
       @Html.HiddenFor(model => model.ViewCheckFinish)

       @Html.HiddenFor(model => model.ElectricityCheckBT)
       @Html.HiddenFor(model => model.AssembleElectricityCheckPrincipal)
       @Html.HiddenFor(model => model.ElectricityCheckFT)
       @Html.HiddenFor(model => model.ElectricityCheckTime)
       @Html.HiddenFor(model => model.ElectricityCheckAbnormal)
       @Html.HiddenFor(model => model.ElectricityCheckFinish)

       @Html.HiddenFor(model => model.PQCCheckBT)
       @Html.HiddenFor(model => model.AssemblePQCPrincipal)
       @Html.HiddenFor(model => model.AssembleLineId)
       @Html.HiddenFor(model => model.PQCCheckFT)
       @Html.HiddenFor(model => model.PQCCheckTime)
       @Html.HiddenFor(model => model.PQCCheckAbnormal)
       @Html.HiddenFor(model => model.PQCCheckFinish)

    <div id="app" class="container" v-cloak>
        <div class="col-md-4">

            <div class="form-group">
                <div class="col-md-4"></div>
                <div class="col-md-8">
                    <h3>
                        @ViewBag.Title
                    </h3>
                </div>
            </div>

            <br />

            <div class="form-group">
                @Html.LabelFor(model => model.BoxBarCode, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                   @*@Html.DisplayFor(model => model.BoxBarCode)*@
                   @Html.EditorFor(model => model.BoxBarCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                   @Html.EditorFor(model => model.OrderNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "display:none" } })
                   @Html.ValidationMessageFor(model => model.BoxBarCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AdapterCard_Power_Collection, "输入转接卡、电源条码", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @*@Html.EditorFor(model => model.AdapterCard_Power_Collections,new { htmlAttributes = new { @class = "form-control", placeholder = "请输入转接卡、电源条码" } })*@
                    <input type="text" class="form-control" placeholder="请输入转接卡、电源条码" v-model.trim="newTask" id="content" style="display: inline-block;">
                    <input type="text" class="form-control" placeholder="请输入转接卡、电源条码" v-model="jsons" name="AdapterCard_Power_Collection" ref="content" style="display:none">
                    <button class="btn btn-default" v-on:click="addTask">添加</button>
                    <br /><span v-show="prompt" style="color: red;">不能输入相同条码</span>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">
                    <input type="submit" value="电源、转接卡组装完成" class="btn btn-default" v-on:click="clearTask" />
                </div>
            </div>
        </div>

        <div class="col-md-offset-1 col-md-7">

            <div class="panel panel-default">
                <div class="panel-heading">
                    <h6 class="panel-title">订单详情</h6>
                </div>
                <div class="panel-body">

                    <div class="col-md-6" style="font-size:11px;">
                        <table class="table">
                            <th style="text-align:center" colspan="2">组装工位详情</th>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssembleBT)</td>
                                <td>@Html.DisplayTextFor(model => model.AssembleBT)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssemblePrincipal)</td>
                                <td>@Html.DisplayFor(model => model.AssemblePrincipal)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssembleFT)</td>
                                <td>@Html.DisplayFor(model => model.AssembleFT)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.ModelCollections)</td>
                                <td>@Html.DisplayFor(model => model.ModelCollections)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssembleTime)</td>
                                <td>@Html.DisplayFor(model => model.AssembleTime)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssembleFinish)</td>
                                <td>@Html.DisplayFor(model => model.AssembleFinish)</td>
                            </tr>

                            <th style="text-align:center" colspan="2">防水测试详情</th>
                            <th></th>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterproofTestBT)</td>
                                <td>@Html.DisplayFor(model => model.WaterproofTestBT)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterproofTestTime)</td>
                                <td>@Html.DisplayFor(model => model.WaterproofTestTime)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterproofAbnormal)</td>
                                <td>@Html.DisplayFor(model => model.WaterproofAbnormal)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterproofMaintaince)</td>
                                <td>@Html.DisplayFor(model => model.WaterproofMaintaince)</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterproofTestFinish)</td>
                                <td>@Html.DisplayFor(model => model.WaterproofTestFinish)</td>
                            </tr>
                        </table>
                    </div>

                    <div class="col-md-6 " style="font-size:11px;">
                        <table class="table">
                            <th style="text-align:center" colspan="2">转接卡安装详情</th>
                            <tr>
                                <td>@Html.LabelFor(model => model.AssembleAdapterCardBT)</td>
                                <td>@Html.DisplayFor(model => model.AssembleAdapterCardBT)</td>
                            </tr>
                            @*
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleAdapterCardFT)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleAdapterCardFT)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleAdapterTime)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleAdapterTime)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleAdapterFinish)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleAdapterFinish)</td>
                                </tr>
                            *@
                        </table>
                    </div>
                </div>
            </div>
        </div>


        @*//防位移*@
        <div class="form-group"><div class="col-md-offset-2 col-md-8"></div></div>

        <div class="form-group">
            <label class="control-label col-md-2">模块条码清单:</label>
            <div class="col-md-6">
                    <div class="form-group color-show">
                        <template v-for="(task,index) in tasks">
                            <li v-if="tasks.length>0" readonly="readonly" class="color-box form-control" style="border:none;box-shadow:none;" v-dragging="{ list: tasks, item: task, group: 'task' }" :key="task.BarCodesNum">
                                <span>{{task.BarCodesNum}}</span>
                                <button type="button" v-on:click="removeTask(task)" title="移除任务" style="border: none; float: right;">✗</button>
                            </li>
                        </template>
                    </div>
            </div>
        </div>

        <div>
            @Html.ActionLink("返回", "AssembleIndex")
        </div>
    </div>
   </div>
 }

    <script src="~/Scripts/jquery-1.11.3.js"></script>
    <script type="text/javascript">
        Vue.use(VueDragging); //使用拖拽
        var app = new Vue({ //创建Vue对象实例
            el: "#app", //挂载DOM元素的ID
            data: {
                tasks: JSON.parse(localStorage.getItem('keyC') || '[]'),
                jsons: localStorage.getItem('keyC') || '[]',
                newTask: "", //input默认值
                same: true,
                prompt: false
            },
            methods: {
                //添加条码，判断是否为空，判断字符前后空格，焦点回到input，判断是否有重复数据，序号排列，保持本地存储
                addTask: function (event) {
                    event.preventDefault();
                    $.ajax({
                        type: 'post',
                        url: '/Assembles/CheckBarCode',  //请求的某个action的地址
                        datatype: "json",  //只有指定为json下面才可以直接用返回的json数据，否则要转化
                        data: {
                            barcode: app.newTask
                        },
                        error: function (e) {//请求失败
                            alert("POST失败！");
                        },
                        success: function (data) {
                            if (data == 'False') {
                                alert("模块号不存在");
                                app.newTask = "";
                            } else {
                                addtasks = app.tasks;
                                sames = app.same;
                                app.prompt = false;
                                if (app.newTask != "") {
                                    addtasks.forEach(function (item, index) {
                                        //item.StationId = index + 1;
                                        if (app.newTask == item.BarCodesNum) {
                                            console.log(index);
                                            console.log('不能输入相同条码');
                                            app.prompt = true;
                                            sames = false;
                                        }
                                    });
                                    if (sames) { //没有相同数据才允许添加
                                        addtasks.push({
                                            //StationId: app.tasks.length + 1,
                                            OrderNum: $("#OrderNum").val(),
                                            BoxBarCode: $("#BoxBarCode").val(),
                                            BarCodesNum: app.newTask
                                        });
                                        //localStorage.setItem('key', JSON.stringify(listTask));    无效
                                        localStorage.setItem('keyC', JSON.stringify(app.tasks));
                                        app.jsons = localStorage.getItem('keyC');
                                        app.newTask = "";
                                        $("#content").focus();
                                        //console.log(JSON.stringify(app.tasks)); //数组
                                        console.log(JSON.parse(localStorage.getItem('keyC'))); //object，JavaScript对象
                                    }
                                }
                            }
                        }
                    })
                },
                removeTask: function (task) { //删除条码，重新排序数组，焦点回到input，保存删除后的数据
                    //指向Vue实例中的tasks
                    removetasks = this.tasks;
                    //remove
                    removetasks.forEach(function (item, index) {
                        if (item.BarCodesNum == task.BarCodesNum) {
                            removetasks.splice(index, 1);
                        }
                    });
                    removetasks.forEach(function (item, index) {
                        //item.StationId = index + 1;
                    });

                    localStorage.setItem('keyC', JSON.stringify(app.tasks));
                    app.jsons = localStorage.getItem('keyC');
                    app.prompt = false;
                    console.log(JSON.parse(localStorage.getItem('keyC'))); //输出删除后的排序
                    $("#content").focus();
                },
                clearTask: function () { //清空本地存储表单
                    //event.preventDefault();
                    localStorage.removeItem('keyC');
                    this.tasks = [];
                }
            },
            mounted: function () {
                //this.$dragging.$on('dragged', function(data) { //拖拽过程中响应
                //	//console.log('dragged', JSON.stringify(data))
                //})
                this.$dragging.$on('dragend', function (data) { //拖拽结束后响应，排序拖拽后数据，存储本地
                    //console.log('dragend', data);
                    app.tasks.forEach(function (item, index) {
                        //item.StationId = index + 1;
                    });
                    localStorage.setItem('keyC', JSON.stringify(app.tasks));
                    app.jsons = localStorage.getItem('keyC');
                    console.log(JSON.parse(localStorage.getItem('keyC'))); //object，JavaScript对象
                })
            }
        });
                //$("#finishButton").submit(function () {
                //    var jsons = localStorage.getItem('keyC')
                //    return jsons;
                //})
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
