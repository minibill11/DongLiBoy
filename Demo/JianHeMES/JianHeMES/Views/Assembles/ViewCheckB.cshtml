@model JianHeMES.Models.Assemble

@{
    ViewBag.Title = "视检开始";
}

<h2>@ViewBag.Title</h2>
<style>
    #BoxBarCode {
        display: inline-block;
    }

    .RepertoryStyle {
        color: #555;
        padding: 6px 12px 6px 12px;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>视检开始</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @*@Html.HiddenFor(model => model.OrderNum)
            @Html.HiddenFor(model => model.AssembleBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssemblePrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.WaterproofTestBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofAbnormal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofMaintaince, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.AdapterCardBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AdapterCardPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterCardFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.ViewCheckBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleViewCheckPrincipal, new { @class = "control-label col-md-2" })*@
        @Html.HiddenFor(model => model.ViewCheckFT, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ViewCheckTime, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ViewCheckAbnormal, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ViewCheckFinish, new { @class = "control-label col-md-2" })

        @Html.HiddenFor(model => model.ElectricityCheckBT, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.AssembleElectricityCheckPrincipal, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ElectricityCheckFT, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ElectricityCheckTime, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ElectricityCheckAbnormal, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.ElectricityCheckFinish, new { @class = "control-label col-md-2" })

        @Html.HiddenFor(model => model.PQCCheckBT, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.AssemblePQCPrincipal, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.PQCCheckFT, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.PQCCheckTime, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.PQCCheckAbnormal, new { @class = "control-label col-md-2" })
        @Html.HiddenFor(model => model.PQCCheckFinish, new { @class = "control-label col-md-2" })



        @*<div class="form-group">
                @Html.LabelFor(model => model.OrderNum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderNum, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderNum, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.BoxBarCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BoxBarCode, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } })
                <span class="RepertoryStyle">是否为库存：<input id="IsRepertory" type="checkbox" onclick="javascript: document.getElementById('hiddenIsRepertory').value = this.checked;"></span>
                <input id="hiddenIsRepertory" name="IsRepertory" type="hidden" value="false">
                @Html.ValidationMessageFor(model => model.BoxBarCode, "", new { @class = "text-danger" })
            </div>
        </div>



        @*<div class="form-group">
                @Html.LabelFor(model => model.ViewCheckBT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ViewCheckBT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ViewCheckBT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewCheckFT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ViewCheckFT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ViewCheckFT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewCheckTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ViewCheckTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ViewCheckTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewCheckAbnormal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ViewCheckAbnormal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ViewCheckAbnormal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewCheckFinish, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ViewCheckFinish)
                        @Html.ValidationMessageFor(model => model.ViewCheckFinish, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ElectricityCheckBT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ElectricityCheckBT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ElectricityCheckBT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ElectricityCheckFT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ElectricityCheckFT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ElectricityCheckFT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ElectricityCheckTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ElectricityCheckTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ElectricityCheckTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ElectricityCheckAbnormal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ElectricityCheckAbnormal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ElectricityCheckAbnormal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ElectricityCheckFinish, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ElectricityCheckFinish)
                        @Html.ValidationMessageFor(model => model.ElectricityCheckFinish, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PQCCheckBT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PQCCheckBT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PQCCheckBT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PQCCheckFT, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PQCCheckFT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PQCCheckFT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PQCCheckTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PQCCheckTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PQCCheckTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PQCCheckAbnormal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PQCCheckAbnormal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PQCCheckAbnormal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PQCCheckFinish, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.PQCCheckFinish)
                        @Html.ValidationMessageFor(model => model.PQCCheckFinish, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@




        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="开始视检工作" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("返回", "AssembleIndex")
</div>
<script src="~/Scripts/jquery-1.11.3.js"></script>
<script>
        $(function () {
            if (localStorage.getItem('isRepertory') == "true") {
                $("#IsRepertory").attr("checked", true);
                $("#hiddenIsRepertory").val(true);
            };
            $("#IsRepertory").change(function () {
                localStorage.setItem('isRepertory', $(this).is(':checked'));
            });
        });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
