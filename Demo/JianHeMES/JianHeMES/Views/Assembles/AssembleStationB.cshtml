@model JianHeMES.Models.Assemble
@*@model IEnumerable<JianHeMES.Models.Assemble>*@

@{
    ViewBag.Title = "组装线 -- 组装工位";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    function ResetForm() {
        document.getElementById('bc').value = "";
    };


</script>
<h2>@ViewBag.Title</h2>
<p>@ViewBag.test</p>

<form  method="get">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>组装工位</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.OrderNum, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssemblePrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleFinish, new { @class = "control-label col-md-2" })
            
            @Html.HiddenFor(model => model.WaterproofTestBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestTimeSpan, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofAbnormal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofMaintaince, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.WaterproofTestFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.AssembleAdapterCardBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterCardPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterCardFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleAdapterFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.ViewCheckBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleViewCheckPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ViewCheckFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ViewCheckTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ViewCheckAbnormal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ViewCheckFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.ElectricityCheckBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssembleElectricityCheckPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ElectricityCheckFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ElectricityCheckTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ElectricityCheckAbnormal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.ElectricityCheckFinish, new { @class = "control-label col-md-2" })

            @Html.HiddenFor(model => model.PQCCheckBT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.AssemblePQCPrincipal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.PQCCheckFT, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.PQCCheckTime, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.PQCCheckAbnormal, new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.PQCCheckFinish, new { @class = "control-label col-md-2" })


            <div class="form-group" new{@name="BoxBarCode"} >
                @Html.LabelFor(model => model.BoxBarCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BoxBarCode, new { htmlAttributes = new { @class = "form-control", id = "bc",placeholder="请输模组入条码", autofocus = "autofocus" } })
                    @Html.ValidationMessageFor(model => model.BoxBarCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Remark, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="form-group" new{@name="ModelCollection" }>
                @Html.LabelFor(model => model.ModelCollection, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ModelCollection, new { htmlAttributes = new { @class = "form-control", placeholder = "请输模块入条码" } })
                    @Html.ValidationMessageFor(model => model.ModelCollection, "", new { @class = "text-danger" })
                </div>
            </div>*@



            <div class="form-group">
                @*<input type="text" name="BarCode" />*@
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="开始组装" class="btn btn-default" id="bgnAssemble" onclick="~Assemble/AssembleStation" formmethod="post"/>
                    @*<input type="submit" value="完成组装" class="btn btn-default" id="fnhAssemble"/>*@
                    <input type="button" value="清空重置" class="btn btn-default" onclick="ResetForm()" />
                    @*@Html.ActionLink("开始组装", "AssembleStation")*@
                </div>
            </div>
            <div>
                @Html.ActionLink("返回", "AssembleIndex")
            </div>
        </div>
     
    }
</form>



<script>

</script>
@*<style>
    input::-webkit-input-placeholder {
        color: red;
    }
    input:-moz-placeholder{color:red;}
    input::-moz-placeholder{color:red;}
    input:-ms-input-placeholder{color:red;}
</style>*@