@model JianHeMES.Models.Assemble

@{
    ViewBag.Title = "组装完成";
}
<link href="~/Scripts/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/vue.js"></script>

<style>
        .table > tbody > tr > td {
        padding: 5px;
        line-height: 1.2;
    }

    .table > tbody > tr > th {
        padding: 5px;
        line-height: 1.3;
    }

    .panel-heading {
        padding: 5px 25px;
    }

    .panel-title {
        font-size: 12px;
        height: 18px;
    }
    .color-show {
        display: flex;
        flex-wrap: wrap;
    }

    .color-box {
        width: 20%;
        text-align: center;
        transition: transform .3s;
    }
</style>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @*@Html.HiddenFor(model => model.OrderNum,new { @id = "ordernum" })*@
        @*@Html.HiddenFor(model => model.ModelCollections, new { @class = "control-label col-md-4" })*@
        @Html.HiddenFor(model => model.AssemblePrincipal, new { @class = "control-label col-md-4" })
        @Html.HiddenFor(model => model.AssembleFT, new { @class = "control-label col-md-4" })
        @Html.HiddenFor(model => model.AssembleTime, new { @class = "control-label col-md-4" })
        @Html.HiddenFor(model => model.AssembleFinish, new { @class = "control-label col-md-4" })

 
        <div id="app" class="container" v-cloak>
            <div class="col-md-offset-1 col-md-4">
                <div class="form-group">
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        <h3>
                            @ViewBag.Title
                        </h3>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BoxBarCode, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.BoxBarCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.EditorFor(model => model.OrderNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly",@style = "display:none" } })
                        @Html.ValidationMessageFor(model => model.BoxBarCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AssembleBT, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.AssembleBT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.AssembleBT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModelCollections, "输入模块号", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.ModelCollections,new { htmlAttributes = new { @class = "form-control", placeholder = "请输入模块条码" } })*@
                        <input type="text" class="form-control" placeholder="请输入模块条码" v-model.trim="newTask" id="content" style="display: inline-block;">
                        <input type="text" class="form-control" placeholder="请输入模块条码" v-model="jsons" name="ModelCollections" ref="content" style="display:none">
                        <button class="btn btn-default" v-on:click="addTask">添加</button>
                        <br /><span v-show="prompt" style="color: red;">不能输入相同条码</span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-4 col-md-8">
                        <input type="submit" value="完成组装" class="btn btn-default" v-on:click="clearTask" />
                    </div>
                </div>
            </div>
            
            <div class="col-md-offset-3 col-md-3">
                <br />
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h6 class="panel-title">订单详情</h6>
                    </div>
                    <div class="panel-body">
                            <table class="table" style="font-size:11px;">
                                <th style="text-align:center" colspan="2">组装工位详情</th>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleBT)</td>
                                    <td>@Html.DisplayTextFor(model => model.AssembleBT)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssemblePrincipal)</td>
                                    <td>@Html.DisplayFor(model => model.AssemblePrincipal)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleFT)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleFT)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.ModelCollections)</td>
                                    <td>@Html.DisplayFor(model => model.ModelCollections)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleTime)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleTime)</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(model => model.AssembleFinish)</td>
                                    <td>@Html.DisplayFor(model => model.AssembleFinish)</td>
                                </tr>
                            </table>
                    </div>
                </div>
            </div>
            @*//防位移*@
            <div class="form-group"><div class="col-md-offset-2 col-md-8"></div></div>
                
                <div class="form-group">
                    <label class="control-label col-md-2" for="ModelCollections">模块条码清单:</label>
                    <div class="col-md-6">
                        <form id="modelList" name="modelList">
                            <div class="form-group color-show">
                                <template v-for="(task,index) in tasks">
                                    <li v-if="tasks.length>0" readonly="readonly" class="color-box form-control" style="border:none;box-shadow:none;" v-dragging="{ list: tasks, item: task, group: 'task' }" :key="task.BarCodesNum">
                                        <span>{{task.BarCodesNum}}</span>
                                        <button type="button" v-on:click="removeTask(task)" title="移除任务" style="border: none; float: right;">✗</button>
                                    </li>
                                </template>
                            </div>
                        </form>
                    </div>
                </div>

                <div>
                    @Html.ActionLink("返回", "AssembleIndex")
                </div>
            </div>
            

        


</div>
}
<script src="~/Scripts/jquery-1.11.3.js"></script>
<script type="text/javascript">
			Vue.use(VueDragging); //使用拖拽
			var app = new Vue({ //创建Vue对象实例
				el: "#app", //挂载DOM元素的ID
				data: {
					tasks: JSON.parse(localStorage.getItem('key') || '[]'),
					jsons: localStorage.getItem('key') || '[]',
					newTask: "", //input默认值
					same: true,
					prompt: false
				},
				methods: {
					//添加条码，判断是否为空，判断字符前后空格，焦点回到input，判断是否有重复数据，序号排列，保持本地存储
					addTask: function(event) {
						event.preventDefault();
						addtasks = this.tasks;
						sames = this.same;
						this.prompt = false;
						if(this.newTask != "") {
							addtasks.forEach(function(item, index) {
								item.StationId = index + 1;
								if(app.newTask == item.BarCodesNum) {
									console.log(index);
									console.log('不能输入相同条码');
									app.prompt = true;
									sames = false;
								}
							});
							if(sames) { //没有相同数据才允许添加
							    addtasks.push({
							        StationId: app.tasks.length+1,
							        OrderNum: $("#OrderNum").val(),
							        BoxBarCode: $("#BoxBarCode").val(),
									BarCodesNum: this.newTask
									
								});
								//localStorage.setItem('key', JSON.stringify(listTask));    无效
							    localStorage.setItem('key', JSON.stringify(app.tasks));
							    app.jsons = localStorage.getItem('key');
								this.newTask = "";
								$("#content").focus();
								//console.log(JSON.stringify(app.tasks)); //数组
								console.log(JSON.parse(localStorage.getItem('key'))); //object，JavaScript对象
							}

						}
					},
					removeTask: function(task) { //删除条码，重新排序数组，焦点回到input，保存删除后的数据
						//指向Vue实例中的tasks
						removetasks = this.tasks;
						//remove
						removetasks.forEach(function(item, index) {
							if(item.BarCodesNum == task.BarCodesNum) {
								removetasks.splice(index, 1);
							}
						});
						removetasks.forEach(function(item, index) {
							item.StationId = index + 1;
						});

						localStorage.setItem('key', JSON.stringify(app.tasks));
						app.jsons = localStorage.getItem('key');
						app.prompt = false;
						console.log(JSON.parse(localStorage.getItem('key'))); //输出删除后的排序
						$("#content").focus();
					},
					clearTask: function() { //清空本地存储表单
						//event.preventDefault();
						localStorage.removeItem('key');
						this.tasks = [];
					}
				},
				mounted: function() {
					//this.$dragging.$on('dragged', function(data) { //拖拽过程中响应
					//	//console.log('dragged', JSON.stringify(data))
					//})
					this.$dragging.$on('dragend', function(data) { //拖拽结束后响应，排序拖拽后数据，存储本地
						//console.log('dragend', data);
						app.tasks.forEach(function(item, index) {
							item.StationId = index + 1;
						});
						localStorage.setItem('key', JSON.stringify(app.tasks));
						app.jsons = localStorage.getItem('key');
						console.log(JSON.parse(localStorage.getItem('key'))); //object，JavaScript对象
					})
				}

			});
			//$("#finishButton").submit(function () {
			//    var jsons = localStorage.getItem('key')
			//    return jsons;
			//})
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


