@model JianHeMES.Models.Personnel_Reasons_for_leaving

@{
    ViewBag.Title = "Create";
}
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<style>
    h2{
        text-align:center;
    }
    .container{
        padding:0;
    }
    .color2{
        color:red;
        font-size:16px;
    }
    .has-gutter tr th .cell,.el-table__row td .cell{
        text-align:center;
        
    }
    .el-table .cell{
        padding:0 !important;
    }
    .el-table__header tr,
    .el-table__header th {
        font-size:13px;
        padding: 0;
        height: 30px;
    }

    .el-table__body tr,
    .el-table__body td {
        padding: 0;
        font-size:12px;
        height: 30px;
    }
    textarea{
        height:30px;
        width:15%;
    }
    .inputtext{
        margin-top:25px;
        display:inline-flex;
        width:100%;
    }
   h4{
       width:75%;
       font-size:20px;
       text-align:center;
   }
   .bottomInfo{
       display:flex;
       justify-content:space-between;
   }
   .pone{
       align-self:flex-end;
       font-size:14px;
   }
</style>
<h2>Create</h2>

<div class="container" id="app">
    <div class="inputtext">
        <textarea v-model="inputInfo" placeholder="表格粘贴处..."></textarea>
        <h4>批量添加员工</h4>
    </div>
    <el-table v-bind:data="tableData" style="width: 100%" max-height="690" border stripe>
        <el-table-column prop="jobNum" label="工号" width="62">
        </el-table-column>
        <el-table-column prop="Name" label="中文名" width="63">
        </el-table-column>
        <el-table-column prop="Department_leaving" label="部门名称" width="78">
        </el-table-column>
        <el-table-column prop="Position" label="职位名称" width="78">
        </el-table-column>
        <el-table-column prop="levelType" label="族群" width="52">
        </el-table-column>
        <el-table-column prop="HireDate" label="入职日期" width="78">
        </el-table-column>
        <el-table-column prop="LastDate" label="离职日期" width="78">
        </el-table-column>
        <el-table-column prop="Remark" label="备注" width="152">
        </el-table-column>
        <el-table-column prop="Department_of_conclusion" label="部门结论" width="83">
        </el-table-column>

        <el-table-column prop="HR_conclusion" label="人力资源部结论" width="75">
        </el-table-column>

        <el-table-column prop="Pay_dissatisfaction" label="薪酬不满意" width="60">
        </el-table-column>
        <el-table-column prop="NotSystem" label="制度不满意" width="60">
        </el-table-column>
        <el-table-column prop="Notmanagement" label="管理不满意" width="60">
        </el-table-column>
        <el-table-column prop="Jobenvironment" label="工作环境不满意" width="75">
        </el-table-column>
        <el-table-column prop="Better_development" label="更好的发展" width="60">
        </el-table-column>s
    @*<el-table-column prop="fenbu" label="工龄分布" width="60">
    </el-table-column>*@
        <el-table-column label="操作" width="55">
            <template slot-scope="scope">
                <el-button v-on:click.native.prevent="deleteRow(scope.$index)"
                           type="text"
                           size="small">
                    移除
                </el-button>
            </template>
        </el-table-column>
    </el-table>
    <div class="bottomInfo" v-if="flag">
        <p class="pone">本次共提交<span style="color:red;font-size:18px;">{{count}}</span>条数据！<span v-if="flags">存在重复数据，请移除其中一项并点击上传！</span></p>
        <p>
            <el-button v-on:click="postData" type="primary" size="mini">上传<i class="el-icon-upload el-icon--right"></i></el-button>
            <el-button v-on:click="clearAll" type="primary" size="mini">清空<i class="el-icon-delete el-icon--right"></i></el-button>
        </p>
    </div>

</div>

<script>

    var vm = new Vue({
        el: "#app",
        data: {
            inputInfo: '',
            tableData: [],
            count: 0,
            flags: false,
            flag:false
        },
        methods: {
            deleteRow(index, rows) {
                $(rows).removeClass("color2");
                this.tableData.splice(index, 1);
                this.count--;
            },
            postData() {
                if (this.tableData.length > 0) {
                    var finalPost = this.tableData
                    finalPost.forEach(item=> {
                        item.Pay_dissatisfaction = item.Pay_dissatisfaction == '' ? '0' : item.Pay_dissatisfaction
                        item.NotSystem = item.NotSystem == '' ? '0' : item.NotSystem
                        item.Notmanagement = item.Notmanagement == '' ? '0' : item.Notmanagement
                        item.Jobenvironment = item.Jobenvironment == '' ? '0' : item.Jobenvironment
                        item.Better_development = item.Better_development == '' ? '0' : item.Better_development
                    })
                    axios.post("/Personnel_Reasons_for_leaving/Batch_leave", { inputList: finalPost }).then(res=> {
                        console.log(res.data)
                        if (res.data == 'true') {
                            this.$message({
                                message: '上传成功',
                                type: 'success'
                            });
                            this.inputInfo = '';
                        } else {
                            this.$message({
                                message:res.data,
                                type: 'success'
                            });
                        }
                    }).catch(err=> {

                    })
                }
            },
            clearAll() {
                this.inputInfo = '';
            }
        },
        watch: {
            inputInfo(val) {
                if (this.inputInfo == '') { this.flag = false } else { this.flag = true };
                var valOfPaste = val.split("\n");
                valOfPaste.pop();
                var initDatas = []
                valOfPaste.forEach((item, i) => {
                    var items = item.split("\t");
                    initDatas.push(items)
                })
                var datas = [];
                for (let i = 0; i < initDatas.length; i++) {
                    var jobNum = initDatas[i][0]  //工号
                    var Name = initDatas[i][1]  //姓名
                    var Department_leaving = initDatas[i][2]  //部门名称
                    var Position = initDatas[i][3]  //职位名称
                    var levelType = initDatas[i][4]  //族群
                    var HireDate = initDatas[i][5]  //入职日期
                    var LastDate = initDatas[i][6]  //离职日期
                    var Remark = initDatas[i][7]  //备注
                    var Department_of_conclusion = initDatas[i][8]  //部门结论
                    var HR_conclusion = initDatas[i][9]  //人力资源部结论
                    var Pay_dissatisfaction = initDatas[i][10]  //薪酬不满意
                    var NotSystem = initDatas[i][11]  //制度不满意
                    var Notmanagement = initDatas[i][12]  //管理不满意
                    var Jobenvironment = initDatas[i][13]  //工作环境不满意
                    var Better_development = initDatas[i][14]  //更好的发展
                    var data = {
                        Name, jobNum, Department_leaving, Position,
                        levelType, HireDate, LastDate, Remark, Department_of_conclusion,
                        HR_conclusion, Pay_dissatisfaction, NotSystem, Notmanagement,
                        Jobenvironment, Better_development
                    }
                    datas.push(data)
                }
                this.tableData = datas
                this.count = this.tableData.length;
                console.log(datas)
            },
            count() {
                if (this.count == 0) {
                    this.flag = false;
                    this.inputInfo = '';
                }
            }
        }
    })
</script>

@*@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Personnel_Reasons_for_leaving</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.jobNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.jobNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.jobNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department_leaving, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Department_leaving, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Department_leaving, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DP_group, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DP_group, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DP_group, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.levelType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.levelType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.levelType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HireDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HireDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HireDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department_of_conclusion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Department_of_conclusion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Department_of_conclusion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HR_conclusion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HR_conclusion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HR_conclusion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pay_dissatisfaction, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Pay_dissatisfaction, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Pay_dissatisfaction, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NotSystem, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NotSystem, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NotSystem, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notmanagement, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notmanagement, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notmanagement, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Jobenvironment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Jobenvironment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Jobenvironment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Better_development, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Better_development, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Better_development, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
