@model IEnumerable<JianHeMES.Models.Personnel_Framework>

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<style>
    .el-tabs__nav-wrap{
        width:122%;
    }
    .el-tabs__content{
        width:123%;
    }
    .el-tabs,el-tabs--top{
        width:74.5% !important;
    }
    .el-table__header-wrapper{
        width:103%;
    }
    .top-container{
        display:flex;
        justify-content:flex-start;
        margin-top:25px;
    }
    .app-container{
        margin-top:15px;
    }
    .filter-tree{
        margin-top:10px;
        width:100%;
    }
    .bottom-container{
        width:22%;
        height:650px;
        overflow:auto;
    }
    .gottable{
        width:100%;
        /*border:1px solid green;*/
    }
    .gottable>table{
        text-align:center;
    }
    .button-container{
        display:flex;
        justify-content:flex-start;
    }
    .button-container>button{
        padding:6px;
        margin:0;
    }
    .formedia{
        display:flex;
        width:110%;
        justify-content:flex-start;
    }
    @@media (max-width:450px){
    .formedia{
        display:block;
    }
    .bottom-container{
        width:100%;
        height:auto;
    }
    .gottable{
        width:837px;
    }
    }
</style>
<div class="top-container">
    <h4>人事架构</h4>
    @*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
</div>
<div id="app" class="app-container">
    <div style="display:flex;justify-content:flex-start">
        <el-input placeholder="输入关键字进行过滤"
                  v-model="filterText" size="small ">
        </el-input>
        @*当前位置：
    <el-breadcrumb style="margin-left:15px;" separator="/">
        <el-breadcrumb-item>首页</el-breadcrumb-item>
        <el-breadcrumb-item>活动管理</el-breadcrumb-item>
        <el-breadcrumb-item>活动列表</el-breadcrumb-item>
        <el-breadcrumb-item>活动详情</el-breadcrumb-item>
    </el-breadcrumb>*@
    </div>
    <div class="button-container">
        <el-button type="primary" v-for="(item,index) in buttons" v-on:click="expandAllNode(item,index)" size="mini">{{item}}</el-button>
    </div>
    <div class="formedia">
        <div class="bottom-container">
            <el-tree empty-text="正在加载..." class="filter-tree" node-key="label" ref="tree2" v-on:check-change="checkChange"
                     v-bind:default-expanded-keys="defaultexpanded" v-on:node-expand="expanded" v-bind:data="mountedInfos"
                     show-checkbox
                     v-on:node-click="handleNodeClick" v-bind:props="defaultProps" v-bind:filter-node-method="filterNode">
            </el-tree>
        </div>
        <el-tabs v-model="activeName" v-on:tab-click="handleClick">
            <el-tab-pane label="用户管理" name="first">
                <div class="gottable">
                    <el-table v-bind:data="positionInfos" style="width: 104%" size="small" max-height="650" empty-text="请选择具体职位">
                        <el-table-column prop="JobNum"
                                         label="工号"
                                         sortable
                                         width="68">
                        </el-table-column>
                        <el-table-column prop="Name"
                                         label="姓名"
                                         sortable
                                         width="68">
                        </el-table-column>
                        <el-table-column prop="Sex"
                                         label="性别"
                                         sortable
                                         width="68">
                        </el-table-column>
                        <el-table-column prop="Education"
                                         label="学历"
                                         sortable
                                         width="68">
                        </el-table-column>
                        <el-table-column prop="Department"
                                         label="部门"
                                         sortable
                                         width="95">
                        </el-table-column>
                        <el-table-column prop="DP_Group"
                                         label="组名"
                                         sortable
                                         width="100">
                        </el-table-column>
                        <el-table-column prop="Position"
                                         label="职位"
                                         sortable
                                         width="100">
                        </el-table-column>
                        <el-table-column prop="HireDate"
                                         label="入司日期"
                                         sortable
                                         width="115">
                        </el-table-column>
                        <el-table-column prop="Status"
                                         label="员工状态"
                                         sortable
                                         width="95">
                        </el-table-column>
                        <el-table-column prop="levelType"
                                         label="级别"
                                         sortable
                                         width="70">
                        </el-table-column>
                    </el-table>
                </div>
            </el-tab-pane>
            <el-tab-pane label="用户请假信息" name="second">
                <div class="gottable">
                    <el-table class="tableTop" size="small" v-bind:data="leaveData" style="width: 100%" max-hright="650" v-bind:highlight-current-row=true>
                        <el-table-column prop="Name" label="姓名" sortable width="68">
                        </el-table-column>
                        <el-table-column prop="jobNum" label="工号" sortable width="68">
                        </el-table-column>
                        <el-table-column prop="department" label="部门" sortable width="90">
                        </el-table-column>
                        <el-table-column prop="DP_group" label="班组" width="90" sortable>
                        </el-table-column>
                        <el-table-column prop="position" label="岗位" width="90" sortable>
                        </el-table-column>
                        <el-table-column prop="agent" sortable label="代理人" width="80">
                        </el-table-column>
                        <el-table-column prop="leaveType" sortable label="请假类型" width="95">
                        </el-table-column>
                        <el-table-column prop="applydate" class="" sortable label="申请日期" width="95">
                        </el-table-column>
                        <el-table-column prop="leaveStartTime" label="开始时间" sortable width="95">
                        </el-table-column>
                        <el-table-column prop="leaveEndTime" label="结束时间" width="95" sortable>
                        </el-table-column>
                        <el-table-column prop="leaveTimeNum" label="请假时长" width="95" sortable>
                        </el-table-column>
                        <el-table-column prop="leaveReason" label="请假事由" width="95" sortable>
                        </el-table-column>
                        <el-table-column prop="remark" label="备注" width="85">
                        </el-table-column>
                    </el-table>
                </div>
            </el-tab-pane>
            <el-tab-pane label="角色管理" name="third">敬请期待！</el-tab-pane>
            <el-tab-pane label="定时任务补偿" name="fourth">敬请期待！</el-tab-pane>
        </el-tabs>
    </div>
    
</div>
<script>
    var vm = new Vue({
        el: "#app",
        data: {
            leaveData:[],
            activeName: 'second',
            positionsId:"",
            flag:true,
            defaultexpanded: [],
            positionInfos: [],
            buttons: [],
            filterText: "",
            mountedInfos: [],
            defaultProps: {
                children: 'children',
                label: 'label'
            }
        },
        mounted() {
            this.getMountedInfos();
        },
        methods: {
            expandAllNode(val, index) {
                this.defaultexpanded = [];
                var target = this.defaultexpanded;
                for (let i = 0; i < this.mountedInfos.length; i++) {
                    if (this.mountedInfos[i].label == val) {
                        var centers = this.mountedInfos[i].label
                        target.push(centers)
                        for (item in this.mountedInfos[i].children) {
                            var departments = this.mountedInfos[i].children[item].label
                            target.push(departments)
                            for (items in this.mountedInfos[i].children[item].children) {
                                var growps = this.mountedInfos[i].children[item].children[items].label
                                target.push(growps)
                            }
                        }
                    }
                }
                var tree = this.$refs.tree2
                //console.log(tree.$children[1].expanded)  //---具有expanded属性
                //console.log(tree)
                if (tree.$children[index].expanded) {   //判断是否展开，展开则点击--触发关闭   expanded=true为展开状态
                    this.defaultexpanded = [];
                    tree.$children[index].$el.click()
                }
            },
            filterNode(value, data) {
                if (!value) return true;
                return data.label.indexOf(value) !== -1;
            },
            getMountedInfos() {
                axios.post("/Personnel_Framework/Index").then(res=> {
                    console.log(res.data)
                    var datas = [];
                    for (item in res.data) {
                        this.buttons.push(item);
                        //console.log(item) //中心
                        //console.log(res.data[item]) //中心对象
                        var obj = {}
                        obj.label = item;
                        obj.children = [];
                        datas.push(obj)
                        for (item2 in res.data[item]) {
                            //console.log(item2);    //部门
                            var obj2 = {};
                            obj2.label = item2;
                            obj2.children = []
                            obj.children.push(obj2)
                            for (item3 in res.data[item][item2]) {
                                //console.log(item3);  //组
                                var obj3 = {};
                                obj3.label = item3;
                                obj3.children = [];
                                obj2.children.push(obj3);
                                for (item4 in res.data[item][item2][item3]) {
                                    //console.log(res.data[item][item2][item3][item4]);   //具体职位
                                    var obj4 = {};
                                    obj4.label = `${res.data[item][item2][item3][item4]}`;
                                    obj4.id = `${item4}`
                                    //if (obj4.label.indexOf(0) != -1) {
                                    //    obj4.disabled = true;
                                    //}
                                    //obj4.children = res.data[item][item2][item3][item4];
                                    obj3.children.push(obj4);

                                }
                            }
                        }
                    }
                    console.log(datas)
                    this.mountedInfos = datas;
                }).catch(err=> {
                    this.$notify({
                        title: '警告',
                        message: '连接数据库失败！',
                        type: 'warning'
                    });
                })
            },
            handleNodeClick(data,test) {
                if (test.parent.parent.parent.parent) {
                    if (test.checked) {
                        test.checked = false;
                    } else {
                        test.checked = true;
                    }
                    
                }
            },
            timeFormatsss(val) {
                var theDay = new Date(val);
                var theYear = theDay.getFullYear();
                var theMonth = (theDay.getMonth() + 1).toString().padStart(2, "0");
                var theWeek = theDay.getDate().toString().padStart(2, "0");
                var theHour = theDay.getHours().toString().padStart(2, "0");
                var theMinue = theDay.getMinutes().toString().padStart(2, "0");
                var theSecond = theDay.getSeconds().toString().padStart(2, "0");
                return theYear + "-" + theMonth + "-" + theWeek + ' ';
            },
            getPositionInfos(positionArr) {
                var flag = true;
                positionArr.forEach(item => {
                    if (item == undefined) {
                        flag = false;
                    }
                });
                if (flag) {
                    console.log(positionArr)
                    axios.post("/Personnel_Framework/GetUersInfo", { framworksList: 123 }).then(res => {
                        //console.log(res.data);
                        for (item in res.data) {
                            if (res.data[item].Sex == true) {
                                res.data[item].Sex = "男"
                            } else {
                                res.data[item].Sex = "女"
                            }
                            //res.data[item].HireDate = this.timeFormatsss(res.data[item].HireDate) + "08:30:00"
                            this.positionInfos.push(res.data[item]);

                           // console.log(res.data[item].Sex)
                        }
                        //console.log(this.positionInfos)
                    }).catch(err => {
                        this.$notify({
                            title: '警告',
                            message: '无法连接服务器',
                            type: 'warning'
                        });
                    })

                }
            },
            expanded(data, test, item) {
            },
            checkChange(item, slef, sons) {
                this.positionInfos = [];
                var checkedArr = [];
                var postList = [];
                for (let i = 0; i < this.$refs.tree2.getCheckedNodes().length; i++) {
                    checkedArr.push(this.$refs.tree2.getCheckedNodes()[i]);
                }
                console.log(checkedArr)
                for (let i = 0; i < checkedArr.length; i++) {
                    if (checkedArr[i].id) {
                        postList.push(checkedArr[i].id)
                    }
                }
                if (postList.length == 0) {
                    this.positionInfos = [];
                }
                this.positionsId = postList;
                
               // this.getCheckedKeys();
            },
            getCheckedKeys(arr) {
               // console.log(this.$refs.tree2.getCheckedNodes());
            },
            handleClick(tab, event) {
                //console.log(tab, event);
            }
        },
        watch: {
            filterText(val) {
                this.$refs.tree2.filter(val);
            },
            positionsId(n, m) {

                console.log(this.positionsId)
                if (n.length == m.length) { } else {
                    axios.post("/Personnel_Framework/GetUersInfo", { idList: this.positionsId }).then(res=> {
                        //alert("X")
                        console.log(res.data)
                        for (item in res.data) {
                            if (res.data[item].Sex == true) {
                                res.data[item].Sex = "男"
                            } else {
                                res.data[item].Sex = "女"
                            }
                            res.data[item].HireDate = this.timeFormatsss(res.data[item].HireDate)
                            this.positionInfos.push(res.data[item]);

                            // console.log(res.data[item].Sex)
                        }
                    }).catch(err=> {
                        //this.$notify({
                        //    title: '警告',
                        //    message: '无法连接服务器',
                        //    type: 'warning'
                        //});
                        //alert("y")
                    })
                }
                
            }
        },
    });

    
</script>
<script>

</script>
