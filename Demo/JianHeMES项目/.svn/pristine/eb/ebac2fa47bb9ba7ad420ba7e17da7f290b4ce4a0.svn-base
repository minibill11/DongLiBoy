using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace JianHeMES.Controllers
{
    public class Burn_in_MosaicScreenController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();



        public ActionResult mosaicScreen_B()
        {
            return View();

        }


        public ActionResult mosaicScreen_F()
        {
            return View();

        }

        public ActionResult mosaicScreen_ShelfQuery()
        {
            return View();

        }

        public ActionResult mosaicScreen_ShelfQueryHistory()
        {
            return View();

        }



        // GET: Burn_in_MosaicScreen
        public ActionResult Index()
        {
            return View(db.Burn_in_MosaicScreen.ToList());

        }
        [HttpPost]
        public ActionResult Index(string burnInShelfNum)
        {
            JObject MosaicScreen = new JObject();
            JObject MosaicScreenFinshing = new JObject();
            JObject MosaicScreenBeagin = new JObject();
            var count = db.Burn_in_MosaicScreen.Count(c => c.BurnInShelfNum == burnInShelfNum);
            var OQCinfoFinshing = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == burnInShelfNum && c.OQCMosaicStartTime != null && c.OQCMosaicEndTime != null).ToList();
            var OQCinfoBeagin = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == burnInShelfNum && c.OQCMosaicStartTime != null && c.OQCMosaicEndTime == null).ToList();
            foreach (var item in OQCinfoFinshing)
            {
                MosaicScreenFinshing.Add("BarCodesNum", item.BarCodesNum);
            }
            foreach (var item in OQCinfoBeagin)
            {
                MosaicScreenBeagin.Add("BarCodesNum", item.BarCodesNum);
            }
            //已完成列表
            MosaicScreen.Add("Finashing", MosaicScreenFinshing);
            //已完成数量
            MosaicScreen.Add("FinashingCount", OQCinfoFinshing.Count());
            //未完成列表
            MosaicScreen.Add("Beagin", MosaicScreenBeagin);
            //未完成数量
            MosaicScreen.Add("BeaginCount", OQCinfoBeagin.Count());
            //总数量
            MosaicScreen.Add("Count", count);
            return Content(JsonConvert.SerializeObject(MosaicScreen));

        }
        // GET: Burn_in_MosaicScreen/Details/5 
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
            if (burn_in_MosaicScreen == null)
            {
                return HttpNotFound();
            }
            return View(burn_in_MosaicScreen);
        }

        // GET: Burn_in_MosaicScreen/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Burn_in_MosaicScreen/Create
        // 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
        // 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
        [HttpPost]
        public ActionResult Create(List<Burn_in_MosaicScreen> burn_in_MosaicScreenList)
        {
            foreach (var burn_in_MosaicScreen in burn_in_MosaicScreenList)
            {
                if (ModelState.IsValid)
                {
                    db.Burn_in_MosaicScreen.Add(burn_in_MosaicScreen);
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
            }
            return View();
        }

        // GET: Burn_in_MosaicScreen/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
            if (burn_in_MosaicScreen == null)
            {
                return HttpNotFound();
            }
            return View(burn_in_MosaicScreen);
        }

        // POST: Burn_in_MosaicScreen/Edit/5
        // 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
        // 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,OrderNum,BarCodesNum,BurnInShelfNum,OQCPrincipalNum,OQCMosaicStartTime,OQCMosaicEndTime,Remark")] Burn_in_MosaicScreen burn_in_MosaicScreen)
        {
            if (ModelState.IsValid)
            {
                db.Entry(burn_in_MosaicScreen).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(burn_in_MosaicScreen);
        }

        // GET: Burn_in_MosaicScreen/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
            if (burn_in_MosaicScreen == null)
            {
                return HttpNotFound();
            }
            return View(burn_in_MosaicScreen);
        }

        // POST: Burn_in_MosaicScreen/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
            db.Burn_in_MosaicScreen.Remove(burn_in_MosaicScreen);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult CheckFQC(List<string>barcodeList)
        {
            string errorList = "";
            foreach (var barcode in barcodeList)
            {
                var count = db.FinalQC.Where(c => c.BarCodesNum == barcode && c.FQCCheckFinish == true).Count();
                if (count == 0)
                {
                    errorList = errorList + ",";
                }
            }
            if (string.IsNullOrEmpty(errorList))
            {
                return Content("true");
            }
            else
               return Content(errorList+"FQC检查未完成");
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
