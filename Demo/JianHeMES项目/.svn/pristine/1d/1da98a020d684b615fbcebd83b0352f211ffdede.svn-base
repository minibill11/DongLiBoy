
<script type="text/template" id="KPI_Plan_Input_Component">
    <div class="KPI_Plan_Input">
        <el-row>
            <el-input v-model="paste" placeholder="表格粘贴处"></el-input>
        </el-row>
        <el-row>
            <el-table :data="tableList"
                      @*row-class-name="zero-padding"*@
                      max-height="600"
                      size="medium"
                      stripe
                      border>
                <el-table-column type="index" label="序号"></el-table-column>
                <el-table-column label="订单"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="部门"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="班组"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="工段"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="工序"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="品质/效率"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="检验部门"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="检验班组"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="抽检/全检"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="计划数量"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="计划完成时间"><template slot-scope="scope"><el-input v-model.trim="scope.row.OrderNum"></el-input></template></el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <el-button @@click="deleteClick(scope.row,scope.$index)" class="cbtn red" type="text">清除</el-button>
                    </template>
                </el-table-column>
            </el-table>
        </el-row>
        <el-row>
            <el-button type="primary" @@click="onQuerySubmit">录入</el-button>
            <el-button @@click="onQuerySubmit">取消</el-button>
            <el-button @@click="addrow" class="addbtn" type="info" plain>增加一行</el-button>
        </el-row>
    </div>
</script>
<script>
    Vue.component('kpi-plan-input-component', {
        template: document.getElementById("KPI_Plan_Input_Component"),
        data: function () {
            return {
                paste: '',
                Table: [{ aa: '123' }, { aa: '123' }, { aa: '123' }, { aa: '123' }, { aa: '123' }],
                initialData: {},
                tableList: [],
            }
        },
        mounted: function () {
        },
        methods: {
            onQuerySubmit() {

            },
            DisplayPlanSectionParameter() {
                this.mainLoading = true;
                axios.post("/Plans/DisplayPlanSectionParameter").then(res => {
                    res.data.map(o => { o.edit = false });
                    this.tableList = res.data;
                    this.mainLoading = false;
                }).catch(err => {
                    console.warn(err);
                    this.mainLoading = false;
                });
            },
            //检查编辑状态
            checkEditStatus() {
                for (let i of this.tableList) {
                    if (i.edit) {
                        return true;
                    };
                };
                return false;
            },
            //启动编辑
            editClick(row) {
                if (this.checkEditStatus()) {
                    this.$message.warning('存在正在编辑的行');
                    return
                };
                this.initialData = {};
                this.initialData = { ...row };
                row.edit = true;
            },
            //取消编辑
            cancelClick(row) {
                if (row.id === 0) {
                    this.tableList.pop();
                } else {
                    let item = row, ini = this.initialData;
                    for (let i in ini) {
                        item[i] = ini[i];
                    };
                    this.initialData = {};
                };
            },
            //保存编辑
            saveClick(row) {
                if (!row.Section || !row.Process) {
                    this.$message.warning('工段工序不能为空');
                    return;
                };
                if (row.id === 0) {
                    this.addPost(row);
                } else {
                    this.editPost(row);
                };
            },
            //删除
            deleteClick(row, index) {
                this.$confirm(`工段‘${row.Section}’，工序‘${row.Process}’`, '确认删除', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'error',
                    center: true,
                }).then(() => {
                    axios.post('/Plans/DeletePlanSectionParameter', {
                        id: row.id,
                    }).then(res => {
                        if (res.data) {
                            this.$message.success('删除成功');
                            this.tableList.splice(index, 1);
                        } else {
                            this.$message.error(res.data);
                        };
                    }).catch(err => {
                        this.$message.error('保存出错');
                        console.warn("post失败")
                    });
                }).catch(() => {
                });
            },
            //增加行
            addrow() {
                if (this.checkEditStatus()) {
                    this.$message.warning('请先保存编辑数据');
                    return
                };
                let newrow = {
                    id: 0,
                    Section: '',
                    Process: '',
                    Table: '',
                    edit: false
                };
                this.initialData = {};
                this.initialData = { ...newrow };
                newrow.edit = true;
                this.tableList.push(newrow);
            },
            //新增post
            addPost(row) {
                axios.post('/Plans/AddPlanSectionParameter', {
                    Process: row.Process,
                    Section: row.Section,
                    Table: row.Table,
                }).then(res => {
                    if (res.data.id != null) {
                        this.$message.success(res.data.mes);
                        row.id = res.data.id;
                        row.Process = res.data.Process;
                        row.Section = res.data.Section;
                        row.Table = res.data.Table;
                        row.edit = false;
                        this.initialData = {};
                    } else {
                        this.$message.error(res.data.mes);
                    };
                }).catch(err => {
                    this.$message.error('保存出错');
                    console.warn("post失败")
                });
            },
            //编辑post
            editPost(row) {
                axios.post('/Plans/UpdatePlanSectionParameter', {
                    id: row.id,
                    Process: row.Process,
                    Section: row.Section,
                    Table: row.Table,
                }).then(res => {
                    if (res.data) {
                        this.$message.success('保存成功');
                        row.edit = false;
                        this.initialData = {};
                    } else {
                        this.$message.error(res.data);
                    };
                }).catch(err => {
                    this.$message.error('保存出错');
                    console.warn("post失败")
                });
            },
        },
        watch: {
            pasteExcel: function (val) {
                if (val == "") {
                    return false;
                };
                app.okCreate = false;
                var pasteQuantity = val.split("\n");
                pasteQuantity.pop();
                pasteQuantity.forEach(function (value, index) {
                    var cutPasteQuantity = value.split("\t")
                    pasteQuantity[index] = cutPasteQuantity;
                    //console.log(cutPasteQuantity);
                });
                //console.log(pasteQuantity);
                var tableLength = $(".orderNum").length;
                var pasteLength = pasteQuantity.length;
                //console.log(pasteQuantity)
                //console.log(tableLength);
                //console.log(pasteLength);
                var lineNum = pasteQuantity[0][0].replace(/[^\d]/g, '');;
                if (tableLength < pasteQuantity.length) {
                    for (var i = 0; i < (pasteLength - tableLength); i++) {
                        addtr();
                    };
                    $(".orderNum").each(function (index, val) {
                        if (index < pasteLength) {
                            var isPlan = pasteQuantity[index][2];
                            if (isPlan == "无计划") {
                                deletetr(val);
                                lineNum++;
                            } else {
                                var pasteLine = pasteQuantity[index][0].replace(/[^\d]/g, '');
                                if (pasteLine == lineNum || pasteLine == "") {
                                    val.children[0].firstChild.value = lineNum;
                                } else {
                                    val.children[0].firstChild.value = pasteLine;
                                    lineNum++;
                                }
                                val.children[1].firstChild.value = isPlan;
                                val.children[2].firstChild.value = pasteQuantity[index][6].toUpperCase();
                                val.children[3].firstChild.value = (pasteQuantity[index][9] == "无标产" ? "" : pasteQuantity[index][9].split("/H")[0]);
                                val.children[4].firstChild.value = pasteQuantity[index][8];
                                val.children[6].firstChild.value = pasteQuantity[index][10];
                            };
                        };
                    });
                } else {
                    emptytable();
                    $(".orderNum").each(function (index, val) {
                        if (index < pasteLength) {
                            var isPlan = pasteQuantity[index][2];
                            if (isPlan == "无计划") {
                                deletetr(val);
                                lineNum++;
                            } else {
                                var pasteLine = pasteQuantity[index][0].replace(/[^\d]/g, '');
                                if (pasteLine == lineNum || pasteLine == "") {
                                    val.children[0].firstChild.value = lineNum;
                                } else {
                                    val.children[0].firstChild.value = pasteLine;
                                    lineNum++;
                                }
                                val.children[1].firstChild.value = isPlan;
                                val.children[2].firstChild.value = pasteQuantity[index][6].toUpperCase();
                                val.children[3].firstChild.value = (pasteQuantity[index][9] == "无标产" ? "" : pasteQuantity[index][9].split("/H")[0]);
                                val.children[4].firstChild.value = pasteQuantity[index][8];
                                val.children[6].firstChild.value = pasteQuantity[index][10];
                            };
                        };
                    });
                };
                app.pasteExcel = "";
            },
        },
    });
</script>

