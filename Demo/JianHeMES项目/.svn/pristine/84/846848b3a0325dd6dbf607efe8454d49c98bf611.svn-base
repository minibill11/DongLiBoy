@model IEnumerable<JianHeMES.Models.Personnel_Framework>

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Scripts/jquery.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/font-awesome.min.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/jquery.orgchart.min.css" rel="stylesheet" />
<script src="~/Scripts/Scripts/jquery.orgchart.min.js"></script>
<script src="~/Content/styleFile/solder/solderJavascript.js"></script>
<style>
    .titleright{
        float:right;margin-right:18px;
        display:inline-block;
        width:25px;
        border-radius:50%;
        font-size:18px;
        transition:all linear .2s;
    }
    .titleright:hover{
        
        background-color:green;
        color:white;
        border:1px solid black;
        cursor:pointer
    }
    .topEdge,.bottomEdge {
        width:15px !important;
        margin-left:44%;
    }
    .selectContainer{
        margin-top:15px;
    }
    #chart-container{
        overflow: auto;
        text-align: center;
        /* css3动态计算属性函数：calc()  以下样式表示：container的width总是总宽度减去24像素 */
        width: calc(140% - 24px);
        position: relative;
        left:-20% !important;
        display: inline-block;
        top: 10px;
        left: 10px;
        height: 100%;
    }
    .orgchart {
        background-color: #fff !important;
        background-image: none;
      }
    .checktime{
        text-align:center;
    }
    .bottom-container{
        border:1px solid black;
        margin-top:15px;
        display:flex;
        justify-content:space-between;
    }
    .officexx{
        width:100%;
        text-align:center;
    }
   .selectLevel{
        color:black !important;
   }
      /* 去掉网格背景 */

      .orgchart {
        background-color: #fff !important;
        background-image: none;
      }

      /* 跟节点稳如狗--给个定位 */

      .orgchart td.left,
      .orgchart td.right,
      .orgchart td.top {
        border-color: #aaa;
      }

      .orgchart td>.down {
        background-color: #aaa;
      }

      .orgchart .middle-level .title {
        background-color: #006699;
      }

      .orgchart .middle-level .content {
        border-color: #006699;
      }

      .orgchart .product-dept .title {
        background-color: #009933;
      }

      .orgchart .product-dept .content {
        border-color: #009933;
      }

      .orgchart .rd-dept .title {
        background-color: #993366;
      }

      .orgchart .rd-dept .content {
        border-color: #993366;
      }

      .orgchart .pipeline1 .title {
        background-color: #996633;
      }

      .orgchart .pipeline1 .content {
        border-color: #996633;
      }

      .orgchart .frontend1 .title {
        background-color: #cc0066;
      }

      .orgchart .frontend1 .content {
        border-color: #cc0066;
      }

      /* 自定义模板样式*---title跟content部门还是用的插件原本的样式，页可以修改 */

      .office {
        width: 55%;
        border: none;
        margin: 0;
        opacity: .5;
        transition: all linear .2s;
      }

      .officex{
          width: 48%;
          margin: 0;
      }
      .officess {
        display: flex;
        justify-content: space-between;
      }

      .office:hover {
        text-align: center;
        border: 1px solid #333333;
        border-radius: 5px;
        color: red;
        opacity: 1;
      }
      

      .node {
        width: 170px !important;
      }

      .newguys{
          background-color:#ff99cc;
          border-radius:5px;
      }
      .resign{
          background-color:#808080;
          border-radius:5px;
      }
      .askforleave{
          background-color:#ffff00;
          border-radius:5px;
      }
      .absent{
          background-color:red;
          border-radius:5px;
      }
      .jobber{
          background-color:#a4d08e;
          border-radius:5px;
      }
      .businesstrip{
          background-color:#00b0f0;
          border-radius:5px;
      }
      .onposition{
          background-color:#46ea06;
          border-radius:5px;
      }
       .tttt{
        width:48%;
        margin:0;
    }

      #edit-panel {
        position: relative;
        left: 10px;
        border-radius: 4px;
        margin-top: 10px;
        padding: 10px;
        color: #fff;
        background-color: #aaa;
      }

      #edit-panel .btn-inputs {
        font-size: 24px;
      }

      #edit-panel.edit-state>:not(#chart-state-panel) {
        display: none;
      }

      #edit-panel label {
        font-weight: bold;
      }

      #edit-panel.edit-parent-node .selected-node-group {
        display: none;
      }

      #chart-state-panel,
      #selected-node,
      #btn-remove-input {
        margin-right: 20px;
      }

      #edit-panel button {
        color: #333;
        background-color: #fff;
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      #edit-panel.edit-parent-node button:not(#btn-add-nodes) {
        display: none;
      }

      #edit-panel button:hover,
      .edit-panel button:focus,
      .edit-panel button:active {
        border-color: #eea236;
        box-shadow: 0 0 10px #eea236;
      }

      #new-nodelist {
        display: inline-block;
        list-style: none;
        margin-top: -2px;
        padding: 0;
        vertical-align: text-top;
      }

      #new-nodelist>* {
        padding-bottom: 4px;
      }

      .btn-inputs {
        vertical-align: sub;
      }

      #edit-panel.edit-parent-node .btn-inputs {
        display: none;
      }

      .btn-inputs:hover {
        text-shadow: 0 0 4px #fff;
      }

      .radio-panel input[type='radio'] {
        display: inline-block;
        height: 24px;
        width: 24px;
        vertical-align: top;
      }

      #edit-panel.view-state .radio-panel input[type='radio']+label {
        vertical-align: -webkit-baseline-middle;
      }

      #btn-add-nodes {
        margin-left: 20px;
      }
      .dismiss{
          display:none;
      }
      .container{
          width:1310px;
      }
</style>

<div id="app" v-loading="loaddingFlag">
    <div class="selectContainer">
        <el-select size="small" v-model="selectVersion" placeholder="请选择架构版本">
            <el-option v-for="item in versionList"
                       v-bind:key="item.value"
                       v-bind:label="item.value"
                       v-bind:value="item.value">
            </el-option>
        </el-select>
        <el-button v-show="changebtn_frameWork" size="small" v-on:click="changeVersion" type="primary">修改版本</el-button>
        <el-button v-show="saveChangebtn" v-on:click="saveChangeVersion" size="small" type="primary">保存修改</el-button>
        <el-button v-show="cancelChangebtn" v-on:click="cancelChangeVersion" size="small" type="danger">取消修改</el-button>
    </div>
    <div id="chart-container"></div>
    @{
        var UserName = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).UserName;
        var UserRole = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).Role;
        var UserId = Session["User"] == null ? 0 : ((JianHeMES.Models.Users)Session["User"]).UserNum;
        var ischeck = ViewBag.editinfo;
    }

    @* 操作节点弹框 *@
    <el-dialog title="节点操作"
               center
               v-bind:visible.sync="flags39"
               width="30%"
               v-bind:before-close="handleClose">
        <div style="text-align:center;">
            <el-button type="primary" v-on:click="changed = true;added = false;removed = false;meger = false" size="small">修改</el-button>
            <el-button type="primary" v-on:click="changed = false;added = true;removed = false;meger = false" size="small">新增</el-button>
            <el-button type="primary" v-on:click="changed = false;added = false;removed = false;meger = true" size="small">合并</el-button>
            <el-button type="danger" v-on:click="changed = false;added = false;removed = true;meger = false" size="small">删除</el-button>
        </div>
        <div style="margin-top:10px;">
            @* 修改 *@
            <div v-show="changed">
                <el-form v-bind:model="changeDataForm" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="部门" prop="title">
                        <el-input v-model="changeDataForm.title" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="职位" prop="position">
                        <el-input v-model="changeDataForm.position" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="姓名" prop="position">
                        <el-input v-model="changeDataForm.name" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" v-on:click="comfirmChange">确认修改</el-button>
                        <el-button v-on:click="cancelChange">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
            @* 添加 *@
            <div v-show="added">
                <el-form v-bind:model="addNewDataForm" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="节点标题" prop="name">
                        <el-input v-model="addNewDataForm.name" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="节点内容" prop="title">
                        <el-input v-model="addNewDataForm.title" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="部门" prop="deparment">
                        <el-input v-model="addNewDataForm.deparment" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="职位" prop="position">
                        <el-input v-model="addNewDataForm.position" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="节点等级" prop="childBelog">
                        <el-select v-model="addNewDataForm.childBelog" placeholder="请选择">
                            <el-option v-for="item in nodeGradeList"
                                       v-bind:key="item.value"
                                       v-bind:label="item.label"
                                       v-bind:value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" v-on:click="comfirmAdd">确认新增</el-button>
                        <el-button v-on:click="cancelChange">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
            @* 合并 *@
            <div v-show="meger">
                <el-form v-bind:model="megerDataForm" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="合并标题" prop="sameName">
                        <el-input v-model="megerDataForm.sameName" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="合并后标题" prop="title">
                        <el-input v-model="megerDataForm.title" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="合并后负责人" prop="name">
                        <el-input v-model="megerDataForm.name" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="合并层级" prop="belogin">
                        <el-select v-model="megerDataForm.belogin" placeholder="请选择">
                            <el-option v-for="item in nodeGradeList"
                                       v-bind:key="item.value"
                                       v-bind:label="item.label"
                                       v-bind:value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" v-on:click="comfirmMeger">确认合并</el-button>
                        <el-button v-on:click="cancelChange">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
            @* 删除 *@
            <div v-show="removed">
                <el-form v-bind:model="addNewDataForm" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="部门" prop="title">
                        <span>{{changeDataForm.title}}</span>
                    </el-form-item>
                    <el-form-item label="职位" prop="position">
                        <span>{{changeDataForm.position}}</span>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" v-on:click="comfirmRemove">确认删除</el-button>
                        <el-button v-on:click="cancelChange">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
        </div>
        
    </el-dialog>

    @* 点击保存版本修改弹框 *@
    <el-dialog title="确认保存修改版本"
               fullscreen
               v-bind:visible.sync="saveVersionCHnage"
               width="30%">
        <div style="margin-top:10px;">
            <div>
                <el-form v-bind:model="newVersionNameForm" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="修改版本名称" prop="title">
                        <el-input v-model="newVersionNameForm.versionname" placeholder="请输入修改版本名称" auto-complete="off"></el-input>
                        <span>*不输入则系统自动生成新版本名称*</span>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="success" v-on:click="comfirmChangeVersionName">确认修改</el-button>
                    </el-form-item>
                </el-form>
                
            </div>
        </div>
    </el-dialog>

    @* 修改节点用户信息 *@
    <el-dialog title="修改职员信息"
               center
               v-bind:visible.sync="changeStaffIngos"
               width="30%">
        <div style="margin-top:10px;">
            <div>
                <el-form v-bind:model="userInfos" label-width="100px" class="demo-ruleForm">
                    <el-form-item label="姓名" prop="name">
                        {{userInfos.name}}
                        @*<el-input v-model="userInfos.name" placeholder="请输入修改版本名称" auto-complete="off"></el-input>*@
                    </el-form-item>
                    <el-form-item label="工号" prop="userId">
                        {{userInfos.userId}}
                        @*<el-input v-model="userInfos.userId" placeholder="请输入修改版本名称" auto-complete="off"></el-input>*@
                    </el-form-item>
                    <el-form-item label="部门" prop="department">
                        <el-input v-model="userInfos.department" placeholder="请输入修改版本名称" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="班组" prop="group">
                        <el-input v-model="userInfos.group" placeholder="请输入修改版本名称" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item label="职位" prop="position">
                        <el-input v-model="userInfos.position" placeholder="请输入修改版本名称" auto-complete="off"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="danger" v-on:click="changeStaffIngos=false;userInfos={}">取消</el-button>
                        <el-button type="success" v-on:click="comfirmChangeNodeinfo">确认修改</el-button>
                    </el-form-item>
                </el-form>
            </div>
        </div>
    </el-dialog>

</div>

<script>
    const app = new Vue({
        el: "#app",
        data: {
            selectVersion: null,
            loaddingFlag:false,
            versionList: [],
            selectNodeId:null,
            orgchartData: {},
            isBelogin: null,
            UserId: '@UserId',
            lastSelectVal: null,
            nodeOperaDialog: false,
            changed: true,
            added: false,
            removed: false,
            meger: false,
            megerDataForm:{},
            changeDataForm: {},
            nodeGradeList: [
                { value: 1, label: "中心" },
                { value: 2, label: "部门" },
                { value: 3, label: "班组" },
                { value: 4, label: "职位" },
                { value: 5, label: "人员" }
            ],
            addNewDataForm: {
                name:null
            },
            changebtn_frameWork: false,
            saveChangebtn: false,
            cancelChangebtn: false,
            saveVersionCHnage: false,
            newVersionNameForm: {},
            operaNodeInfos: true,
            userInfos: {},
            changeStaffIngos:false,
            // 3-9
            flags39: false,
            flagss39:false,
        },
        mounted() {
            // 页面加载时获取节点信息以及版本列表信息
           
            this.getVersisonList();
            // 组织架构图
            if (checkRoles(roles, '修改组织架构节点')) {
                this.changebtn_frameWork = true;
            } else {
                this.changebtn_frameWork = false;
            };
            
        },
        watch: {
            // 监听版本变化并获取数据
            selectVersion() {
                if (this.selectVersion != -null) {
                    this.getDefultInfos(this.selectVersion);
                } else {
                    this.$notify({
                        message: "请选择有效版本",
                        type: "warning"
                    });
                }
            }
        },
        methods: {
            // 获取架构版本列表
            getVersisonList() {
                axios.post("/Personnel_Framework/VersionList").then(res=> {
                    console.log(res.data)
                    if (res.data.length > 0) {
                        this.versionList = res.data
                        this.selectVersion = this.versionList[0].value
                        //this.getDefultInfos(this.versionList[0].value);
                    } else {
                        this.$notify({
                            message: "暂无历史版本",
                            type: "info"
                        })
                    }
                })
            },
            // 获取初始数据
            getDefultInfos(version, department, title) {
                this.loaddingFlag = true;
                axios.post("/Personnel_Framework/Framework", { version: version, department: department, title: title }).then(res=> {
                    console.log(res.data);
                    if (!department && !title) {   // 只有厂长时直接将数据添加到厂长chilrend
                        res.data[0].title = res.data[0].position + ':' + res.data[0].title;
                        this.orgchartData = res.data[0];
                        myorgchart(this.orgchartData);    // 实例化树形图
                        let targrtbtn = $(".titleright")[0]
                        $(targrtbtn).click();
                        this.loaddingFlag = false;
                    } else {                       // 将数据添加到制定节点的chilrend
                        if(res.data.length>0){
                            this.reverseData(res.data);
                        } else {
                            this.$message({
                                message: "已经是最底节点",
                                type:"success"
                            })
                        }
                        
                        this.loaddingFlag = false;
                    }
                });
            },
            // 统一处理后台返回数据的方法
            reverseData(data) {
                if (this.orgchartData.children) {
                    this.orgchartData.children.forEach(item=> {
                        if (item.id == this.selectNodeId) {
                            item.children = data
                        } else {
                            if (item.children) {
                                item.children.forEach(item2=> {
                                    if (item2.id == this.selectNodeId) {
                                        item2.children = data
                                    } else {
                                        if (item2.children) {
                                            item2.children.forEach(item3=> {
                                                if (item3.id == this.selectNodeId) {
                                                    item3.children = data
                                                } else {
                                                    if (item3.children) {
                                                        item3.children.forEach(item4=> {
                                                            if (item4.id == this.selectNodeId) {
                                                                item4.children = data
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                    }
                                });
                            }
                        }
                    });
                } else {
                    this.orgchartData.children = data;
                }
                myorgchart(this.orgchartData);
            },
            // 弹框关闭提示
            handleClose(done) {
                this.$confirm('确认关闭？')
                  .then(_ => {
                      done();
                  })
                  .catch(_ => { });
            },
            // 确认修改节点
            comfirmChange() {
                if (this.changeDataForm.title && this.changeDataForm.position) {
                    //console.log("test")
                    //console.log(this.changeDataForm)
                    axios.post("/Personnel_Framework/UpdateNoode", this.changeDataForm).then(res=> {
                        //console.log(res.data)
                        if (res.data.pass == true) {
                            this.$message({
                                message: res.data.mes,
                                type: "success"
                            });
                            this.flags39 = false;
                            afteropera(this.changeDataForm.id, this.orgchartData,'change',res.data.id)
                            this.changeDataForm = {};

                        } else {
                            this.$message({
                                message: res.data.mes,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "连接失败",
                            type: "warning"
                        })
                    })
                } else {
                    this.$message({
                        message: "请补全信息",
                        type:"warning"
                    })
                }                
            },
            // 确认新增节点
            comfirmAdd(){
                if (this.addNewDataForm.title && this.addNewDataForm.deparment && this.addNewDataForm.position && this.addNewDataForm.childBelog) {
                    axios.post("/Personnel_Framework/AddNoode", this.addNewDataForm).then(res=> {
                        console.log(res.data)
                        if (res.data.pass == true) {
                            this.$message({
                                message: res.data.mes,
                                type: "success"
                            });
                            afteropera(this.addNewDataForm.id, this.orgchartData, 'add',res.data.id)
                            this.flags39 = false;
                            this.getVersisonList()
                            this.addNewDataForm = {};
                        } else {
                            this.$message({
                                message: res.data.mes,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "连接失败",
                            type: "warning"
                        })
                    })
                } else {
                    this.$message({
                        message: "请补全信息",
                        type: "warning"
                    })
                }
            },
            // 确认合并节点
            comfirmMeger(){
                if (this.megerDataForm.sameName != null && this.megerDataForm.belogin != null && this.megerDataForm.title != null && this.megerDataForm.name != null) {
                    axios.post("/Personnel_Framework/Merge", this.megerDataForm).then(res=> {
                        if (res.data == '合并成功') {
                            this.$notify({
                                message: res.data,
                                type: "success"
                            });
                            afteropera(this.megerDataForm.id, this.orgchartData, 'meger', '123');
                            this.megerDataForm = {};
                            this.flags39 = false;
                        } else {
                            this.$notify({
                                message: res.data,
                                type: "warning"
                            });
                        }
                    }).catch(err=> {
                        this.$notify({
                            message: "合并时网络连接失败!",
                            type: "warning"
                        });
                    })
                } else {
                    this.$notify({
                        message:"请补全合并信息!",
                        type:"info"
                    })
                }
            },
            // 确认删除节点
            comfirmRemove(){
                axios.post("/Personnel_Framework/DelateNoode", { id: this.changeDataForm.id}).then(res=> {
                    if (res.data == "删除成功") {
                        this.$message({
                            message: "删除成功",
                            type: "success"
                        });
                        this.flags39 = false;
                        afteropera(this.addNewDataForm.id, this.orgchartData, 'remove','00')
                        this.getVersisonList()
                        this.changeDataForm = {};
                    } else {
                        this.$message({
                            message: res.data,
                            type: "warning"
                        })
                    }
                })
            },
            // 取消节点操作
            cancelChange() {
                this.nodeOperaDialog = false;
                this.flags39 = false
            },
            // 点击修改版本
            changeVersion() {
                gg();
                this.flagss39 = true;
                this.changebtn_frameWork = false;
                this.saveChangebtn = true;
                this.cancelChangebtn = true;
                this.operaNodeInfos = false;   // 操作节点或者操作架构
            },
            // 点击保存版本修改
            saveChangeVersion() {
                this.changebtn_frameWork = true;
                this.saveChangebtn = false;
                this.cancelChangebtn = false;
                this.saveVersionCHnage = true;
            },
            // 点击取消保存版本修改
            cancelChangeVersion() {
                gg2();
                this.changebtn_frameWork = true;
                this.saveChangebtn = false;
                this.cancelChangebtn = false;
                this.operaNodeInfos = true;
                this.flagss39 = false;
            },
            // 确认版本名称修改
            comfirmChangeVersionName() {
                axios.post("/Personnel_Framework/AddVersion", this.newVersionNameForm).then(res=> {
                    //console.log(res.data)
                    if (res.data == 'True') {
                        this.$message({
                            message: "操作成功",
                            type: "success"
                        });
                        this.saveVersionCHnage = false;
                        this.operaNodeInfos = true;
                    } else {
                        this.$message({
                            message: "操作失败",
                            type: "warning"
                        })
                    }
                })
                
            },
            // 确认修改节点职员信息
            comfirmChangeNodeinfo() {
                axios.post("/Personnel_Framework/GetUersInfo", { name: this.userInfos.name, jobnum: this.userInfos.userId, deparment: this.userInfos.department, group: this.userInfos.group, position: this.userInfos.position }).then(res=> {
                    //console.log(res.data)
                    if (res.data == 'True') {
                        this.$message({
                            message: "操作成功",
                            type: "success"
                        });
                        this.changeStaffIngos = false;
                    } else {
                        this.$message({
                            message: "操作失败",
                            type: "warning"
                        })
                    }
                }).catch(err=> {
                    this.$message({
                        message: "连接失败",
                        type: "warning"
                    })
                })
            }
        }
    });

    // 自定义节点架构代码
    var nodeTemplate = function (data) {
        var arr = data;
        var result = '';
        let targetData = arr
        var colors = '';
        if (true) {
            let code = targetData.workStatue
            if (code == '在岗') {
                colors = 'onposition'
            } else if (code == '请假') {
                colors = 'askforleave'
            } else if (code == '新进') {
                colors = 'newguys'
            } else if (code == '出差') {
                colors = 'businesstrip'
            } else if (code == '旷工') {
                colors = 'absent'
            }
            else if (code == '辞职') {
                colors = 'resign'
            }
            else if (code == '临时工') {
                colors = 'jobber'
            }
            result = `<div class="officess"><div onclick="listClick(this,'${targetData.userId}','${targetData.jobnum}',event,'${code}')"title="点击编辑" class="office">${data.title}</div><div class='status ${colors} officex' onclick="justforstop(event)">${code == undefined ? '' : code}</div></div>`

        } else {
            if (data.name == "") {

            }else {
                result = `<div class="officess"><div onclick="listClick(this,'${targetData.userId}','${targetData.jobnum}',event) "title="点击编辑" class="office">${data.name}</div><div class='status onposition officex' onclick="justforstop(event)">在岗</div></div>`
            }
        }
        // 由于在判断节点是否可操作时并不能获取到节点的所有data --只能写一个隐藏的span来承载这个判断所需的值
        var depar = `<div class="title" onclick="nodeOperation('${data.id}','${data.name}','${data.position}','${data.department}','${data.isBelogin}','${data.title}')">${data.name}<span class='titleright'onclick="getChildrenData('${data.department}','${data.name}','${data.id}','${data.isBelogin}',event)">⬇</span></div><div class="content">${result}</div>`
        return `${depar}`
    };

    // 生成树形图的函数
    function myorgchart(source) {
        $('#chart-container').empty();
        $('#chart-container').orgchart({
            'data': source, //数据
            'nodeContent': 'title', //内容对应的字段
            'nodeTemplate': nodeTemplate,
        });
        
        //let tt = $(".titleright")[0]
        //$(tt).hide();   // 影藏第一个向下箭头
    }

    // 点击节点获取子节点数据
    function getChildrenData(depar, name, id, flag, event) {
        event.stopPropagation()  // 阻止点击事件冒泡
        app.isBelogin = flag
        app.selectNodeId = id
        app.getDefultInfos(app.selectVersion, depar, name)
    }

    // 点击人员名字触发
    function listClick(item, listitem, itemid, event,status) { //点击事件生效--点击每一个员工时可单独操作
        //console.log(status)
        if (status == 'null') {
            return false;
        } else {
            var roles = JSON.parse(localStorage.getItem("rigths"));
            var selectVal = $(item).next().text().trim();
            app.lastSelectVal = selectVal
            historyStatus();
            if (checkRoles(roles, '修改组织架构人员状态')) {
                var target = $(item).next();
                if (selectVal.length > 8) { } else {
                    $(item).next().html(`<select class="statusSelect" onchange="selectChange(this,'${selectVal}','${listitem}')"><option>${selectVal}</option><option>出差</otion><option>在岗</otion><option>请假</otion><option>临时工</otion><option>新进</otion><option>旷工</otion><option>辞职</otion></select>`);
                }
                event.stopPropagation()  // 阻止点击事件冒泡
            } else {
                alert("暂无权限修改")
                event.stopPropagation()  // 阻止点击事件冒泡
            }
        }
        

    };
    function justforstop(event) {
        event.stopPropagation()  // 阻止点击事件冒泡
    };

    // 修改人员在职状态
    function selectChange(item, slectVals, itemid) {
        var statuss = '';
        if (item.value == '在岗') { //根据特定状态给背景色
            statuss = 0
        } else if (item.value == '请假') {
            statuss = 1
        } else if (item.value == '新进') {
            statuss = 2
        } else if (item.value == '出差') {
            statuss = 3
        }
        else if (item.value == '旷工') {
            statuss = 4
        }
        else if (item.value == '辞职') {
            statuss = 5
        }
        else if (item.value == '临时工') {
            statuss = 6
        }
        //console.log(statuss)
        axios.post("/Personnel_Framework/UpateStatus", { userid: itemid, statue: item.value }).then(res=> {
            //console.log("进到axois:" + res.data)
            var color = null; //存储动态类名的变量
            if (item.value == '在岗') { //根据特定状态给背景色
                color = 'onposition'
            } else if (item.value == '请假') {
                color = 'askforleave'
            } else if (item.value == '新进') {
                color = 'newguys'
            } else if (item.value == '出差') {
                color = 'businesstrip'
            }
            else if (item.value == '旷工') {
                color = 'absent'
            }
            else if (item.value == '临时工') {
                color = 'jobber'
            } else if (item.value == '辞职') {
                color = 'resign'
            }
            $(item).parent().html(`<div class="${color}">${item.value}</div>`);
        })
    };


    // 回复状态
    function historyStatus() {
        if ($(".statusSelect")) {
            $(".statusSelect").parent().html(`<div>${app.lastSelectVal}</div>`);
        }
    }

    // 节点操作
    function nodeOperation(id, name, position, depar, isBelogin, title) {
        //console.log(isBelogin)
        if (app.flagss39) {
            getUserInfos(depar, position)
            app.changeDataForm.id = id
            app.changeDataForm.title = name
            app.changeDataForm.name = title
            app.changeDataForm.position = position
            app.changeDataForm.department = depar
            //console.log(app.changeDataForm)
            //console.log(app.userInfos)
            // 新增表单赋值
            app.addNewDataForm.id = id;
            app.addNewDataForm.fatherBelog = isBelogin;
            //app.addNewDataForm.name = name
            app.addNewDataForm.fatherBelog = isBelogin;

            app.megerDataForm.id = id;
            app.flags39 = true;
        }
        //if (app.operaNodeInfos) {
        //    if (checkRoles(roles, '花名册编辑按钮')) {
        //        getUserInfos(depar, position)
        //    } else {
        //        alert("暂无权限修改")
        //        event.stopPropagation()
        //    }
            
        //} else {
        //    // 修改表单赋值
            
        //    app.nodeOperaDialog = true;
        //}
        
    }
    // 根据部门和职位获取用户信息
    function getUserInfos(depar, position) {
        app.userInfos = {}
        //axios.post("/Personnel_Framework/DisplayUserInfo", { department: depar, position}).then(res=> {
        //    console.log(res.data)
        //    if (res.data.length > 0) {
        //        app.userInfos = res.data[0]
        //       // app.changeDataForm.name = app.userInfos.name;
        //        //app.addNewDataForm.name = app.userInfos.name;
        //        //app.changeStaffIngos = true;
        //    } else {
        //        app.$message({
        //            message: "暂无用户信息",
        //            type: "warning"
        //        })
        //    }
        //}).catch(err=> {
        //    app.$message({
        //        message: "获取用户信息失败",
        //        type: "warning"
        //    })
        //})
    }

    // 传说中的开关。。。开  操作节点前访问这个方法，只访问，不进行任何操作
    function gg() {
        axios.post("/Personnel_Framework/NewVersion").then(res=> {
        });
    }
    // 传说中的开关。。。关  操作节点后访问这个方法，只访问，不进行任何操作
    function gg2() {
        axios.post("/Personnel_Framework/DelteVersion").then(res=> {
        });
    }

    // 操作后改变结构视图
    function afteropera(id, data, flag, newid) {    //  数据操作只从第二级开始--- 无法修改跟新增一级节点
        //console.log(data)
        if (flag == 'change') {
            if (data.id == id) {
                data.id = newid;
                app.changeDataForm.id = newid;
                data.name = app.changeDataForm.title;
                data.title = app.changeDataForm.name;
            } else {
                data.children.forEach(item=> {
                    if (item.id == id) {
                        item.id = newid;
                        app.changeDataForm.id = newid;
                        item.name = app.changeDataForm.title;
                        item.title = app.changeDataForm.name;
                        return false;
                    } else {
                        if (item.children) {
                            item.children.forEach(item2=> {
                                if (item2.id == id) {
                                    item2.id = newid;
                                    app.changeDataForm.id = newid;
                                    item2.name = app.changeDataForm.title;
                                    item2.title = app.changeDataForm.name;
                                    return false;
                                } else {
                                    if (item2.children) {
                                        item2.children.forEach(item3=> {
                                            if (item3.id == id) {
                                                item3.id = newid;
                                                app.changeDataForm.id = newid;
                                                item3.name = app.changeDataForm.title;
                                                item3.title = app.changeDataForm.name;
                                                return false;
                                            } else {
                                                if (item3.children) {
                                                    item3.children.forEach(item4=> {
                                                        if (item4.id == id) {
                                                            item4.id = newid;
                                                            app.changeDataForm.id = newid;
                                                            item4.name = app.changeDataForm.title;
                                                            item4.title = app.changeDataForm.name;
                                                            return false;
                                                        }
                                                    })
                                                }
                                            }
                                        })
                                    }
                                }
                            })
                        }
                    }
                })
            }
            
        } else if (flag == "add") {
            //app.addNewDataForm.name = app.addNewDataForm.deparment;
            //app.addNewDataForm.title = "";
                //console.log(data)
            if (data.id == id) {
                app.addNewDataForm.id = newid;
                data.children.push(app.addNewDataForm)
                } else {
                    data.children.forEach(item=> {
                        if (item.id == id) {
                            app.addNewDataForm.id = newid;
                            item.children.push(app.addNewDataForm)
                            return false;
                        } else {
                            if (item.children) {
                                item.children.forEach(item2=> {
                                    if (item2.id == id) {
                                        app.addNewDataForm.id = newid;
                                        item2.children.push(app.addNewDataForm)
                                        return false;
                                    } else {
                                        if (item2.children) {
                                            item2.children.forEach(item3=> {
                                                if (item3.id == id) {
                                                    app.addNewDataForm.id = newid;
                                                    item3.children.push(app.addNewDataForm)
                                                    return false;
                                                } else {
                                                    if (item3.children) {
                                                        item3.children.forEach(item4=> {
                                                            if (item4.id == id) {
                                                                app.addNewDataForm.id = newid;
                                                                item4.children.push(app.addNewDataForm)
                                                                return false;
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                    }
                                })
                            }
                        }
                    })
                }
            
        } else if (flag == "remove") {
            data.children.forEach((item,index) => {
                if (item.id == id) {
                    data.children.splice(index, 1) // 将删除对应id
                    return false;
                } else {
                    if (item.children) {
                        item.children.forEach((item2,index2) => {
                            if (item2.id == id) {
                                item.children.splice(index2, 1) // 将删除对应id
                                return false;
                            } else {
                                if (item2.children) {
                                    item2.children.forEach((item3,index3)=> {
                                        if (item3.id == id) {
                                            item2.children.splice(index3, 1) // 将删除对应id
                                            return false;
                                        } else {
                                            if (item3.children) {
                                                item3.children.forEach((item4,index4) => {
                                                    if (item4.id == id) {
                                                        item3.children.splice(index4, 1) // 将删除对应id
                                                        return false;
                                                    }
                                                })
                                            }
                                        }
                                    })
                                }
                            }
                        })
                    }
                }
            })
        } else if (flag == "meger") {
            if (data.id == id) {
                data.name = app.megerDataForm.title;
                data.title = app.megerDataForm.name;
                // 修改当前节点数据后还需要移除被合并的节点，目前只能根据‘合并标题’来匹配找到被合并的节点位置并将其移除；
                if (data.children) {
                    data.children.forEach((item,index) => {
                        if (item.name == app.megerDataForm.sameName) {
                            data.children.splice(index, 1);
                            return false;
                        } else {
                            if (item.children) {
                                item.children.forEach((item2, index2) => {
                                    if (item2.id == id) {
                                        item.children.splice(index2, 1) // 将删除对应id
                                        return false;
                                    } else {
                                        if (item2.children) {
                                            item2.children.forEach((item3, index3) => {
                                                if (item3.id == id) {
                                                    item2.children.splice(index3, 1) // 将删除对应id
                                                    return false;
                                                } else {
                                                    if (item3.children) {
                                                        item3.children.forEach((item4, index4) => {
                                                            if (item4.id == id) {
                                                                item3.children.splice(index4, 1) // 将删除对应id
                                                                return false;
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                    }
                                })
                            }
                        }
                    })
                }
            } else {
                // 第二层遍历找出当前节点
                if (data.children) {
                    data.children.forEach((item, index) => {
                        if (item.id == id) {
                            item.name = app.megerDataForm.title;
                            item.title = app.megerDataForm.name;
                            item.department = app.megerDataForm.title;
                            // 完成改变之后就要移除被合并的节点
                            if (data.children) {
                                data.children.forEach((item, index) => {
                                    if (item.name == app.megerDataForm.sameName) {
                                        data.children.splice(index, 1);
                                        return false;
                                    } else {
                                        if (item.children) {
                                            item.children.forEach((item2, index2) => {
                                                if (item2.name == app.megerDataForm.sameName) {
                                                    item.children.splice(index2, 1) // 将删除对应id
                                                    return false;
                                                } else {
                                                    if (item2.children) {
                                                        item2.children.forEach((item3, index3) => {
                                                            if (item3.name == app.megerDataForm.sameName) {
                                                                item2.children.splice(index3, 1) // 将删除对应id
                                                                return false;
                                                            } else {
                                                                if (item3.children) {
                                                                    item3.children.forEach((item4, index4) => {
                                                                        if (item4.name == app.megerDataForm.sameName) {
                                                                            item3.children.splice(index4, 1) // 将删除对应id
                                                                            return false;
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                    }
                                })
                            }
                            return false;
                        } else {
                            if (item.children) {
                                item.children.forEach((item2, index2) => {
                                    if (item2.id == id) {
                                        item2.name = app.megerDataForm.title;
                                        item2.title = app.megerDataForm.name;
                                        item.department = app.megerDataForm.title;
                                        // 完成改变之后就要移除被合并的节点
                                        if (data.children) {
                                            data.children.forEach((item, index) => {
                                                if (item.name == app.megerDataForm.sameName) {
                                                    data.children.splice(index, 1);
                                                    return false;
                                                } else {
                                                    if (item.children) {
                                                        item.children.forEach((item2, index2) => {
                                                            if (item2.name == app.megerDataForm.sameName) {
                                                                item.children.splice(index2, 1) // 将删除对应id
                                                                return false;
                                                            } else {
                                                                if (item2.children) {
                                                                    item2.children.forEach((item3, index3) => {
                                                                        if (item3.name == app.megerDataForm.sameName) {
                                                                            item2.children.splice(index3, 1) // 将删除对应id
                                                                            return false;
                                                                        } else {
                                                                            if (item3.children) {
                                                                                item3.children.forEach((item4, index4) => {
                                                                                    if (item4.name == app.megerDataForm.sameName) {
                                                                                        item3.children.splice(index4, 1) // 将删除对应id
                                                                                        return false;
                                                                                    }
                                                                                })
                                                                            }
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                        return false;
                                    } else {
                                        if (item2.children) {
                                            item2.children.forEach((item3, index3) => {
                                                if (item3.id == id) {
                                                    item3.name = app.megerDataForm.title;
                                                    item3.title = app.megerDataForm.name;
                                                    item.department = app.megerDataForm.title;
                                                    // 完成改变之后就要移除被合并的节点
                                                    if (data.children) {
                                                        data.children.forEach((item, index) => {
                                                            if (item.name == app.megerDataForm.sameName) {
                                                                data.children.splice(index, 1);
                                                                return false;
                                                            } else {
                                                                if (item.children) {
                                                                    item.children.forEach((item2, index2) => {
                                                                        if (item2.name == app.megerDataForm.sameName) {
                                                                            item.children.splice(index2, 1) // 将删除对应id
                                                                            return false;
                                                                        } else {
                                                                            if (item2.children) {
                                                                                item2.children.forEach((item3, index3) => {
                                                                                    if (item3.name == app.megerDataForm.sameName) {
                                                                                        item2.children.splice(index3, 1) // 将删除对应id
                                                                                        return false;
                                                                                    } else {
                                                                                        if (item3.children) {
                                                                                            item3.children.forEach((item4, index4) => {
                                                                                                if (item4.name == app.megerDataForm.sameName) {
                                                                                                    item3.children.splice(index4, 1) // 将删除对应id
                                                                                                    return false;
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    }
                                                                                })
                                                                            }
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                        })
                                                    }
                                                    return false;
                                                } else {
                                                    if (item3.children) {
                                                        item3.children.forEach((item4, index4) => {
                                                            if (item4.id == id) {
                                                                item4.name = app.megerDataForm.title;
                                                                item4.title = app.megerDataForm.name;
                                                                item.department = app.megerDataForm.title;
                                                                // 完成改变之后就要移除被合并的节点
                                                                if (data.children) {
                                                                    data.children.forEach((item, index) => {
                                                                        if (item.name == app.megerDataForm.sameName) {
                                                                            data.children.splice(index, 1);
                                                                            return false;
                                                                        } else {
                                                                            if (item.children) {
                                                                                item.children.forEach((item2, index2) => {
                                                                                    if (item2.name == app.megerDataForm.sameName) {
                                                                                        item.children.splice(index2, 1) // 将删除对应id
                                                                                        return false;
                                                                                    } else {
                                                                                        if (item2.children) {
                                                                                            item2.children.forEach((item3, index3) => {
                                                                                                if (item3.name == app.megerDataForm.sameName) {
                                                                                                    item2.children.splice(index3, 1) // 将删除对应id
                                                                                                    return false;
                                                                                                } else {
                                                                                                    if (item3.children) {
                                                                                                        item3.children.forEach((item4, index4) => {
                                                                                                            if (item4.name == app.megerDataForm.sameName) {
                                                                                                                item3.children.splice(index4, 1) // 将删除对应id
                                                                                                                return false;
                                                                                                            }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    }
                                                                                })
                                                                            }
                                                                        }
                                                                    })
                                                                }
                                                                return false;
                                                            }
                                                        })
                                                    }
                                                }
                                            })
                                        }
                                    }
                                })
                            }
                        }
                    })
                }
            }
        };
        myorgchart(data)

    }
    
</script>