@model IEnumerable<JianHeMES.Models.Personnel_Framework>

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Scripts/jquery.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/font-awesome.min.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/jquery.orgchart.min.css" rel="stylesheet" />
<script src="~/Scripts/Scripts/jquery.orgchart.min.js"></script>
<style>
    .checktime{
        text-align:center;
    }
    .bottom-container{
        border:1px solid black;
        margin-top:15px;
        display:flex;
        justify-content:space-between;
    }
    .officexx{
        width:100%;
        text-align:center;
    }
    input{
        color:black !important;
        display:inline-block;
        width:100px;
    }
   .selectLevel{
        color:black !important;
   }
      html,
      body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }
      h4{
          text-align:center;
      }

      #orgChartContainer{
          overflow:auto !important;
      }

      body {
        font-family: Arial;
        font-size: 14px;
        line-height: 1.428571429;
        color: #333333;
      }

      /* 去掉网格背景 */

      .orgchart {
        background-color: #fff !important;
        background-image: none;
      }

      /* 跟节点稳如狗--给个定位 */

      #orgChartContainer {
        
        position: relative;
        left:-20% !important;
        display: inline-block;
        top: 10px;
        left: 10px;
        height: 100%;
        /* css3动态计算属性函数：calc()  以下样式表示：container的width总是总宽度减去24像素 */
        width: calc(140% - 24px);
        /*border: 2px dashed #aaa;*/
        border-radius: 5px;
        overflow: auto;
        text-align: center;
      }

      /* 颜色样式:源数据中传入对应nclassname,然后根据这些classname编写样式--同意分支层级的样式给个一样的颜色(doge) */

      .orgchart td.left,
      .orgchart td.right,
      .orgchart td.top {
        border-color: #aaa;
      }

      .orgchart td>.down {
        background-color: #aaa;
      }

      .orgchart .middle-level .title {
        background-color: #006699;
      }

      .orgchart .middle-level .content {
        border-color: #006699;
      }

      .orgchart .product-dept .title {
        background-color: #009933;
      }

      .orgchart .product-dept .content {
        border-color: #009933;
      }

      .orgchart .rd-dept .title {
        background-color: #993366;
      }

      .orgchart .rd-dept .content {
        border-color: #993366;
      }

      .orgchart .pipeline1 .title {
        background-color: #996633;
      }

      .orgchart .pipeline1 .content {
        border-color: #996633;
      }

      .orgchart .frontend1 .title {
        background-color: #cc0066;
      }

      .orgchart .frontend1 .content {
        border-color: #cc0066;
      }

      /* 自定义模板样式*---title跟content部门还是用的插件原本的样式，页可以修改 */

      .office {
        width: 45%;
        border: none;
        margin: 0;
        opacity: .5;
        transition: all linear .2s;
      }

      .officex{
          width: 48%;
          margin: 0;
      }
      .officess {
        display: flex;
        justify-content: space-between;
      }

      .office:hover {
        text-align: center;
        border: 1px solid #333333;
        border-radius: 5px;
        color: red;
        opacity: 1;
      }
      

      .node {
        width: 140px !important;
      }

      .newguys{
          background-color:#ff99cc;
          border-radius:5px;
      }
      .resign{
          background-color:#808080;
          border-radius:5px;
      }
      .askforleave{
          background-color:#ffff00;
          border-radius:5px;
      }
      .absent{
          background-color:red;
          border-radius:5px;
      }
      .jobber{
          background-color:#a4d08e;
          border-radius:5px;
      }
      .businesstrip{
          background-color:#00b0f0;
          border-radius:5px;
      }
      .onposition{
          background-color:#46ea06;
          border-radius:5px;
      }
       .tttt{
        width:48%;
        margin:0;
    }

      #edit-panel {
        position: relative;
        left: 10px;
        border-radius: 4px;
        margin-top: 10px;
        padding: 10px;
        color: #fff;
        background-color: #aaa;
      }

      #edit-panel .btn-inputs {
        font-size: 24px;
      }

      #edit-panel.edit-state>:not(#chart-state-panel) {
        display: none;
      }

      #edit-panel label {
        font-weight: bold;
      }

      #edit-panel.edit-parent-node .selected-node-group {
        display: none;
      }

      #chart-state-panel,
      #selected-node,
      #btn-remove-input {
        margin-right: 20px;
      }

      #edit-panel button {
        color: #333;
        background-color: #fff;
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      #edit-panel.edit-parent-node button:not(#btn-add-nodes) {
        display: none;
      }

      #edit-panel button:hover,
      .edit-panel button:focus,
      .edit-panel button:active {
        border-color: #eea236;
        box-shadow: 0 0 10px #eea236;
      }

      #new-nodelist {
        display: inline-block;
        list-style: none;
        margin-top: -2px;
        padding: 0;
        vertical-align: text-top;
      }

      #new-nodelist>* {
        padding-bottom: 4px;
      }

      .btn-inputs {
        vertical-align: sub;
      }

      #edit-panel.edit-parent-node .btn-inputs {
        display: none;
      }

      .btn-inputs:hover {
        text-shadow: 0 0 4px #fff;
      }

      .radio-panel input[type='radio'] {
        display: inline-block;
        height: 24px;
        width: 24px;
        vertical-align: top;
      }

      #edit-panel.view-state .radio-panel input[type='radio']+label {
        vertical-align: -webkit-baseline-middle;
      }

      #btn-add-nodes {
        margin-left: 20px;
      }


</style>

<div class="top-container" style="margin-top:75px" id="app">
    <h4>组织架构</h4>
    @*<p>
            @Html.ActionLink("Create New", "Create")
        </p>*@
    <div id='chartcontainer'>
        <div class="checktime">
            <el-date-picker v-model="dateTimes"
                            size="small"
                            type="datetime"
                            placeholder="选择日期时间">
            </el-date-picker>
        </div>
        <div id="orgChartContainer">

        </div>

        <div id="edit-panel">
            @*<span id="chart-state-panel" class="radio-panel">
                <input type="radio" name="chart-state" id="rd-view" value="view"><label for="rd-view">查看</label>
                <input type="radio" name="chart-state" id="rd-edit" value="edit" checked='checked'><label for="rd-edit">修改</label>
            </span>*@
            <label class="selected-node-group">选择的节点:</label>
            <input type="text" id="selected-node" class="selected-node-group">
            <label class="selected-node-groups">层级选择:</label>
            <select class="selectLevel" onchange="selectLevelChange(this)">
                <option value="请选择">请选择</option>
                <option value="中心级别">中心级别</option>
                <option value="部门级别">部门级别</option>
                <option value="组级别">组级别</option>
                <option value="车间级别">车间级别</option>
                <option value="职位级别">职位级别</option>
            </select>
            <label class="selected-node-content">负责人:</label>
            <input type="text" id="selected-node-content" class="selected-node-group">
            <label class="selected-node-position">职位:</label>
            <input type="text" id="selected-node-position" class="selected-node-group">
            <label class="selected-node-content-jobnum">工号:</label>
            <input type="text" id="selected-node-content-jobnum" class="selected-node-group">
            <label>新节点标题:</label>
            <ul id="new-nodelist">
                <li><input id="newnodeTitle" type="text" class="new-node"></li>
            </ul>
            @*<i class="fa fa-plus-circle btn-inputs" id="btn-add-input"></i>
            <i class="fa fa-minus-circle btn-inputs" id="btn-remove-input"></i>*@
            <span id="node-type-panel" class="radio-panel">
                @*<input type="radio" name="node-type" id="rd-parent" value="parent"><label for="rd-parent">Parent(root)</label>*@
                <input type="radio" name="node-type" id="rd-child" value="Child"><label for="rd-child">子级</label>
                <input type="radio" name="node-type" id="rd-sibling" value="siblings"><label for="rd-sibling">同级</label>
            </span>
            <button type="button" id="btn-add-nodes">添加</button>
            <button type="button" id="btn-delete-nodes">删除</button>
            <button type="button" id="btn-reset">重置</button>
            <button type="button" id="btn-save-changed">保存修改</button>
        </div>
    </div>

    <el-table v-show="flag" v-bind:data="departmentInfos"
              style="width: 100%">
        <el-table-column prop="depar"
                         label="部门"
                         width="180">
        </el-table-column>
        <el-table-column prop="Employees"
                         label="实际人数"
                         width="180">
        </el-table-column>
        <el-table-column prop="Aurhorized"
                         label="编制人数"
                         width="180">
        </el-table-column>
        <el-table-column prop="LackAurhorized"
                         label="缺编人数">
        </el-table-column>
        <el-table-column prop="Notonduty"
                         label="请假/旷工人数">
        </el-table-column>
        <el-table-column prop="Attendance"
                         label="出勤人数">
        </el-table-column>
        <el-table-column prop="waitQuit"
                         label="待离职人数">
        </el-table-column>
    </el-table>
    <div class="bottom-container" v-show="showchangeinput">
        <div>
            <span>修改当前节点内容--></span>
            <span>职位：</span>
            <span><input type="text" class="positionVal" v-model="position" placeholder="请输入职位信息" /></span>
        </div>
        <div>
            <span>姓名：</span>
            <span><input type="text" class="positionVal" v-model="name" placeholder="请输入职位信息" /></span>
        </div>
        <div>
            <span>节点标题：</span>
            <span><input type="text" class="nodeTitles" v-model="nodetitle" placeholder="请输入节点标题" /></span>
        </div>
        <div>
            <span>工号：</span>
            <span><input type="text" class="jobNumbers" v-model="jobnums" placeholder="请输入工号信息" /></span>
        </div>
        <div>
            <input type="button" value="保存修改" v-on:click="postChangeNode" />
            <input type="button" value="取消" v-on:click="postChangeNodeCancel" />
        </div>
    </div>
    @*{{count}}*@
    @*{{position}}--{{nodetitle}}--{{mesId}}--{{jobnums}}---{{departments}}*@
    @*loding*@
    <div class="spinnerModel" v-show="loading">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
    </div>


    @{
        var UserName = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).UserName;
        var UserRole = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).Role;
        var UserId = Session["User"] == null ? 0 : ((JianHeMES.Models.Users)Session["User"]).UserNum;
        var ischeck = ViewBag.editinfo;
    }
</div>


    <script>

        // 定义选择框发生改变时的操作
        function selectLevelChange(slect) {
            if ($(slect).val() != "职位级别") {
                $(".selected-node-content").text("负责人:")
            } else {
                $(".selected-node-content").text("员工:")
            }
        }


        //时间格式化
        function GMTToStr(time) {
            if (time != null) {
                let date = new Date(time)
                //console.log(date);
                let Str = date.getFullYear() + '/' +
                    (date.getMonth() + 1).toString().padStart(2, '0') + '/' +
                    date.getDate().toString().padStart(2, '0') + ' ' +
                    date.getHours().toString().padStart(2, '0') + ':' +
                    date.getMinutes().toString().padStart(2, '0')
                return Str
            } else {
                return ''
            }
        }


        var vm = new Vue({
            el: "#app",
            data: {
                dateTimes: localStorage.getItem('selectDate'),
                flag: false,
                orgData:null,
                showchangeinput: false,
                loading: true,
                departments: null,
                departmentInfos: [],
                userId: "@UserId",

                // 修改当前节点的数据
                position: null,
                name:null,
                nodetitle: null,
                mesId: null,
                jobnums: null,


                // 进入页面是的树形图结构
                orgchartJson: null,
                count:0
            },
            watch: {
                orgchartJson() {
                    vm.count++
                },
                departments() {
                    if (this.departments != null) {
                        this.departmentInfos = [];   //每次点击只显示当前点击的部门的信息。页可以叠加之前点击的部门的信息显示--目前单独显示
                        axios.post("/Personnel_Framework/DepartmentUserInfo", { department: this.departments }).then(res=> {
                            //console.log(res.data)
                            res.data.depar = this.departments;
                            this.departmentInfos.push(res.data);
                        }).catch(err=> {
                            console.log('out of connected.')
                        })
                    } else {
                        this.departmentInfos = [];
                    }
                },
                departmentInfos() {
                    if (this.departmentInfos.length < 1) {
                        this.flag = false;
                    } else {
                        this.flag = true;
                    }
                },
                dateTimes(val) {
                    
                    let tt = GMTToStr(this.dateTimes)
                    console.log(this.dateTimes)
                    console.log(tt)
                    //let firefoxtime = this.dateTimes.replace(/-/g,'/')
                    localStorage.setItem('selectDate', tt);
                    window.location.reload();
                }
            },
            methods: {
                postChangeNode() {
                    if ($("#selected-node").val() == "") {
                        alert("请选择需要修改的节点！")
                    } else if (vm.nodetitle == '') {
                        alert("请补全修改节点标题信息！")
                    } else {
                        axios.post("/Personnel_Framework/updateNodde", { position: vm.position,name:vm.name, Nodetitle: vm.nodetitle, mesID: vm.mesId, jobnum: vm.jobnums }).then(res=> {
                            if (true) {
                                alert("修改成功！")
                            } else {

                            };
                            window.location.reload();
                        }).catch(err=> {

                        })
                    }
                },
                postChangeNodeCancel() {
                    vm.showchangeinput = false;
                    vm.position = null;
                    vm.nodetitle = null;
                    vm.jobnums = null;
                    vm.mesId = null;
                    $("#btn-reset").click();
                },
            },
        });

        var getId = function () { //为每个新增节点设置ID
            return (new Date().getTime()) * 1000 + Math.floor(Math.random() * 1001);
        };
     
        let cahngedNodeData = []   // 这是新增节点的详细信息--全部传给后台，后台根据id架构 补全所有信息
            var orgChaart = document.getElementById('orgChartContainer')
            orgChaart.onclick = function (event) {  //  解决点击回复原本状态问题
                var outer = event.clientX
                var selects = document.getElementsByClassName("statusSelect")
                //console.log(selects)
                var selectArr = []
                for (let i = 0; i < selects.length; i++) {
                    selectArr.push(selects[i])
                }
                selectArr.forEach(item=> {
                    console.log(item.children[0].innerHTML)  //获取所有已被点击而出现的选择框的值
                    console.log($(item).parent())
                    var color = ''
                    if (item.children[0].innerHTML == '在岗') {
                        colors = 'onposition'
                    } else if (item.children[0].innerHTML == '请假') {
                        colors = 'askforleave'
                    } else if (item.children[0].innerHTML == '新进') {
                        colors = 'newguys'
                    } else if (item.children[0].innerHTML == '出差') {
                        colors = 'businesstrip'
                    } else if (item.children[0].innerHTML == '旷工') {
                        colors = 'absent'
                    }
                    else if (item.children[0].innerHTML == '辞职') {
                        colors = 'resign'
                    }
                    else if (item.children[0].innerHTML == '临时工') {
                        colors = 'jobber'
                    }
                    $(item).parent().removeClass()
                    $(item).parent().addClass(colors)
                    $(item).parent().addClass('tttt')
                    $(item).parent().html(`<span>${item.children[0].innerHTML}</span>`)
                })
                //console.log('outer ciliked!!')

            }


            var datas = ''
            let dates = localStorage.getItem('selectDate')
            app.dateTimes = dates
        axios.post("/Personnel_Framework/Framework", { time: dates }).then(res=> {
                app.orgData = res.data;
                //console.log(res.data)
                //console.log('connected')
                var nodeTemplate = function (data) {

                    var arr = data.userid;
                    var result = '';
                    let targetData = ''
                    if (arr instanceof Array) {

                    } else {
                        targetData = arr
                    }
                    console.log(arr instanceof Array)
                    //for (let i = 0; i < arr.length; i++) {   //判断初始状态给定背景颜色并按顺序输出
                        var colors = '';
                        if (targetData !='') {
                            if (targetData.status == '在岗') {
                            colors = 'onposition'
                            } else if (targetData.status == '请假') {
                            colors = 'askforleave'
                            } else if (targetData.status == '新进') {
                            colors = 'newguys'
                            } else if (targetData.status == '出差') {
                            colors = 'businesstrip'
                            } else if (targetData.status == '旷工') {
                            colors = 'absent'
                            }
                                else if (targetData.status == '辞职') {
                                colors = 'resign'
                            }
                            else if (targetData.status == '临时工') {
                            colors = 'jobber'
                            }
                            result = `<div class="officess"><div onclick="listClick(this,'${targetData}','${targetData.id}',event)"title="点击编辑" class="office">${data.name}</div><div class='status ${colors} officex' onclick="justforstop(event)">${targetData.status}</div></div>`

                        } else {
                            if (data.name == "") {

                            } else {
                                result = `<div class="officess"><div onclick="listClick(this,'${targetData}','${targetData.id}',event) "title="点击编辑" class="office">${data.name}</div><div class='status onposition officex' onclick="justforstop(event)">在岗</div></div>`
                            }
                        }

                        // 由于在判断节点是否可操作时并不能获取到节点的所有data --只能写一个隐藏的span来承载这个判断所需的值
                        var depar = `<div class="title">${data.title}</div><span class="testmove" style="display:none;">${data.canmove}</span><div class="content">${result}</div>`

                    vm.loading = false;
                    return `${depar}`

                };

                var oc = $('#orgChartContainer').orgchart({
                    'visibleLevel': 2,
                    'pan': true,
                    'data': app.orgData,
                    'nodeContent': 'title',
                    'nodeTemplate': nodeTemplate,
                    'draggable': true, //可拖动
                    'dropCriteria': function ($draggedNode, $dragZone, $dropZone) { //拖动规则--符合规则则可拖动，不符合则拖动无效
                        if ($draggedNode.find('.testmove').text().indexOf('false') > -1) {    // 节点中隐藏span的文本存在false时不可拖动
                            return false;
                        } else {
                            vm.orgchartJson = oc.getHierarchy()  // 改变结构数据

                            return true;
                        }
                    },
                    'createNode': function ($node, data) {

                        $node.on('click', function (event) { //点击事件：点击部门显示总计信息
                            vm.showchangeinput = true;  // 显示修改节点
                            vm.mesId = null;
                            if (data.name.indexOf(":") != -1) {
                                let tt = data.name.split(":")
                                vm.position = tt[0];
                                vm.name = tt[1]
                            } else {
                                vm.position = null,
                                vm.name = data.name
                            }
                            vm.nodetitle = data.title;
                            vm.jobnums = data.userid.jobnum;
                            vm.mesId = data.id;
                            //vm.jobnums = $(".jobNumbers").val().trim();
                            console.log(data.name)
                            if (data.department == 'true') {
                                vm.departments = data.title;
                            } else {
                                vm.departments = null;
                            };
                            
                        });
                    },
                });
                

                vm.orgchartJson = oc.getHierarchy()
                // 测试获取修改后的树形图数据---完善数据提交  提交机构json数据跟每个改动的节点的详细数据
                document.querySelector('#btn-save-changed').addEventListener('click', () => {
                    hierarchy = oc.getHierarchy();   // 获取结构json

                    //vm.orgchartJson = oc.getHierarchy()
                    if (true) {
                        axios.post("Personnel_Framework/ModifyTheNode", { newNode: JSON.stringify(hierarchy), AddMessage: cahngedNodeData }).then(res=> {
                            console.log(res.data)
                            cahngedNodeData = [];   // 提交完成后清空之前修改的数据---用户多次修改
                        }).catch(err=> {
                            console.log(err.data)
                        })
                    } else {
                        alert("暂无需要提交的修改！")
                    }
                });



                oc.$chartContainer.on('click', '.node', function () { //点击节点时的操作
                    var $this = $(this);
                    $('#selected-node').val($this.find('.title').text()).data('node', $this);
                });

                oc.$chartContainer.on('click', '.orgchart', function (event) { //点击orgchartcontainer除节点以外的位置时的操作
                    if (!$(event.target).closest('.node').length) {
                        $('#selected-node').val('');
                    }
                });


                $('input[name="chart-state"]').on('click', function () {
                    $('.orgchart').toggleClass('edit-state', this.value !== 'view');
                    $('#edit-panel').toggleClass('edit-state', this.value === 'view');
                    if ($(this).val() === 'edit') {
                        $('.orgchart').find('tr').removeClass('hidden')
                          .find('td').removeClass('hidden')
                          .find('.node').removeClass('slide-up slide-down slide-right slide-left');
                    } else {
                        $('#btn-reset').trigger('click');
                    }
                });


                $('input[name="node-type"]').on('click', function () {
                    var $this = $(this);
                    if ($this.val() === 'parent') {
                        $('#edit-panel').addClass('edit-parent-node');
                        $('#new-nodelist').children(':gt(0)').remove();
                    } else {
                        $('#edit-panel').removeClass('edit-parent-node');
                    }
                });


                // 增加新增节点操作
                $('#btn-add-input').on('click', function () {
                    $('#new-nodelist').append('<li><input type="text" class="new-node"></li>');
                    vm.orgchartJson = oc.getHierarchy()
                });


                // 删除新增节点操作
                $('#btn-remove-input').on('click', function () {
                    var inputs = $('#new-nodelist').children('li');
                    if (inputs.length > 1) {
                        inputs.last().remove();
                    }
                    vm.orgchartJson = oc.getHierarchy()
                });


                // 添加按钮操作
                $('#btn-add-nodes').on('click', function () {
                    var $chartContainer = $('#chart-container');
                    var nodeVals = [];
                    $('#new-nodelist').find('.new-node').each(function (index, item) {
                        var validVal = item.value.trim();
                        if (validVal.length) {
                            nodeVals.push(validVal);
                        }
                    });
                    var $node = $('#selected-node').data('node');
                    //if (!nodeVals.length) {
                    //    alert('请输入新节点内容！');
                    //    return;
                    //}
                    var nodeType = $('input[name="node-type"]:checked');
                    if (!nodeType.length) {
                        alert('请选择一个节点类型！');
                        return;
                    }
                    if (nodeType.val() !== 'parent' && !$('.orgchart').length) {
                        alert(
                          '请先选择根节点！'
                        );
                        return;
                    }
                    if (nodeType.val() !== 'parent' && !$node) {
                        alert('请选择一个节点！');
                        return;
                    }
                    if (nodeType.val() === 'parent') {
                        if (!$chartContainer.children('.orgchart')
                          .length) { // if the original chart has been deleted
                            oc = $chartContainer.orgchart({
                                'data': {
                                    'name': nodeVals[0]
                                },
                                'exportButton': true,
                                'exportFilename': 'SportsChart',
                                'parentNodeSymbol': 'fa-th-large',
                                'createNode': function ($node, data) {
                                    $node[0].id = getId();
                                }
                            });
                            oc.$chart.addClass('view-state');
                        } else {
                            oc.addParent($chartContainer.find('.node:first'), {
                                'name': nodeVals[0],
                                'id': getId()
                            });
                        }
                    } else if (nodeType.val() === 'siblings') {
                        if ($node[0].id === oc.$chart.find('.node:first')[0].id) {
                            alert('不能在跟节点创建同级节点！');
                            return;
                        }
                        if ($(".selectLevel").val() == "请选择" || $("#newnodeTitle").val()=='') {
                            alert("请确认是否已输入节点级别或新节点标题")
                        } else {
                        oc.addSiblings($node, nodeVals.map(function (item) {
                            //  此处可判断负责人跟工号有没有填
                            //|| $("#selected-node-content").val() == "" || $("#selected-node-position").val() == "" || $("#selected-node-content-jobnum").val() == ""
                           
                                userid = [{ 'name': $('#selected-node-content').val().trim(), 'status': "在岗", 'department': false, 'jobnum': $('#selected-node-content-jobnum').val().trim() }]  //  用户输入的新节点的关键信息--主要是工号
                                ID = getId()
                                // 判断选择框的值--对应一个number
                                let levels = null
                                if($(".selectLevel").val()=="中心级别"){
                                    levels = 1
                                }else if($(".selectLevel").val()=="部门级别"){
                                    levels = 2
                                }else if($(".selectLevel").val()=="组级别"){
                                    levels = 3
                                }else if($(".selectLevel").val()=="车间级别"){
                                    levels = 4
                                }else if($(".selectLevel").val()=="职位级别"){
                                    levels = 5
                                }
                                // 拼接一条完整的数据---统一存到一个数组里面
                                let obj = { id: ID, department: false, title: $(".new-node").val(), name: $('#selected-node-content').val().trim(), position: $("#selected-node-position").val().trim(), belogin: levels }
                                cahngedNodeData.push(JSON.stringify(obj))
                                // msg: userid, posiyion: $("#selected-node-position").val().trim(), 
                                vm.orgchartJson = oc.getHierarchy()  // 改变结构数据
                                return {
                                    'name': $('#selected-node-content').val().trim(),
                                    'title': item,
                                    'userid': userid,
                                    'relationship': '110',
                                    'id': ID
                                };
                                $("#btn-save-changed").click();
                                $('#btn-reset').click();
                           
                        }));
                        }
                    } else {  // 子级节点增加
                        var hasChild = $node.parent().attr('colspan') > 0 ? true : false;
                        if ($(".selectLevel").val() == "请选择" || $("#newnodeTitle").val() == '') {
                            alert("请确认是否已输入节点级别或新节点标题！")
                        } else {
                            userid = [{ 'name': $('#selected-node-content').val().trim(), 'status': "在岗", 'department': false, 'jobnum': $('#selected-node-content-jobnum').val().trim() }]  //  用户输入的新节点的关键信息--主要是工号
                            ID = getId();
                            // 判断选择框的值--对应一个number
                            let levels = null
                            if ($(".selectLevel").val() == "中心级别") {
                                levels = 1
                            } else if ($(".selectLevel").val() == "部门级别") {
                                levels = 2
                            } else if ($(".selectLevel").val() == "组级别") {
                                levels = 3
                            } else if ($(".selectLevel").val() == "车间级别") {
                                levels = 4
                            } else if ($(".selectLevel").val() == "职位级别") {
                                levels = 5
                            }
                            // 拼接一条完整的数据---统一存到一个数组里面
                            let obj = { id: ID, department: false, title: $(".new-node").val(), name: $('#selected-node-content').val().trim(), position: $("#selected-node-position").val().trim(), belogin: levels }
                            cahngedNodeData.push(JSON.stringify(obj))
                            vm.orgchartJson = oc.getHierarchy()  // 改变结构数据
                            if (!hasChild) {
                                var rel = nodeVals.length > 1 ? '110' : '100';
                                oc.addChildren($node, nodeVals.map(function (item) {
                                    return {
                                        'name': $('#selected-node-content').val().trim(),
                                        'title': item,
                                        'userid': userid,
                                        'relationship': rel,
                                        'id': ID
                                    };
                                }));
                                $("#btn-save-changed").click();
                                $('#btn-reset').click();
                            } else {
                                oc.addSiblings($node.closest('tr').siblings('.nodes').find('.node:first'),
                                  nodeVals.map(function (item) {
                                      return {
                                          'name': $('#selected-node-content').val().trim(),
                                          'title': item,
                                          'userid': userid,
                                          'relationship': '110',
                                          'id': ID
                                      };
                                  }));
                                $("#btn-save-changed").click();
                                $('#btn-reset').click();
                            }
                        }
                    }
                });


                // 删除按钮操作
                $('#btn-delete-nodes').on('click', function () {
                    var $node = $('#selected-node').data('node');
                    console.log($node.parents("tr").next()[0])
                    
                    if (!$node) {
                        alert('请选择一个节点！');
                        return;
                    } else if ($node[0] === $('.orgchart').find('.node:first')[0]) {
                        if (!window.confirm('确定删除整个组织架构树形图吗？')) {
                            return;
                        }
                    }
                    if ($node.parents("tr").next()[0]) {   // 此处判断是否存在下一同级节点--存在测不能删除
                        alert("该节点含有子节点，不可直接删除！")
                    } else {
                        oc.removeNodes($node);
                        $('#selected-node').val('').data('node', null);
                        vm.orgchartJson = oc.getHierarchy()  // 改变结构数据
                    }
                    
                });


                // 重置按钮操作
                $('#btn-reset').on('click', function () {
                    $('.orgchart').find('.focused').removeClass('focused');
                    $('#selected-node').val('');
                    $('#selected-node-content').val('');
                    $('.selectLevel').val("请选择");
                    $('#selected-node-position').val('');
                    $('#selected-node-content-jobnum').val('');
                    $('#new-nodelist').find('input:first').val('').parent().siblings().remove();
                    $('#node-type-panel').find('input').prop('checked', false);
                });

                //oc.$chart.on('nodedrop.orgchart', function (event, extraParams) { //拖动时的数据改变可以在这里操作--重组保存
                //    console.log('draggedNode:' + extraParams.draggedNode.children('.title').text() +
                //      ', dragZone:' + extraParams.dragZone.children('.title').text() +
                //      ', dropZone:' + extraParams.dropZone.children('.title').text()
                //    );
                //});
            }).catch(err=> {
            console.log('out of connected')
        });


        function listClick(item, listitem, itemid, event) { //点击事件生效--点击每一个员工时可单独操作

            axios.post("/Personnel_Framework/Alter", { userid: itemid, loginid: vm.userId }).then(res=> {
                //console.log(res.data)
                console.log('连接成功')
                if (res.data == 'True') {   //权限判断
                    var target = $(item).next();
                    var selectVal = $(item).next().text().trim();
                    //console.log(selectVal);
                    if (selectVal.length > 8) { } else {
                        $(item).next().html(`<select class="statusSelect" onchange="selectChange(this,'${selectVal}','${itemid}')"><option>${selectVal}</option><option>出差</otion><option>在岗</otion><option>请假</otion><option>临时工</otion><option>新进</otion><option>旷工</otion><option>辞职</otion></select>`)
                    }
                } else {
                    alert('暂无修改权限')
                }
            }).catch(err=> {
                console.log('获取权限判断连接失败')
            })

            event.stopPropagation()  // 阻止点击事件冒泡
        };


        function justforstop(event) {
            event.stopPropagation()  // 阻止点击事件冒泡
        };



        function selectChange(item, slectVals, itemid) {
            //console.log(itemid);
            //console.log(item.value)
            //console.log(slectVals);
            // 此处进行数据提交：姓名+状态   提交成功再执行下一步
            var statuss = '';
            if (item.value == '在岗') { //根据特定状态给背景色
                statuss = 0
            } else if (item.value == '请假') {
                statuss = 1
            } else if (item.value == '新进') {
                statuss = 2
            } else if (item.value == '出差') {
                statuss = 3
            }
            else if (item.value == '旷工') {
                statuss = 4
            }
            else if (item.value == '辞职') {
                statuss = 5
            }
            else if (item.value == '临时工') {
                statuss = 6
            }
            console.log(statuss)
            axios.post("/Personnel_Framework/UpateStatus", { id: itemid, statue: statuss }).then(res=> {
                console.log("进到axois:" + res.data)
                var color = null; //存储动态类名的变量
                if (item.value == '在岗') { //根据特定状态给背景色
                    color = 'onposition'
                } else if (item.value == '请假') {
                    color = 'askforleave'
                } else if (item.value == '新进') {
                    color = 'newguys'
                } else if (item.value == '出差') {
                    color = 'businesstrip'
                }
                else if (item.value == '旷工') {
                    color = 'absent'
                }
                else if (item.value == '临时工') {
                    color = 'jobber'
                } else if (item.value == '辞职') {
                    color = 'resign'
                }
                $(item).parent().html(`<div class="${color}">${item.value}</div>`);


            })


        };
        


    </script>
