@model IEnumerable<JianHeMES.Models.Burn_in>

@{
    ViewBag.Title = "老化架查询";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<style>
    * {
        margin: 0;
        padding: 0;
    }

    #app {
        width: 1170px;
    }

    .table {
        width: 1153px;
        margin-bottom: 0;
    }

        .table > tbody > tr:first-child > td {
            border-top: none;
        }

        .table > thead:first-child > tr:first-child > th, .table > colgroup + thead > tr:first-child > th {
            border-top: 1px solid rgba(35, 35, 35, 0.9);
        }

    .table-bordered > thead > tr > th, .table-bordered > tbody > tr > td {
        border: 1px solid #000;
        text-align: center;
        padding: 3px;
    }

    .table-bordered > tfoot > tr > th {
        border: none;
    }

    .scrollDiv {
        width: 100%;
        height: 40px;
    }
</style>
<h2 class="text-center" style="width:1170px">老化架查询页面</h2>


<div id="app" v-cloak>
    <div class="row text-center" style="position:relative;width:1170px">
        <span>
            订单号：
            <el-select v-model.trim="ordernum.value" placeholder="输入订单号查询" filterable size="small" id="OrderNum" name="OrderNum" clearable>
                <el-option v-for="item in ordernum.options"
                           :key="item.value"
                           :value="item.value">
                </el-option>
            </el-select>
        </span>
        <span>
            老化架号：
            <el-select v-model.trim="shelfnum.value" placeholder="输入老化架号查询" filterable size="small" id="BurnInShelfNum" name="BurnInShelfNum" clearable>
                <el-option v-for="item in shelfnum.options"
                           :key="item.value"
                           :value="item.value">
                </el-option>
            </el-select>
        </span>
        <span><input v-on:click="postLineNum" class="btn btn-default" type="submit" value="查询" /></span>
        <div style="display:block;position:absolute;right:20px;top:0">
            <span class="text-success text-center btn btn-default">@Html.ActionLink("老化架历史查询", "BurnInShelfQueryHistory")</span><br />
            <span style="width:140px">{{nowtime}}</span>
        </div>
    </div>
    <br />
    <div class="row" style="width:1170px">
        <table class="table table-bordered">
            <colgroup>
                <col width="42 ">
                <col width="100 ">
                <col width="140 ">
                <col width="170 ">
                <col width="170 ">
                <col width="170 ">
                <col width="170 ">
                <col width="190 ">
            </colgroup>
            <thead>
                <tr>
                    <th>序号</th>
                    <th>老化架号</th>
                    <th>订单号</th>
                    <th>模组条码号</th>
                    <th>老化开始时间</th>
                    <th>老化完成时间</th>
                    <th>老化用时<span class="text-center" style="font-size:10px;color:#888;font-weight:300;">(已生产时长)</span></th>
                    <th>平均用时</th>
                </tr>
            </thead>
        </table>
        <div id="scrollTableDiv" style="max-height:600px;overflow:auto;width:100%">
            <table class="table table-bordered">
                <colgroup>
                    <col width="42 ">
                    <col width="100 ">
                    <col width="140 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="190 ">
                </colgroup>
                <tbody>
                    <template v-for="(item,index) in tableList">
                        <tr v-for="(val,i) in item.arr">
                            <td>{{i+1}}</td>
                            <td>{{val.BurnInShelfNum}}</td>
                            <td>{{val.OrderNum}}</td>
                            <td>{{val.burnNumber}}</td>
                            <td>{{val.burn_StarTime}}</td>
                            <td>{{val.burn_endTime}}</td>
                            <td><span class="text-center" style="font-size:12px;color:#888;font-weight:300;">{{nowtimelong(val.burn_StarTime,val.burn_timeSpan)}}</span></td>
                            <td v-if="i==0" v-bind:rowspan="item.arr.length" class="scrollTD">
                                <div class="scrollDiv">
                                    <span>（模组数量：{{item.arr.length}}）</span><br />
                                    <span>

                                        {{nowAvageTime(item.avageTime)}}
                                    </span>
                                </div>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>
    @*loding*@
    <div class="spinnerModel" v-show="loading">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
    </div>
</div>
<div class="row col-md-12">
    @Html.ActionLink("返回", "New_Index")
</div>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            loading: false,
            tableList: [],
            nowtime: "",
            nowSecondTime: "",
            ordernum: {
                value: '',
                options: []
            },
            shelfnum: {
                value: '',
                options: []
            },
        },
        methods: {
            nowtimelong(starttTime, thisTime) {
                if (thisTime == null || thisTime == "") {
                    let st = starttTime.replace(/-/g, "/");   //全部“-”替换为 “/”
                    let et = this.nowtime.replace(/-/g, "/");   //全部“-”替换为 “/”
                    let startTime = new Date(st); // 开始时间
                    let endTime = new Date(et); // 结束时间
                    let timespan = (endTime - startTime);
                    //计算出相差天数
                    let days = Math.floor(timespan / (24 * 3600 * 1000));
                    //计算出小时数
                    let leave1 = timespan % (24 * 3600 * 1000);    //计算天数后剩余的毫秒数
                    let hours = Math.floor(leave1 / (3600 * 1000));
                    //计算相差分钟数
                    let leave2 = leave1 % (3600 * 1000);        //计算小时数后剩余的毫秒数
                    let minutes = Math.floor(leave2 / (60 * 1000));
                    //计算相差秒数
                    let leave3 = leave2 % (60 * 1000);      //计算分钟数后剩余的毫秒数
                    let seconds = Math.round(leave3 / 1000);
                    if (days == 0) {
                        //return `${hours}${minutes}分${seconds}秒`;
                        let stringTime = String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    } else {
                        //return `${days}天${hours}时\n${minutes}分${seconds}秒`;
                        let stringTime = String(days) + "天" + String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    };
                };
            },
            nowAvageTime(thisTime) {
                if (thisTime != "" || thisTime != null) {
                    let startTime = this.nowSecondTime; // 开始时间
                    let endTime = new Date(); // 结束时间
                    let timespan = thisTime+ (endTime - startTime);
                    //计算出相差天数
                    let days = Math.floor(timespan / (24 * 3600 * 1000));
                    //计算出小时数
                    let leave1 = timespan % (24 * 3600 * 1000);    //计算天数后剩余的毫秒数
                    let hours = Math.floor(leave1 / (3600 * 1000));
                    //计算相差分钟数
                    let leave2 = leave1 % (3600 * 1000);        //计算小时数后剩余的毫秒数
                    let minutes = Math.floor(leave2 / (60 * 1000));
                    //计算相差秒数
                    let leave3 = leave2 % (60 * 1000);      //计算分钟数后剩余的毫秒数
                    let seconds = Math.round(leave3 / 1000);
                    if (days == 0) {
                        //return `${hours}${minutes}分${seconds}秒`;
                        let stringTime = String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    } else {
                        //return `${days}天${hours}时\n${minutes}分${seconds}秒`;
                        let stringTime = String(days) + "天" + String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    };
                }
            },
            postLineNum() {
                if ("@Session["User"]" == "") {
                    $("#login").modal();
                    return false;
                };
                this.nowSecondTime= new Date();
                this.tableList = [];
                this.loading = true;
                axios.post("/Burn_in/BurnInShelfQuery", {
                    OrderNum: this.ordernum.value,
                    BurnInShelfNum: this.shelfnum.value,
                }).then(response => {
                    let resData = response.data;
                    //console.log(resData);
                    //处理数据
                    let thisobj=[], shelfArray = [];
                    for (let i in resData) {
                        //表格数据
                        let thisI = {
                            shelf:"",
                            avageTime: "",
                            arr:[]
                        };
                        thisI.shelf = i;
                        for (let j in resData[i]) {
                            if (j == "avageTime") {
                                thisI.avageTime = resData[i][j];
                            } else {
                                thisI.arr.push(resData[i][j]);
                            };
                        };
                        thisobj.push(thisI)
                    };
                    this.tableList = thisobj;
                    this.loading = false;
                    }).catch(error => {
                        this.loading = false;
                    console.warn(error);
                });
            },
            handleScroll: ()=> { // scrollTableDiv   scrollTD   scrollDiv $("div").css("color","yellow"); element.style.marginTop  = '100px';
                let TableDiv = document.getElementById("scrollTableDiv");   // 滚动区域
                let TD = document.getElementsByClassName("scrollTD");       // 滚动td
                let Div = document.getElementsByClassName("scrollDiv");     // 滚动div
                for (let i in Div) {
                    let maxBottomHeight = TD[i].clientHeight - Div[i].clientHeight;//最大触底高度
                    let hoverTdTop = TableDiv.scrollTop - TD[i].offsetTop;//大于等于0触顶
                    let hoverTdBottom = TableDiv.scrollTop - maxBottomHeight - TD[i].offsetTop;//大于等于0触底
                    if (hoverTdTop >= 0 && hoverTdBottom < 0) {
                        Div[i].setAttribute('style', 'margin-top:' + hoverTdTop + 'px!important');
                    };
                };
            }
        },
        created: function () {
            setInterval(()=> {
                let now = new Date().Format("yyyy-MM-dd hh:mm:ss");
                this.nowtime = now;
            }, 1000);
        },
        mounted() {
            axios.post('/OrderMgms/GetOrderList').then(res => {
                this.ordernum.options = res.data;
            });
            axios.post('/Burn_in/BurnInShelfNumDoingList1').then(res => {
                this.shelfnum.options = res.data;
            });
            window.addEventListener('scroll', this.handleScroll, true);  // 监听（绑定）滚轮滚动事件
        },
        destroyed: function () {
            window.removeEventListener('scroll', this.handleScroll);   //  离开页面清除（移除）滚轮滚动事件
        }
    });

    Date.prototype.Format = function (fmt) {
        var o = {
            "M+": this.getMonth() + 1,
            "d+": this.getDate(),
            "h+": this.getHours(),
            "m+": this.getMinutes(),
            "s+": this.getSeconds(),
            "q+": Math.floor((this.getMonth() + 3) / 3),
            "S": this.getMilliseconds()
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt))
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    }
</script>