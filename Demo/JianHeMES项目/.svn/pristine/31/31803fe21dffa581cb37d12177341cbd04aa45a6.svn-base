@model JianHeMES.Models.Appearance

@{
    ViewBag.Title = "Edit";
}
<style>
    input[type=checkbox] {
        cursor: not-allowed;
    }

    @@media screen and (max-width:400px) {
        .form-group {
            margin: 5px auto !important;
            display: flex;
            padding: 0px;
            justify-content: space-between;
        }

        .positions input {
            padding: 0px !important;
            height: 25px;
        }

        .positions {
            width: 188px;
            height: 25px;
            display: inline-block;
            padding: 0px;
        }

        span {
            display: inline-block;
            width: 86px;
        }

        label {
            padding: 0px !important;
        }
    }
</style>
<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Appearance</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.OrderNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OrderNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BarCodesNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BarCodesNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.BarCodesNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerBarCodesNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerBarCodesNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CustomerBarCodesNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModuleGroupNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleGroupNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModuleGroupNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ToOrderNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ToOrderNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ToOrderNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCCheckBT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCCheckBT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OQCCheckBT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCPrincipal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCPrincipal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OQCPrincipal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCCheckFT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCCheckFT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OQCCheckFT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCCheckTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCCheckTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OQCCheckTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCCheckTimeSpan, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCCheckTimeSpan, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OQCCheckTimeSpan, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Appearance_OQCCheckAbnormal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Appearance_OQCCheckAbnormal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Appearance_OQCCheckAbnormal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepairCondition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DropDownListFor(model => model.RepairCondition,
                    ViewBag.RepairList as IEnumerable<SelectListItem>, new { @class = "form-control", @readonly = "readonly" })*@
                @Html.EditorFor(model => model.RepairCondition, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.RepairCondition, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OQCCheckFinish, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OQCCheckFinish)
                @Html.ValidationMessageFor(model => model.OQCCheckFinish, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @*<input type="submit" value="Save" class="btn btn-default" />*@
            </div>
        </div>
    </div>
}
<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <button class="btn btn-default" onclick="editMudule()">确定修改</button>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script type="text/javascript">
    var isManual = false;
    $(function () {
        //判断模组号是否为空
        if ($("#ModuleGroupNum").val() == "") {
            //读取规则模组号
            axios.post('/Packagings/SelectModule', { ordenum: $("#OrderNum").val() }).then(res => {
                //console.log(res.data);
                isManual = res.data.isManual;
                $("#ModuleGroupNum").val(res.data.mudule);
            }).catch(err => {
                console.warn("失败");
            });
        };
    });

    function editMudule() {
        let module = $("#ModuleGroupNum").val();
        if (module == "") {
            alert("模组号为空!");
        } else {
            if (isManual == true) {
                //记录模组号
                axios.post('/Appearances/UpdateMuduleFromCompleteAppearances', {
                    barcode: $("#BarCodesNum").val(),
                    modulenum: module,
                }).then(res => {
                    if (res.data.result == true) {
                        window.location = "/Appearances";
                    } else {
                        alert(res.data.message);
                    };
                    //console.log(res.data)
                }).catch(err => {
                    console.warn("连接失败");
                });
            } else {
                //使用json模组号
                axios.post('/Packagings/DelteMudole', {
                    ordenum: $("#OrderNum").val(),
                    num: module,
                }).then(res => {
                    if (res.data == "True") {
                        //记录模组号
                        $("#ModuleGroupNum").val(module);
                        axios.post('/Appearances/UpdateMuduleFromCompleteAppearances', {
                            barcode: $("#BarCodesNum").val(),
                            modulenum: module,
                        }).then(res => {
                            if (res.data.result == true) {
                                window.location = "/Appearances";
                            } else {
                                alert(res.data.message);
                            };
                        }).catch(err => {
                            console.warn("连接失败")
                        });
                    } else {
                        alert("模组规则表里找不到此模组号！")
                    };
                    //console.log(res.data)
                }).catch(err => {
                    console.warn("连接失败")
                });
            };
        };
    };

    $("input[type=checkbox]").click(() => {
        return false;
    });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
