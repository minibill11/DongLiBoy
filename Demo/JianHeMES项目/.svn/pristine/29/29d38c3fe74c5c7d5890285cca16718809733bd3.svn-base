using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace JianHeMES.Controllers
{
    public class KPIController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        // GET: KPI
        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "Index" });
            }
            return View();
        }

        // GET: KPI/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }

        // GET: KPI/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: KPI/Create
        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            try
            {
                // TODO: Add insert logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: KPI/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: KPI/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
        #region 直通率
        public class Temp
        {
            public string Name { get; set; }
            public string OrderNum { get; set; }
            public string JobContent { get; set; }
            public string BarCodesNum { get; set; }
            public string Group { get; set; }
            public bool Finish { get; set; }
            public int Passcount { get; set; }
            public int AbnormalCount { get; set; }
        }
        //各工序直通率查询首页
        public ActionResult GetPassThrough()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "GetPassThrough" });
            }
            return View();
        }


        //各工序直通率查询
        public ActionResult GetPassThrough2(string type, int year, int mouth, string ordernum)
        {
            var orderlist = new List<string>();
            if (!string.IsNullOrEmpty(ordernum))
            {
                orderlist.Add(ordernum);
            }
            else
            {
                var info = db.OrderMgm.Where(c => c.PlatformType == type).ToList();

                if (year != 0)
                {
                    info = info.Where(c => c.ContractDate.Year == year).ToList();
                }
                if (mouth != 0)
                {
                    info = info.Where(c => c.ContractDate.Month == mouth).ToList();

                }
                orderlist = info.Select(c => c.OrderNum).ToList();
            }
            JArray total = new JArray();
            JArray array = new JArray();
            JObject result = new JObject();
            result.Add("seaction", "模块段");
            //smt直通率
            var smt = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum)).Select(c => c.JobContent).Distinct().ToList();
            foreach (var jobcontent in smt)
            {
                JObject content = new JObject();
                var linenumlist = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum) && c.JobContent == jobcontent).Select(c => new Temp { Group = c.LineNum.ToString(), Passcount = c.NormalCount, AbnormalCount = c.AbnormalCount, Name = "SMT" }).Distinct().ToList();
                content = GetPassThroughitem(jobcontent, linenumlist);
                array.Add(content);
            }
            //AI直通率
            var ai = db.ModuleAI.Where(c => orderlist.Contains(c.Ordernum)).Select(c => new Temp { Group = c.Machine, Finish = c.IsAbnormal, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("AI", ai));
            //后焊直通率
            var group = db.AfterWelding.Where(c => orderlist.Contains(c.Ordernum)).Select(c => new Temp { Group = c.Group, Finish = c.IsAbnormal, BarCodesNum = c.ModuleBarcode }).ToList();

            array.Add(GetPassThroughitem("后焊", group));
            //后焊抽检直通率
            var groupSampl = db.AfterWelding.Where(c => orderlist.Contains(c.Ordernum) && c.IsSampling == true).Select(c => new Temp { Group = c.Group, Finish = c.SamplingResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("后焊抽检", groupSampl));
            //灌胶前电测
            var Electric1 = db.ElectricInspection.Where(c => orderlist.Contains(c.Ordernum) && c.Section == "灌胶前电检").Select(c => new Temp { Group = c.Group, Finish = c.ElectricInspectionResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("灌胶前电检", Electric1));
            //模块电测
            var Electric2 = db.ElectricInspection.Where(c => orderlist.Contains(c.Ordernum) && c.Section == "模块电检").Select(c => new Temp { Group = c.Group, Finish = c.ElectricInspectionResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("模块电检", Electric2));
            //模块送检
            var Electric3 = db.ElectricInspection.Where(c => orderlist.Contains(c.Ordernum) && c.Section == "模块电检" && c.IsSampling == true && c.ElectricInspectionResult == true).Select(c => new Temp { Group = c.Group, Finish = c.SamplingResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("模块送检", Electric3));
            //模块老化
            var burn = db.ModuleBurnIn.Where(c => orderlist.Contains(c.Ordernum) && c.BurnInEndTime != null).Select(c => new Temp { Group = c.Group, Finish = c.BurninResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("模块老化", burn));
            //模块老化送检
            var burnSampl = db.ModuleBurnIn.Where(c => orderlist.Contains(c.Ordernum) && c.BurnInEndTime != null && c.IsSampling == true && c.BurninResult == true
            ).Select(c => new Temp { Group = c.Group, Finish = c.SamplingResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("老化送检", burnSampl));
            //外观电检
            var Electric4 = db.ElectricInspection.Where(c => orderlist.Contains(c.Ordernum) && c.Section == "外观电检").Select(c => new Temp { Group = c.Group, Finish = c.ElectricInspectionResult, BarCodesNum = c.ModuleBarcode }).ToList();
            array.Add(GetPassThroughitem("外观电检", Electric4));

            result.Add("content", array);
            total.Add(result);
            result = new JObject();
            array = new JArray();
            result.Add("seaction", "模组段");
            //组装直通率
            var assemblessgrou = db.Assemble.Where(c => orderlist.Contains(c.OrderNum) && c.PQCCheckFT != null && c.RepetitionPQCCheck == false).Select(c => new Temp { Group = c.Group, BarCodesNum = c.BoxBarCode, Finish = c.PQCCheckFinish }).ToList();
            array.Add(GetPassThroughitem("组装", assemblessgrou));

            //FQC直通率
            var fqcgroup = db.FinalQC.Where(c => orderlist.Contains(c.OrderNum) && c.FQCCheckFT != null && c.RepetitionFQCCheck == false).Select(c => new Temp { Group = c.Group, BarCodesNum = c.BarCodesNum, Finish = c.FQCCheckFinish }).ToList();
            array.Add(GetPassThroughitem("FQC", fqcgroup));


            //老化直通率
            var burngroup = db.Burn_in.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).Select(c => new Temp { Group = c.Group, BarCodesNum = c.BarCodesNum, Finish = c.OQCCheckFinish }).ToList();
            array.Add(GetPassThroughitem("老化", burngroup));
            //校正直通率
            var calibgroup = db.CalibrationRecord.Where(c => orderlist.Contains(c.OrderNum) && c.FinishCalibration != null && c.RepetitionCalibration == false).Select(c => new Temp { Group = c.Group, BarCodesNum = c.BarCodesNum, Finish = c.Normal }).ToList();
            array.Add(GetPassThroughitem("校正", calibgroup));
            //外观直通率
            var appearangroup = db.Appearance.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).Select(c => new Temp { Group = c.Group, BarCodesNum = c.BarCodesNum, Finish = c.OQCCheckFinish }).ToList();
            array.Add(GetPassThroughitem("外观", appearangroup));
            result.Add("content", array);
            total.Add(result);

            return Content(JsonConvert.SerializeObject(total));
        }

        public JObject GetPassThroughitem(string name, List<Temp> temps)
        {
            JObject result = new JObject();
            result.Add("title", name);
            JArray array = new JArray();
            List<string> groupitem = temps.Select(c => c.Group).Distinct().ToList();
            groupitem = groupitem.OrderBy(c => c).ToList();
            foreach (var item in groupitem)
            {
                JObject obj = new JObject();
                if (temps.Count(c => c.Name == "SMT") != 0)
                {
                    obj.Add("group", item);
                    var totalinfo = temps.Where(c => c.Group == item).ToList();
                    var totalNum = totalinfo.Sum(c => c.AbnormalCount) + totalinfo.Sum(c => c.Passcount);
                    //直通率
                    var info = temps.Where(c => c.Group == item).Select(c => c.Passcount).ToList();
                    var passtrough = info.Sum();
                    obj.Add("passThrough", totalNum == 0 ? "-%" : Math.Round((double)passtrough * 100 / totalNum, 2) + "%");

                    //异常率
                    var info2 = temps.Where(c => c.Group == item).Select(c => c.AbnormalCount).ToList();
                    var abnormal = info2.Sum();
                    obj.Add("abnormal", totalNum == 0 ? "-%" : Math.Round((double)abnormal * 100 / totalNum, 2) + "%");

                    array.Add(obj);
                }
                else if (item == "")
                    continue;
                else if (string.IsNullOrEmpty(item))
                {
                    obj.Add("group", "没有班组");
                    int totalNum = temps.Count(c => c.Group == item || c.Group == "");
                    //合格率
                    var abnormal = temps.Where(c => (c.Group == item || c.Group == "") && c.Finish == false).Select(c => c.BarCodesNum).ToList();

                    //直通率
                    var pass = temps.Where(c => (c.Group == item || c.Group == "") && c.Finish == true).Count();

                    var info = temps.Where(c => (c.Group == item || c.Group == "") && c.Finish == true && !abnormal.Contains(c.BarCodesNum)).ToList();
                    var passtrough = info.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();

                    obj.Add("passThrough", totalNum == 0 ? "-%" : Math.Round((double)passtrough * 100 / totalNum, 2) + "%");
                    obj.Add("abnormal", totalNum == 0 ? "-%" : Math.Round((double)pass * 100 / totalNum, 2) + "%");

                    array.Add(obj);
                }
                else
                {
                    obj.Add("group", item);
                    int totalNum = temps.Count(c => c.Group == item);
                    //异常率
                    var abnormal = temps.Where(c => c.Group == item && c.Finish == false).Select(c => c.BarCodesNum).ToList();

                    var pass = temps.Where(c => (c.Group == item || c.Group == "") && c.Finish == true).Count();

                    //直通率
                    var info = temps.Where(c => c.Group == item && c.Finish == true && !abnormal.Contains(c.BarCodesNum)).ToList();
                    var passtrough = info.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    obj.Add("passThrough", totalNum == 0 ? "-%" : Math.Round((double)passtrough * 100 / totalNum, 2) + "%");
                    obj.Add("abnormal", totalNum == 0 ? "-%" : Math.Round((double)pass * 100 / totalNum, 2) + "%");

                    array.Add(obj);
                }
            }
            if (temps.Count(c => c.Name == "SMT") != 0)
            {
                //合计直通率
                JObject totalobj = new JObject();
                totalobj.Add("group", "合计");
                var total = temps.Sum(c => c.AbnormalCount) + temps.Sum(c => c.Passcount);
                var totalpasstrough = temps.Sum(c => c.Passcount);
                var totalabnormal = temps.Sum(c => c.AbnormalCount);

                totalobj.Add("passThrough", temps.Count == 0 ? "-%" : Math.Round((double)totalpasstrough * 100 / total, 2) + "%");

                //合计异常率
                totalobj.Add("abnormal", temps.Count == 0 ? "-%" : Math.Round((double)totalabnormal * 100 / total, 2) + "%");
                array.Add(totalobj);
            }
            else
            {
                //合计直通率
                JObject totalobj = new JObject();
                totalobj.Add("group", "合计");
                var totalabnormal = temps.Where(c => c.Finish == false).Select(c => c.BarCodesNum).ToList();
                var totalpasstrough = temps.Where(c => c.Finish == true && !totalabnormal.Contains(c.BarCodesNum)).GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                totalobj.Add("passThrough", temps.Count == 0 ? "-%" : Math.Round((double)totalpasstrough * 100 / temps.Count, 2) + "%");
                var pass = temps.Where(c => c.Finish == true).Count();
                //合计异常率
                totalobj.Add("abnormal", temps.Count == 0 ? "-%" : Math.Round((double)pass * 100 / temps.Count, 2) + "%");
                array.Add(totalobj);
            }
            result.Add("array", array);
            return result;
        }

        [HttpPost]
        public ActionResult GetPassThrough(string type, int year, int mouth, bool week, int day, string ordernum)
        {
            var orderlist = new List<string>();
            if (!string.IsNullOrEmpty(ordernum))
            {
                orderlist.Add(ordernum);
            }
            else
            {
                var info = db.OrderMgm.Where(c => c.PlatformType == type).ToList();
                if (week)
                {
                    var starttime = new DateTime(year, mouth, day);
                    var endtime = starttime.AddDays(7);
                    info = info.Where(c => c.ContractDate >= starttime && c.ContractDate <= endtime).ToList();
                }
                else
                {
                    if (year != 0)
                    {
                        info = info.Where(c => c.ContractDate.Year == year).ToList();
                    }
                    if (mouth != 0)
                    {
                        info = info.Where(c => c.ContractDate.Month == mouth).ToList();

                    }
                    if (day != 0)
                    {
                        info = info.Where(c => c.ContractDate.Day == day).ToList();
                    }
                }

                orderlist = info.Select(c => c.OrderNum).ToList();
            }
            JArray arr = new JArray();
            JObject obj = new JObject();
            //smt直通率
            var smt = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum)).Select(c => c.JobContent).Distinct().ToList();
            JArray smtarray = new JArray();
            foreach (var jobcontent in smt)
            {
                JObject content = new JObject();
                content.Add("jobname", jobcontent);
                JArray contenitem = new JArray();
                var linenumlist = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum) && c.JobContent == jobcontent).Select(c => c.LineNum).Distinct().ToList();
                foreach (var item in linenumlist)
                {
                    JObject smtitem = new JObject();
                    var smtinfo = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum) && c.JobContent == jobcontent && c.LineNum == item).ToList();
                    var total = smtinfo.Sum(c => c.NormalCount) + smtinfo.Sum(c => c.AbnormalCount);
                    var passcount = smtinfo.Sum(c => c.NormalCount);
                    var abnormal = smtinfo.Sum(c => c.AbnormalCount);
                    smtitem.Add("line", item);
                    smtitem.Add("passThrough", total == 0 ? "-%" : Math.Round((double)passcount * 100 / total, 2) + "%");
                    smtitem.Add("abnormal", total == 0 ? "-%" : Math.Round((double)abnormal * 100 / total, 2) + "%");
                    contenitem.Add(smtitem);
                }
                content.Add("content", contenitem);
                smtarray.Add(content);
            }
            obj.Add("smt", smtarray);
            //后焊直通率
            var group = db.AfterWelding.Where(c => orderlist.Contains(c.Ordernum)).Select(c => c.Group).Distinct().ToList();
            JArray afterArray = new JArray();
            foreach (var after in group)
            {
                if (after == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(after))
                {
                    var aftertotelcount = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum) && (c.Group == after || c.Group == ""));
                    var afterPassThrough = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum) && c.IsAbnormal == false && c.Group == after);
                    item.Add("group", "没有分配班组的数据");//组
                    item.Add("passThrough", aftertotelcount == 0 ? "-%" : Math.Round((double)afterPassThrough / aftertotelcount, 2) + "%");
                }
                else
                {
                    var aftertotelcount = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum) && c.Group == after);
                    var afterPassThrough = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum) && c.IsAbnormal == false && c.Group == after);
                    item.Add("group", after);//组
                    item.Add("passThrough", aftertotelcount == 0 ? "-%" : Math.Round((double)afterPassThrough / aftertotelcount, 2) + "%");
                }
                afterArray.Add(item);
            }
            obj.Add("after", afterArray);
            //组装直通率
            var assemblessgrou = db.Assemble.Where(c => orderlist.Contains(c.OrderNum) && c.PQCCheckFT != null && c.RepetitionPQCCheck == false).Select(c => c.Group).Distinct().ToList();
            JArray assmebless = new JArray();
            foreach (var assembless in assemblessgrou)
            {
                if (assembless == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(assembless))
                {
                    var assemblesscount = db.Assemble.Where(c => orderlist.Contains(c.OrderNum) && c.PQCCheckFT != null && c.RepetitionPQCCheck == false && (c.Group == assembless || c.Group == "")).ToList();
                    var assemblesstotal = assemblesscount.Select(c => c.BoxBarCode).Distinct().Count();
                    var assemblessPasscount = assemblesscount.GroupBy(c => c.BoxBarCode).Where(c => c.Count() < 2).ToList().Count();
                    var assemblessAbnormal = assemblesscount.Where(c => c.PQCCheckFinish == false).Count();
                    item.Add("group", "没有分配班组的数据");
                    item.Add("passThrough", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessPasscount * 100 / assemblesstotal, 2) + "%");
                    item.Add("abnormal", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessAbnormal * 100 / assemblesstotal, 2) + "%");
                }
                else
                {
                    var assemblesscount = db.Assemble.Where(c => orderlist.Contains(c.OrderNum) && c.PQCCheckFT != null && c.RepetitionPQCCheck == false && c.Group == assembless).ToList();
                    var assemblesstotal = assemblesscount.Select(c => c.BoxBarCode).Distinct().Count();
                    var assemblessPasscount = assemblesscount.GroupBy(c => c.BoxBarCode).Where(c => c.Count() < 2).ToList().Count();
                    var assemblessAbnormal = assemblesscount.Where(c => c.PQCCheckFinish == false).Count();
                    item.Add("group", assembless);
                    item.Add("passThrough", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessPasscount * 100 / assemblesstotal, 2) + "%");
                    item.Add("abnormal", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessAbnormal * 100 / assemblesstotal, 2) + "%");
                }
                assmebless.Add(item);
            }
            obj.Add("assemble", assmebless);

            //FQC直通率
            var fqcgroup = db.FinalQC.Where(c => orderlist.Contains(c.OrderNum) && c.FQCCheckFT != null && c.RepetitionFQCCheck == false).Select(c => c.Group).Distinct().ToList();
            JArray fqcarray = new JArray();
            foreach (var fqcitem in fqcgroup)
            {
                if (fqcitem == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(fqcitem))
                {
                    var FQCcount = db.FinalQC.Where(c => orderlist.Contains(c.OrderNum) && c.FQCCheckFT != null && c.RepetitionFQCCheck == false && (c.Group == fqcitem || c.Group == "")).ToList();
                    var FQCtotal = FQCcount.Select(c => c.BarCodesNum).Distinct().Count();
                    var FQCPasscount = FQCcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var FQCAbnormal = FQCcount.Where(c => c.FQCCheckFinish == false).Count();
                    item.Add("group", "没有分配班组的数据");
                    item.Add("passThrough", FQCtotal == 0 ? "-%" : Math.Round((double)FQCPasscount * 100 / FQCtotal, 2) + "%");
                    item.Add("abnormal", FQCtotal == 0 ? "-%" : Math.Round((double)FQCAbnormal * 100 / FQCtotal, 2) + "%");
                }
                else
                {
                    var FQCcount = db.FinalQC.Where(c => orderlist.Contains(c.OrderNum) && c.FQCCheckFT != null && c.RepetitionFQCCheck == false && c.Group == fqcitem).ToList();
                    var FQCtotal = FQCcount.Select(c => c.BarCodesNum).Distinct().Count();
                    var FQCPasscount = FQCcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var FQCAbnormal = FQCcount.Where(c => c.FQCCheckFinish == false).Count();
                    item.Add("group", fqcitem);
                    item.Add("passThrough", FQCtotal == 0 ? "-%" : Math.Round((double)FQCPasscount * 100 / FQCtotal, 2) + "%");
                    item.Add("abnormal", FQCtotal == 0 ? "-%" : Math.Round((double)FQCAbnormal * 100 / FQCtotal, 2) + "%");
                }
                fqcarray.Add(item);
            }
            obj.Add("fqc", fqcarray);
            //老化直通率
            var burngroup = db.Burn_in.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).Select(c => c.Group).Distinct().ToList();
            JArray burnArray = new JArray();
            foreach (var burnitem in burngroup)
            {
                if (burnitem == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(burnitem))
                {
                    var burncount = db.Burn_in.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null && (c.Group == burnitem || c.Group == "")).ToList();
                    var burntotal = burncount.Select(c => c.BarCodesNum).Distinct().Count();
                    var burnPasscount = burncount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var burnAbnormal = burncount.Where(c => c.OQCCheckFinish == false).Count();
                    item.Add("group", "没有分配班组的数据");
                    item.Add("passThrough", burntotal == 0 ? "-%" : Math.Round((double)burnPasscount * 100 / burntotal, 2) + "%");
                    item.Add("abnormal", burntotal == 0 ? "-%" : Math.Round((double)burnAbnormal * 100 / burntotal, 2) + "%");
                }
                else
                {
                    var burncount = db.Burn_in.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null && c.Group == burnitem).ToList();
                    var burntotal = burncount.Select(c => c.BarCodesNum).Distinct().Count();
                    var burnPasscount = burncount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var burnAbnormal = burncount.Where(c => c.OQCCheckFinish == false).Count();
                    item.Add("group", burnitem);
                    item.Add("passThrough", burntotal == 0 ? "-%" : Math.Round((double)burnPasscount * 100 / burntotal, 2) + "%");
                    item.Add("abnormal", burntotal == 0 ? "-%" : Math.Round((double)burnAbnormal * 100 / burntotal, 2) + "%");
                }
                burnArray.Add(item);

            }
            obj.Add("burnin", burnArray);
            //校正直通率
            var calibgroup = db.CalibrationRecord.Where(c => orderlist.Contains(c.OrderNum) && c.FinishCalibration != null && c.RepetitionCalibration == false).Select(c => c.Group).Distinct().ToList();
            JArray calibArray = new JArray();
            foreach (var calibitem in calibgroup)
            {
                if (calibitem == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(calibitem))
                {
                    var calibcount = db.CalibrationRecord.Where(c => orderlist.Contains(c.OrderNum) && c.FinishCalibration != null && c.RepetitionCalibration == false && (c.Group == calibitem || c.Group == "")).ToList();
                    var calibtotal = calibcount.Select(c => c.BarCodesNum).Distinct().Count();
                    var calibPasscount = calibcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var calibAbnormal = calibcount.Where(c => c.Normal == false).Count();
                    item.Add("group", "没有分配班组的数据");
                    item.Add("passThrough", calibtotal == 0 ? "-%" : Math.Round((double)calibPasscount * 100 / calibtotal, 2) + "%");
                    item.Add("abnormal", calibtotal == 0 ? "-%" : Math.Round((double)calibAbnormal * 100 / calibtotal, 2) + "%");
                }
                else
                {
                    var calibcount = db.CalibrationRecord.Where(c => orderlist.Contains(c.OrderNum) && c.FinishCalibration != null && c.RepetitionCalibration == false && c.Group == calibitem).ToList();
                    var calibtotal = calibcount.Select(c => c.BarCodesNum).Distinct().Count();
                    var calibPasscount = calibcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var calibAbnormal = calibcount.Where(c => c.Normal == false).Count();
                    item.Add("group", calibitem);
                    item.Add("passThrough", calibtotal == 0 ? "-%" : Math.Round((double)calibPasscount * 100 / calibtotal, 2) + "%");
                    item.Add("abnormal", calibtotal == 0 ? "-%" : Math.Round((double)calibAbnormal * 100 / calibtotal, 2) + "%");
                }
                calibArray.Add(item);
            }
            obj.Add("calibration", calibArray);
            //外观直通率
            var appearangroup = db.Appearance.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).Select(c => c.Group).Distinct().ToList();
            JArray appearanArray = new JArray();
            foreach (var appearanitem in appearangroup)
            {
                if (appearanitem == "")
                    continue;
                JObject item = new JObject();
                if (string.IsNullOrEmpty(appearanitem))
                {
                    var appearancount = db.Appearance.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null && (c.Group == appearanitem || c.Group == "")).ToList();
                    var appearantotal = appearancount.Select(c => c.BarCodesNum).Distinct().Count();
                    var appearanPasscount = appearancount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var appearanAbnormal = appearancount.Where(c => c.OQCCheckFinish == false).Count();
                    item.Add("group", "没有分配班组的数据");
                    item.Add("passThrough", appearantotal == 0 ? "-%" : Math.Round((double)appearanPasscount * 100 / appearantotal, 2) + "%");
                    item.Add("abnormal", appearantotal == 0 ? "-%" : Math.Round((double)appearanAbnormal * 100 / appearantotal, 2) + "%");
                }
                else
                {
                    var appearancount = db.Appearance.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null && c.Group == appearanitem).ToList();
                    var appearantotal = appearancount.Select(c => c.BarCodesNum).Distinct().Count();
                    var appearanPasscount = appearancount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
                    var appearanAbnormal = appearancount.Where(c => c.OQCCheckFinish == false).Count();
                    item.Add("group", appearanitem);
                    item.Add("passThrough", appearantotal == 0 ? "-%" : Math.Round((double)appearanPasscount * 100 / appearantotal, 2) + "%");
                    item.Add("abnormal", appearantotal == 0 ? "-%" : Math.Round((double)appearanAbnormal * 100 / appearantotal, 2) + "%");
                }
                appearanArray.Add(item);
            }
            obj.Add("appearance", appearanArray);
            arr.Add(obj);
            return Content(JsonConvert.SerializeObject(arr));
        }
        [HttpPost]
        //通过年月,找到当月有几个周
        public ActionResult GetWeek(int year, int mouth)
        {
            var time = new DateTime(year, mouth, 1);
            var lastday = DateTime.DaysInMonth(year, mouth);
            var index = (int)time.DayOfWeek == 0 ? 7 : (int)time.DayOfWeek;//当月1号是星期几
            var firstweekLastday = 7 - index + 1;//得到第一周的最后一天
            var week = Math.Ceiling((decimal)(lastday - firstweekLastday) / 7) + 1;
            JArray result = new JArray();
            for (var i = 1; i <= week; i++)
            {
                JObject List = new JObject();
                List.Add("value", i);
                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //平台列表
        public ActionResult GetPassThroughType()
        {
            var type = db.OrderMgm.Select(c => c.PlatformType).Distinct().ToList();
            JArray result = new JArray();
            foreach (var item in type)
            {
                JObject List = new JObject();
                List.Add("value", item);
                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }
        #endregion

        #region--7S

        #region--页面       
        public ActionResult KPI_7S_Summarizing()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "KPI_7S_Summarizing" });
            }
            return View();
        }

        public ActionResult KPI_7S_GradeStandardQuery()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "KPI_7S_GradeStandardQuery" });
            }
            return View();
        }
        public ActionResult KPI_7S_GradeStandardInput()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "KPI_7S_GradeStandardInput" });
            }
            return View();
        }

        public ActionResult KPI_7S_RegionQuery()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "KPI_7S_RegionQuery" });
            }
            return View();
        }
        public ActionResult KPI_7S_RegionInput()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "KPI_7S_RegionInput" });
            }
            return View();
        }
        #endregion

        #region---检查参考标准

        #region--检查参考标准数据录入   
        [HttpPost]
        public ActionResult ReferenceStandard_Input(List<KPI_7S_ReferenceStandard> record)
        {
            if (record.Count > 0)
            {
                int savecout = 0;
                string str = "";
                foreach (var item in record)
                {
                    //检验记录是否存在
                    if (db.KPI_7S_ReferenceStandard.Count(c => c.PointsType == item.PointsType && c.ReferenceStandard == item.ReferenceStandard) > 0)
                    {
                        str = str == "" ? str += item.ReferenceStandard : str += "、" + item.ReferenceStandard;
                    }
                }
                if (str == "") {
                    foreach (var i in record)
                    {
                        i.InputTime = DateTime.Now;
                        i.InputPerson = ((Users)Session["User"]).UserName;
                        db.SaveChanges();
                    }
                    db.KPI_7S_ReferenceStandard.AddRange(record);
                    savecout += db.SaveChanges();
                }               
                if (savecout == record.Count()) return Content("保存成功！");
                else return Content("评分标准项为：" + str + "的记录已存在，保存失败！");
            }
            else return Content("传入参数为空！");
        }
        #endregion

        #region--检查参考标准查询
        [HttpPost]
        public ActionResult ReferenceStandard_query(string[] pointsType)
        {
            List<KPI_7S_ReferenceStandard> newList = new List<KPI_7S_ReferenceStandard>();
            var record = db.KPI_7S_ReferenceStandard.ToList();
            if (pointsType != null)
            {
                foreach (var item in pointsType)
                {
                    var list = record.Where(c => c.PointsType == item).ToList();
                    newList = newList.Concat(list).ToList();
                }
            }
            if (newList.Count > 0) return Content(JsonConvert.SerializeObject(newList));
            else return Content("无数据!");
        }
        #endregion

        #region--检查参考标准修改
        [HttpPost]
        public ActionResult ReferenceStandard_modify(int id, string pointsType, string referenceStandard)
        {
            if (id != 0 && !String.IsNullOrEmpty(pointsType) && !String.IsNullOrEmpty(referenceStandard))
            {
                var record = db.KPI_7S_ReferenceStandard.Where(c => c.Id == id).FirstOrDefault();
                record.PointsType = pointsType;
                record.ReferenceStandard = referenceStandard;
                record.ModifyPerson = ((Users)Session["User"]).UserName;
                record.ModifyTime = DateTime.Now;
                int count = db.SaveChanges();
                if (count > 0) return Content("修改成功！");
                else return Content("修改失败！");
            }
            else return Content("传入参数为空");
        }
        #endregion

        #region--检查参考标准删除
        [HttpPost]
        public ActionResult ReferenceStandard_delete(int id)
        {
            var removeList = db.KPI_7S_ReferenceStandard.Where(c => c.Id == id).ToList();
            UserOperateLog operaterecord = new UserOperateLog();
            operaterecord.OperateDT = DateTime.Now;
            operaterecord.Operator = "123";
            operaterecord.OperateRecord = operaterecord.Operator + "在" + operaterecord.OperateDT + "删除了7S扣分类型为：" + removeList.FirstOrDefault().PointsType + "的扣分参照标准项,标准项为：" + removeList.FirstOrDefault().ReferenceStandard + "记录Id为：" + removeList.FirstOrDefault().Id + ".";
            db.KPI_7S_ReferenceStandard.RemoveRange(removeList);
            db.UserOperateLog.Add(operaterecord);//保存删除日志
            int count = db.SaveChanges();
            if (count > 0) return Content("删除成功！");
            else return Content("删除失败！");
        }
        #endregion

        #endregion
       
        #endregion
    }
}
