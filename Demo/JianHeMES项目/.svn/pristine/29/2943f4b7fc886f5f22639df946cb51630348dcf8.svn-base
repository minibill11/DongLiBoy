
@{
    ViewBag.Title = "TestSignalR";
}
<h2>TestSignalR</h2>
<div>
    内容
    <div id="contents">

    </div>
    <br />
    <hr />
    <br />
    <button id="send">发送</button>
    <ul></ul>
</div>
<br />
<hr />
<br />
<h2>Chat</h2>
<div class="container">
   用户名： <input type="text" id="displayname" /> <br>
    信息：<input type="text" id="message" /><br>
    <input type="button" id="sendmessage" value="Send" />
    @*<input type="hidden" id="displayname" />*@
    <ul id="discussion"></ul>
</div>



@section scripts {
    @*<script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
        <script src="~/signalr/hubs"></script>
        <script>
            $(function () {
                var mypush = $.connection.Hub1;
                mypush.client.sendTH1 = function (TH1_json) {
                    console.log(TH1_json);
                };
                $.connection.hub.start();
            });
        </script>*@

    @*<script src="~/Scripts/jquery-1.11.3.min.js"></script>*@
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        //$(function () {
        //    var mypush = $.connection.Hub1;
        //    mypush.client.sendTH1 = function (TH1_json) {
        //        console.log(TH1_json);
        //    };
        //    $.connection.hub.start();
        //});


        //$(function () {
        //    console.log("here1");

        //    var transport = signalR.TransportType.WebSockets; //连接类型
        //    var connection = new signalR.HubConnection(`http://localhost:18863/signalr/TestHu`, { transport: transport }); //创建连接对象
        //    connection.start(); //打开连接
        //    console.log("here1");
        //    //注册客户端方法
        //    connection.on("test", function (msg) {
        //        $("#contents").append("<li>" + msg + "</li>");
        //    });
        //    //调用服务端方法
        //    $("#send").click(function () {
        //        var data = "abc";
        //        connection.invoke("test", data);
        //    });
        //});

        //$(function () {
        //    // Reference the auto-generated proxy for the hub.  
        //    var chat = $.connection.TestHub;
        //    // Create a function that the hub can call back to display messages.
        //    chat.client.addNewMessageToPage = function (name, message) {
        //        // Add the message to the page. 
        //        $('#discussion').append('<li><strong>' + htmlEncode(name)
        //            + '</strong>: ' + htmlEncode(message) + '</li>');
        //    };
        //    // Get the user name and store it to prepend to messages.
        //    $('#displayname').val(prompt('Enter your name:', ''));
        //    // Set initial focus to message input box.  
        //    $('#message').focus();
        //    // Start the connection.
        //    $.connection.hub.start().done(function () {
        //        $('#sendmessage').click(function () {
        //            // Call the Send method on the hub. 
        //            chat.server.send($('#displayname').val(), $('#message').val());
        //            // Clear text box and reset focus for next comment. 
        //            $('#message').val('').focus();
        //        });
        //    });
        //});
        //// This optional function html-encodes messages for display in the page.
        //function htmlEncode(value) {
        //    var encodedValue = $('<div />').text(value).html();
        //    return encodedValue;
        //}


        ////下面SignalR连接成功，方法调用未成功
        //$(function () {
        //    var connection = $.connection.TestHub;
        //    console.log(connection);
        //    connection.socket.url
        //    console.log(connection);
        //    connection.client.addNewMessageToPage = function (name, message) {
        //        $('#discussion').append('<li><strong>' + htmlEncode(name)
        //            + '</strong>: ' + htmlEncode(message) + '</li>');
        //    };
        //    console.log('这里');
        //    $.connection.hub.start()
        //        .done(function () {
        //            alert("Connected");
        //        })
        //        .fail(function () { alert("Connection failed!"); });
        //    console.log('这里1');


        //    //注册客户端方法
        //    connection.on("test", function (msg) {
        //        $("#contents").append("<li>" + msg + "</li>");
        //    });
        //    //调用服务端方法core
        //    $("#send").click(function () {
        //        //var data = "{'abc':'def'}";
        //        connection.server.send($('#displayname').val(), $('#message').val()).done(function () {
        //            alert("send（" + $('#displayname').val() + "," + $('#message').val()+")完成");
        //        });
        //        connection.server.serverShow(data)
        //            .done(function () { alert("成功"); })
        //            .fail(function () { alert("失败"); });
        //        console.log('这里2');
        //    });

        //下面方法一切正常
        $(function () {
            var chat = $.connection.chatHub;
            console.log('这里');
            chat.client.addNewMessageToPage = function (name, message) {
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };

            chat.client.welcome = function (data) {
                //当后台触发了Hello方法的时候会进行回调当前事件
                alert(data);
            }

            $('#displayname').val(prompt('Enter your name:', ''));//赋予displayname输入的名字
            $('#message').focus();
            $.connection.hub.start().done(function () {
                //alert("Connected");
                chat.server.hello(); //连接创建成功后台进行回调
                $('#sendmessage').click(function () {
                    chat.server.send($('#displayname').val(), $('#message').val());
                    $('#message').val('').focus();
                });
            }).fail(function () { alert("Connection failed!"); });
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>

}