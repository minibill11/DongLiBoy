@{
    ViewBag.Title = "工序产能首页";
}
<link href="~/Content/styleFile/packaging/index.css" rel="stylesheet" />
<script src="~/Content/styleFile/packaging/index.js"></script>
<link href="~/Content/styleFile/processCapacity/indexStyle.css" rel="stylesheet" />
<style>
    .container, .body-content {
        width: 96vw;
    }
</style>
<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            <h2>@ViewBag.Title</h2>
        </el-header>
        <el-main v-loading="loading">
            <el-row class="text-center">
                <a href="/Process_Capacity/index2" style="float:left;"><el-button type="primary" size="small" plain>录入信息</el-button></a>
                @*查询框*@
                @RenderPage("_summaryQuery.cshtml")
            </el-row>
            <el-row>
                <file-statu-table ref="statuRef" :statu="queryTable.statu" :ispower="limitsRole[3]"></file-statu-table>
            </el-row>
            <el-row class="text-center">
                @*主表*@
                @RenderPage("_summaryTable.cshtml")
            </el-row>
        </el-main>
    </el-container>
</div>
@RenderPage("~/Views/Shared/_SelectInput.cshtml")
@RenderPage("_fileStatuTable.cshtml")
@RenderPage("_chart.cshtml")
<script>
    var app = new Vue({
        el: "#app",
        data: {
            loading: false,
            tableList: [],
            filterResult: [],
            queryTable: {
                protype: "",
                proplatform: "",
                statu: ""
            },
            options: {
                protype: [],
                proplatform: [],
                statu: [{ value: '未审核' }, { value: '审核未通过' }, { value: '审核通过' }, { value: '未批准' }, { value: '批准未通过' }, { value: '批准通过' },]
            },
            //权限列表 和 是否拥有权限
            limitsList: {},
            limitsRole: {},
            //定时器
            pollingTimer: "",
        },
        created: function () {
            this.limitsList = JSON.parse(localStorage.getItem("rigths"));
            this.getProtype();
            this.getPlatfrom();

            //获取权限
            //1、新建平台 ，2、上传文件和编辑 ， 3、查看附表 ， 4、上传PDF和图片 ， 5、审核附表 ，6、批准附表 ，7、受控附表
            this.limitsRole = {
                1: this.checkRoles("新建平台"),
                2: this.checkRoles("上传文件和编辑"),
                3: this.checkRoles("查看附表"),
                4: this.checkRoles("上传PDF和图片"),
                5: this.checkRoles("审核附表"),
                6: this.checkRoles("批准附表"),
                7: this.checkRoles("受控附表"),
            };
        },
        methods: {
            //总表数据轮询
            getTableData() {
                axios.post('/Process_Capacity/TotalProcess_CapacityOnlyRead', {
                    type: '',
                    platform: ''
                }).then(res => {
                    //console.log(JSON.parse(JSON.stringify(res.data)));
                    this.tableList = res.data;
                    this.filterList();
                }).catch(err => {
                    console.warn("获取数据失败")
                });
            },
            //总表条件查询
            onQuerySubmit() {
                this.loading = true;
                axios.post('/Process_Capacity/TotalProcess_CapacityOnlyRead', {
                    type: '',
                    platform: ''
                }).then(res => {
                    console.log(JSON.parse(JSON.stringify(res.data)));
                    this.tableList = res.data;
                    this.filterResult = res.data;
                    this.loading = false;
                    this.$message.success('查询成功！');
                }).catch(err => {
                    console.warn("查询数据失败");
                    this.loading = false;
                });
            },
            //型号下拉列表
            getProtype() {
                axios.post('/Process_Capacity/TypeList').then(res => {
                    //console.log(res.data);
                    this.options.protype = res.data;
                }).catch(err => {
                    console.warn("型号列表获取失败");
                });
            },
            //平台下拉列表
            getPlatfrom() {
                axios.post('/Process_Capacity/DisplayPlatfromFromType', { type: '' }).then(res => {
                    //console.log(res.data);
                    this.options.proplatform = res.data;
                }).catch(err => {
                    console.warn("型号列表获取失败");
                });
            },
            //权限筛选
            checkRoles(roleName) {   //检测权限
                let list = this.limitsList;
                if (list && roleName) {
                    for (let item in list) {
                        if (list[item] == roleName) {
                            return true;
                        };
                    };
                };
                return false;
            },
            //计时器
            monitorTimer() {
                this.pollingTimer = setInterval(() => {
                    this.getTableData();
                }, 30000);
            },
            //监听
            watchPlatform(v) {
                this.filterList();
            },
            watchType(v) {
                this.filterList();
            },
            //过滤
            filterList() {
                let array = this.tableList, arr1 = this.queryTable.proplatform, arr2 = this.queryTable.protype, thisArr1, thisArr2;
                thisArr1 = array.filter(function (val) {
                    if (arr1 == null || arr1 == "") {
                        return val;
                    } else {
                        for (let i of arr1) {
                            if (val.Platform.toLowerCase().indexOf(i.toLowerCase()) > -1) {
                                return val;
                            };
                        };
                    };
                });
                thisArr2 = thisArr1.filter(function (val) {
                    if (arr2 == null || arr2 == "") {
                        return val;
                    } else {
                        for (let i of arr2) {
                            if (val.Type.toLowerCase().indexOf(i.toLowerCase()) > -1) {
                                return val;
                            };
                        };
                    };
                });
                this.filterResult = thisArr2;
            },
            //高度获取
            //小合计
            sectionTotal(row, section, name) {
                let count = 0, nullnum = 0, sectionnum = 0, maxmin = { ic1: 0, ic2: 0, light1: 0, light2: 0 };
                for (let s of row[section]) {
                    sectionnum += s.content.length;
                    for (let n of s.content) {
                        //最大最小贴片的值
                        if (section == 'SMT' && name == 'StandardTotal' && s.name === '贴片') {
                            switch (n.seaction) {
                                case 'IC最大': maxmin.ic1 = n[name]; break;
                                case 'IC最小': maxmin.ic2 = n[name]; break;
                                case '灯面最大': maxmin.light1 = n[name]; break;
                                case '灯面最大': maxmin.light2 = n[name]; break;
                            };
                        };
                        //累计
                        if (n[name] === '/') {
                            nullnum += 1;
                            count += 0;
                        } else {
                            count += n[name];
                        };
                    };
                };

                //最大最小贴片的值,2个值取其中一个值较小的
                if (section == 'SMT' && name == 'StandardTotal') {
                    count -= (maxmin.ic1 >= maxmin.ic2) ? maxmin.ic1 : maxmin.ic2;
                    count -= (maxmin.light1 >= maxmin.light2) ? maxmin.light1 : maxmin.light2;
                };

                //若值全为 / ，合计不显示0，显示/
                if (nullnum === sectionnum) {
                    return '/';
                };
                //判断显示的小数
                let x = String(count).indexOf(".") + 1, length = String(count).length - x;
                if (x > 0) {
                    if (name == 'StandardTotal') {
                        return count.toFixed(0);
                    } else {
                        if (length > 2) {
                            return count.toFixed(2);
                        } else {
                            return count;
                        };
                    };
                } else {
                    return count;
                };
            },
            //总合计
            allTotal(row) {

            }
        },
        mounted: function () {
            this.queryTable.statu = '未审核';
            this.onQuerySubmit();
            this.monitorTimer();
        }
    });
</script>