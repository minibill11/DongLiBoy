using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace JianHeMES.Controllers
{
    public class KPIController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        // GET: KPI
        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "KPI", act = "Index" });
            }
            return View();
        }

        // GET: KPI/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }

        // GET: KPI/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: KPI/Create
        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            try
            {
                // TODO: Add insert logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: KPI/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: KPI/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        //各工序直通率查询
        public ActionResult GetPassThrough(string type, int year, int mouth, int week, int day)
        {
            var info = db.OrderMgm.Where(c => c.PlatformType == type).ToList();
            if (year != 0)
            {
                info = info.Where(c => c.ContractDate.Year == year).ToList();
            }
            if (mouth != 0)
            {
                info = info.Where(c => c.ContractDate.Month == mouth).ToList();

            }
            if (week != 0)
            {
                var time = new DateTime(year, mouth, 1);
                var lastday = DateTime.DaysInMonth(year, mouth);
                var index = (int)time.DayOfWeek == 0 ? 7 : (int)time.DayOfWeek;//当月1号是星期几
                var firstweekLastday = 7 - index + 1;//得到第一周的最后一天
                int starttime = 0;
                int endtiem = 0;
                if (week == 1)
                {
                    starttime = 1;
                    endtiem = firstweekLastday;
                }
                else
                {
                    starttime = 1 + firstweekLastday + (week - 2) * 7;
                    endtiem = 7 + firstweekLastday + (week - 2) * 7;
                    if (endtiem > lastday)//如果算出的最后一天大于当月最后一天,则返回当月最后一天
                        endtiem = lastday;
                }
                info = info.Where(c => c.ContractDate.Day >= starttime && c.ContractDate.Day <= endtiem).ToList();
            }
            if (day != 0)
            {
                info = info.Where(c => c.ContractDate.Day == day).ToList();
            }
            var orderlist = info.Select(c => c.OrderNum).ToList();
            JObject obj = new JObject();
            //smt直通率
            var smt = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum)).Select(c => c.JobContent).Distinct();
            JArray smtarray = new JArray();
            foreach (var jobcontent in smt)
            {
                JObject smtitem = new JObject();
                var smtinfo = db.SMT_ProductionData.Where(c => orderlist.Contains(c.OrderNum) && c.JobContent == jobcontent).ToList();
                var total = smtinfo.Sum(c => c.NormalCount) + smtinfo.Sum(c => c.AbnormalCount);
                var passcount = smtinfo.Sum(c => c.NormalCount);
                var abnormal = smtinfo.Sum(c => c.AbnormalCount);
                smtitem.Add("jobconten", jobcontent);
                smtitem.Add("PassThrough", total == 0 ? "-%" : Math.Round((double)passcount * 100 / total, 2) + "%");
                smtitem.Add("Abnormal", total == 0 ? "-%" : Math.Round((double)abnormal * 100 / total, 2) + "%");
                smtarray.Add(smtitem);
            }
            obj.Add("smtPassThrough", smtarray);
            //后焊直通率
            var aftertotelcount = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum));
            var afterPassThrough = db.AfterWelding.Count(c => orderlist.Contains(c.Ordernum) && c.IsAbnormal == false);
            obj.Add("afterPassThrough", aftertotelcount == 0 ? "-%" : Math.Round((double)afterPassThrough / aftertotelcount, 2) + "%");
            //组装直通率
            var assemblesscount = db.Assemble.Where(c => orderlist.Contains(c.OrderNum) && c.PQCCheckFT != null && c.RepetitionPQCCheck == false).ToList();
            var assemblesstotal = assemblesscount.Select(c => c.BoxBarCode).Distinct().Count();
            var assemblessPasscount = assemblesscount.GroupBy(c => c.BoxBarCode).Where(c => c.Count() < 2).ToList().Count();
            var assemblessAbnormal = assemblesscount.Where(c => c.PQCCheckFinish == false).Count();
            obj.Add("assemblessPassThrough", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessPasscount * 100 / assemblesstotal, 2) + "%");
            obj.Add("assemblessAbnormal", assemblesstotal == 0 ? "-%" : Math.Round((double)assemblessAbnormal * 100 / assemblesstotal, 2) + "%");
            //FQC直通率
            var FQCcount = db.FinalQC.Where(c => orderlist.Contains(c.OrderNum) && c.FQCCheckFT != null && c.RepetitionFQCCheck == false).ToList();
            var FQCtotal = FQCcount.Select(c => c.BarCodesNum).Distinct().Count();
            var FQCPasscount = FQCcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
            var FQCAbnormal = FQCcount.Where(c => c.FQCCheckFinish == false).Count();
            obj.Add("FQCPassThrough", FQCtotal == 0 ? "-%" : Math.Round((double)FQCPasscount * 100 / FQCtotal, 2) + "%");
            obj.Add("FQCAbnormal", FQCtotal == 0 ? "-%" : Math.Round((double)FQCAbnormal * 100 / FQCtotal, 2) + "%");
            //老化直通率
            var burncount = db.Burn_in.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).ToList();
            var burntotal = burncount.Select(c => c.BarCodesNum).Distinct().Count();
            var burnPasscount = burncount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
            var burnAbnormal = burncount.Where(c => c.OQCCheckFinish == false).Count();
            obj.Add("burnPassThrough", burntotal == 0 ? "-%" : Math.Round((double)burnPasscount * 100 / burntotal, 2) + "%");
            obj.Add("burnAbnormal", burntotal == 0 ? "-%" : Math.Round((double)burnAbnormal * 100 / burntotal, 2) + "%");
            //校正直通率
            var calibcount = db.CalibrationRecord.Where(c => orderlist.Contains(c.OrderNum) && c.FinishCalibration != null && c.RepetitionCalibration == false).ToList();
            var calibtotal = calibcount.Select(c => c.BarCodesNum).Distinct().Count();
            var calibPasscount = calibcount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
            var calibAbnormal = calibcount.Where(c => c.Normal == false).Count();
            obj.Add("calibPassThrough", calibtotal == 0 ? "-%" : Math.Round((double)calibPasscount * 100 / calibtotal, 2) + "%");
            obj.Add("calibAbnormal", calibtotal == 0 ? "-%" : Math.Round((double)calibAbnormal * 100 / calibtotal, 2) + "%");
            //外观直通率
            var appearancount = db.Appearance.Where(c => orderlist.Contains(c.OrderNum) && c.OQCCheckFT != null).ToList();
            var appearantotal = appearancount.Select(c => c.BarCodesNum).Distinct().Count();
            var appearanPasscount = appearancount.GroupBy(c => c.BarCodesNum).Where(c => c.Count() < 2).ToList().Count();
            var appearanAbnormal = appearancount.Where(c => c.OQCCheckFinish == false).Count();
            obj.Add("appearanPassThrough", appearantotal == 0 ? "-%" : Math.Round((double)appearanPasscount * 100 / appearantotal, 2) + "%");
            obj.Add("appearanAbnormal", appearantotal == 0 ? "-%" : Math.Round((double)appearanAbnormal * 100 / appearantotal, 2) + "%");
            return Content(JsonConvert.SerializeObject(obj));
        }

        //通过年月,找到当月有几个周
        public ActionResult GetWeek(int year, int mouth)
        {
            var time = new DateTime(year, mouth, 1);
            var lastday = DateTime.DaysInMonth(year, mouth);
            var index = (int)time.DayOfWeek == 0 ? 7 : (int)time.DayOfWeek;//当月1号是星期几
            var firstweekLastday = 7 - index + 1;//得到第一周的最后一天
            var week = Math.Ceiling((decimal)(lastday - firstweekLastday) / 7) + 1;
            JArray result = new JArray();
            for (var i = 1; i <= week; i++)
            {
                JObject List = new JObject();
                List.Add("value", i);
                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }
    }
}
