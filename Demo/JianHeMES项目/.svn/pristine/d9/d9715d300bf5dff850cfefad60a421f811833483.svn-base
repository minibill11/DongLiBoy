@*文件上传弹出框*@
<script type="text/template" id="popover">
    <div>
        <el-popover trigger="click"
                    v-if="nametext!='/'"
                    v-model="popoverVisible"
                    placement="bottom-start"
                    style="display:inline-block">
            <el-upload name="fileup"
                       class="uploadStyle"
                       ref="upload"
                       accept=".xls,.xlsx"
                       :action="'/Process_Capacity/'+address"
                       :on-exceed="handleExceed"
                       :limit="1"
                       @*:multiple="true"*@
                       :file-list="fileList"
                       :auto-upload="false"
                       :before-upload="beforeUpload"
                       :on-change="handleChange"
                       :on-success="handleSuccess"
                       :on-error="handleError"
                       :data="{type:rowdata.Type,PCBNumber:rowdata.PCB,platform:rowdata.Platform,seaction:section}">
                <el-button style="margin-left: 10px;" size="small" type="success" @@click="submitUpload">上传到服务器</el-button>
                <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                <button @@click="popoverVisible = false" type="button" aria-label="Close" class="el-dialog__headerbtn" style="top:50px;right:15px;font-size:10px"><i class="el-dialog__close el-icon el-icon-close">关闭</i></button>
                <div slot="tip" class="el-upload__tip">excel</div>
            </el-upload>
            <div slot="reference">
                <el-button size="mini" class="miniBtn" type="primary" plain round>上传</el-button>
            </div>
        </el-popover>
        @*<slot></slot>*@
        <el-popover v-if="isnull==null"
                    placement="bottom"
                    v-model="passVisible">
            <p><i class="el-icon-info red"></i> 确认跳过此工段吗？</p>
            <div style="text-align: right; margin: 0">
                <el-button type="text" @@click="passVisible = false" size="mini">取消</el-button>
                <el-button type="primary" @@click="passClick()" size="mini">确定</el-button>
            </div>
            <el-button slot="reference" size="mini" class="miniBtn" type="info" plain round>跳过</el-button>
        </el-popover>
        <el-popover v-else
                    placement="top"
                    v-model="deleteVisible">
            <p><i class="el-icon-info red"></i> 确认删除此工段吗？</p>
            <div style="text-align: right; margin: 0">
                <el-button type="text" @@click="deleteVisible = false" size="mini">取消</el-button>
                <el-button type="primary" @@click="deleteClick()" size="mini">确定</el-button>
            </div>
            <el-button slot="reference" size="mini" class="miniBtn" type="warning" plain round>删除</el-button>
        </el-popover>
        <el-button v-show="isnull!=null && section !='SMT' && nametext!='/'" @@click="editName()" size="mini" class="miniBtn" type="success" plain round>改名</el-button>
    </div>
</script>
@*文件跳转链接*@
<script type="text/template" id="link">
    <div>
        <el-link v-if="ispower" :href="hrefname" type="primary" target="_blank" :underline="false">{{nametext}}</el-link>
        <span v-else>{{nametext}}</span>
        @*<div v-show="examinanstatu!='审核通过'" class="examinanMessage red">
                {{examinanstatu}}
            </div>*@
        @*<br /><span>IMG:{{img}}</span>
            <br /><span>PDF:{{pdf}}</span>*@
    </div>
</script>
<script>
    //文件上传弹出框
    Vue.component('popover-upload', {
        template: document.getElementById("popover"),
        props: ['rowdata', 'itemdata', 'section', 'index', 'isnull', 'nametext'],
        data: function () {
            return {
                fileList: [],
                popoverVisible: false,
                address: "",
                deleteAddress: "",
                passVisible: false,
                deleteVisible: false,
                itemId: '',
                itemIdName: ''
            }
        },
        mounted: function () {
            if (this.section == "SMT") {
                this.address = "Upload_Pick_And_Place";
                this.deleteAddress = "Delete_Pick_And_Place";
            } else {
                this.address = "Upload_ProcessBalance";
                this.deleteAddress = "Delete_ProcessBalance";
            };


            if (this.isnull != null && this.nametext != '/') {
                switch (this.section) {
                    case '后焊':
                        this.itemId = this.itemdata.AfterWeldID;
                        this.itemIdName = "AfterWeldProcessName";
                        break;
                    case '三防':
                        this.itemId = this.itemdata.ThreeProfID;
                        this.itemIdName = "ThreeProfProcessName";
                        break;
                    case '打底壳':
                        this.itemId = this.itemdata.BottomCasID;
                        this.itemIdName = "BottomCasProcessName";
                        break;
                    case '装磁吸安装板':
                        this.itemId = this.itemdata.MagneticID;
                        this.itemIdName = "MagneticProcessName";
                        break;
                    case '锁面罩':
                        this.itemId = this.itemdata.LockTheMaskID;
                        this.itemIdName = "LockTheMaskProcessName";
                        break;
                    case '模组装配':
                        this.itemId = this.itemdata.ModuleID;
                        this.itemIdName = "ModuleProcessName";
                        break;
                    case '包装':
                        this.itemId = this.itemdata.PackingID;
                        this.itemIdName = "PackingProcessName";
                        break;
                };
            };
        },
        methods: {
            //文件超出个数限制时的钩子
            handleExceed(files, fileList) {
                this.$message.warning(`只能选择 1 个文件！`);
            },
            //上传文件之前的钩子
            beforeUpload(file) {
                var suffix = file.name.substring(file.name.lastIndexOf('.') + 1);
                const xlsExtension = suffix === 'xls';
                const xlsxExtension = suffix === 'xlsx';
                // const isLt2M = file.size / 1024 / 1024 < 10;
                if (!xlsExtension && !xlsxExtension) {
                    this.$message({
                        message: '上传文件只能是 xls、xlsx格式!',
                        type: 'warning'
                    });
                };
                return xlsExtension || xlsxExtension;
                // if(!isLt2M) {
                //     this.$message({
                //         message: '上传文件大小不能超过 10MB!',
                //         type: 'warning'
                //     });
                // };
                // return xlsExtension || xlsxExtension && isLt2M;
            },
            //文件状态改变时的钩子
            handleChange(file, fileList) {
                //ready,success,fail
                if (file.status == "ready") {
                    console.log("添加文件:" + file.name);
                } else {
                    this.$refs.upload.clearFiles();
                    this.popoverVisible = false;
                };
            },
            //文件上传成功时的钩子
            handleSuccess(response, file, fileList) {
                //this.imageUrl = URL.createObjectURL(file.raw);
                //console.log(response)
                if (response.result == true) {
                    let row = this.rowdata, item = this.isnull, rtd = response.content;
                    if (this.section == "SMT") {
                        for (let i in rtd) {
                            row[i] = rtd[i];
                        };
                    } else {
                        if (item == null) {
                            switch (this.section) {
                                case '后焊':
                                    row.AfterWeld = [];
                                    row.AfterWeld.push(rtd)
                                    break;
                                case '三防':
                                    row.ThreeProf = [];
                                    row.ThreeProf.push(rtd)
                                    break;
                                case '打底壳':
                                    row.BottomCas = [];
                                    row.BottomCas.push(rtd)
                                    break;
                                case '装磁吸安装板':
                                    row.Magnetic = [];
                                    row.Magnetic.push(rtd)
                                    break;
                                case '锁面罩':
                                    row.LockTheMask = [];
                                    row.LockTheMask.push(rtd)
                                    break;
                                case '模组装配':
                                    row.Module = [];
                                    row.Module.push(rtd)
                                    break;
                                case '包装':
                                    row.Packing = [];
                                    row.Packing.push(rtd)
                                    break;
                                //default:
                            };
                        } else {
                            let textName = this.nametext;
                            //如果有重复的，应该是替换
                            for (let i in item) {
                                if (item[i][textName] == rtd[textName]) {
                                    item.splice(i, 1, rtd);
                                    return;
                                };
                            };
                            //若没重复，增加
                            item.push(rtd);
                        };
                    };
                    //刷新审核/批准 列表
                    app.$refs.statuRef.getFileStatu(app.queryTable.statu);
                    this.$message.success("上传成功！");
                } else {
                    this.$message.error(response.content);
                };
            },
            //文件上传失败时的钩子
            handleError(err, file, fileList) {
                this.$message.error("上传失败！");
            },
            //提交
            submitUpload() {
                this.$refs.upload.submit();
            },
            //跳过的方法
            passClick() {
                axios.post(`/Process_Capacity/${this.address}`, {
                    type: this.rowdata.Type,
                    PCBNumber: this.rowdata.PCB,
                    platform: this.rowdata.Platform,
                    seaction: this.section
                }).then(res => {
                    if (res.data.result == true) {
                        this.passItem(res.data.content);
                        //console.log(res.data.content);
                    } else {
                        this.$message.error(res.data.content);
                        this.passVisible = false;
                    };
                }).catch(err => {
                    this.$message.error("跳过失败！");
                    this.passVisible = false;
                });
            },
            //跳过后的显示
            passItem(newitem) {
                let row = this.rowdata;
                this.passVisible = false;
                this.$message.success('已跳过该工段！');
                return {
                    'SMT': () => {
                        for (let item in newitem) {
                            row[item] = newitem[item];
                        };
                    },
                    '后焊': () => { row.AfterWeld = []; row.AfterWeld.push(newitem) },
                    '三防': () => { row.ThreeProf = []; row.ThreeProf.push(newitem) },
                    '打底壳': () => { row.BottomCas = []; row.BottomCas.push(newitem) },
                    '装磁吸安装板': () => { row.Magnetic = []; row.Magnetic.push(newitem) },
                    '锁面罩': () => { row.LockTheMask = []; row.LockTheMask.push(newitem) },
                    '模组装配': () => { row.Module = []; row.Module.push(newitem) },
                    '包装': () => { row.Packing = []; row.Packing.push(newitem) }
                }[this.section].call(this);
            },
            //删除方法
            deleteClick() {
                axios.post(`/Process_Capacity/${this.deleteAddress}`, {
                    type: this.rowdata.Type,
                    PCBNumber: this.rowdata.PCB,
                    platform: this.rowdata.Platform,
                    Section: this.section,
                    title: this.nametext
                }).then(res => {
                    if (res.data.message == true) {
                        this.deleteItem(res.data.content);
                        //console.log(res.data.content);
                    } else {
                        this.$message.error(res.data.content);
                        this.deleteVisible = false;
                    };
                }).catch(err => {
                    this.$message.error("跳过失败！");
                    this.deleteVisible = false;
                });
            },
            //删除后的显示
            deleteItem(content) {
                let item = this.isnull, row = this.rowdata;
                this.$message.success(content);
                this.deleteVisible = false;
                if (item.length > 1) {
                    return {
                        'SMT': () => {
                            row.SMTExaminanMessage = null;
                            row.icProductName = null;
                            row.icMaxStandardTotal = null;
                            row.icMaxStandardOutput = null;
                            row.icMinStandardTotal = null;
                            row.icMinStandardOutput = null;
                            row.LightProductName = null;
                            row.LightMaxStandardTotal = null;
                            row.LightMaxStandardOutput = null;
                            row.LightMinStandardTotal = null;
                            row.LightMinStandardOutput = null;
                        },
                        '后焊': () => { row.AfterWeld.splice(this.index, 1); },
                        '三防': () => { row.ThreeProf.splice(this.index, 1); },
                        '打底壳': () => { row.BottomCas.splice(this.index, 1); },
                        '装磁吸安装板': () => { row.Magnetic.splice(this.index, 1); },
                        '锁面罩': () => { row.LockTheMask.splice(this.index, 1); },
                        '模组装配': () => { row.Module.splice(this.index, 1); },
                        '包装': () => { row.Packing.splice(this.index, 1); },
                    }[this.section].call(this);
                } else {
                    return {
                        'SMT': () => {
                            row.SMTExaminanMessage = null;
                            row.icProductName = null;
                            row.icMaxStandardTotal = null;
                            row.icMaxStandardOutput = null;
                            row.icMinStandardTotal = null;
                            row.icMinStandardOutput = null;
                            row.LightProductName = null;
                            row.LightMaxStandardTotal = null;
                            row.LightMaxStandardOutput = null;
                            row.LightMinStandardTotal = null;
                            row.LightMinStandardOutput = null;
                        },
                        '后焊': () => { row.AfterWeld = null; },
                        '三防': () => { row.ThreeProf = null; },
                        '打底壳': () => { row.BottomCas = null; },
                        '装磁吸安装板': () => { row.Magnetic = null; },
                        '锁面罩': () => { row.LockTheMask = null; },
                        '模组装配': () => { row.Module = null; },
                        '包装': () => { row.Packing = null; },
                    }[this.section].call(this);
                };
            },
            //改文件名字
            editName() {
                this.$prompt(`原文件名为：${this.nametext}`, '修改文件名称', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios.post('/Process_Capacity/Edit_ModuleName', {
                        id: this.itemId,
                        name: value,
                    }).then(res => {
                        if (res.data.message === true) {
                            this.itemdata[this.itemIdName] = value;
                            this.$message.success(res.data.content);
                        } else {
                            this.$message.error("修改失败");
                        };
                    }).catch(err => {
                        this.$message.error("修改失败");
                        this.deleteVisible = false;
                    });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消修改'
                    });
                });
            }
        }
    });
    //文件跳转链接
    Vue.component('jump-link', {
        props: ['rowdata', 'section', 'nametext', 'examinanstatu', 'img', 'pdf', 'ispower'],
        template: document.getElementById("link"),
        computed: {
            hrefname() {
                if (this.section == "SMT") {
                    return `/Process_Capacity/StandardCapacity?id=${this.rowdata.id}&type=${this.rowdata.Type}&PCBNumber=${this.rowdata.PCB}&platform=${this.rowdata.Platform}&Section=${encodeURI(this.section)}&title=${encodeURI(this.section)}`;
                } else {
                    return `/Process_Capacity/ProcessBalanceCard?id=${this.rowdata.id}&type=${this.rowdata.Type}&PCBNumber=${this.rowdata.PCB}&platform=${this.rowdata.Platform}&Section=${encodeURI(this.section)}&title=${encodeURI(this.nametext)}`;
                };
            }
        }
    });
</script>