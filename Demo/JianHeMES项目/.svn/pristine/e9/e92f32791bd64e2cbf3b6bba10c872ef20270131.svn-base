@model IEnumerable<JianHeMES.Models.Burn_in_MosaicScreen>

@{
    ViewBag.Title = "老化拼屏历史查询";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/axios.min.js"></script>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    .grid-card {
        margin-bottom: 10px;
    }

    .el-card {
        border: 1px solid #9C9791;
    }

    .el-main, .el-aside {
        padding: 8px 15px;
    }

    .el-header {
        padding: 0 15px;
        height: auto !important;
    }

    .el-card__header {
        text-align: center;
        border-bottom: 1px solid #9C9791;
        padding: 8px 15px;
    }

    .cardbody {
        border: 1px solid #D2CFCF;
        margin: -1px;
    }

    .el-card__body {
        height: 250px;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 0px;
    }

    .cardbody-right {
        padding: 5px;
        text-align: center
    }

    .cardbody-left {
        padding: 5px 0px;
        border-right: 1px solid #D2CFCF;
        text-align: center;
        vertical-align: middle;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .barcodeSpan {
        /*cursor: pointer;*/
        padding: 1px 3px;
        display: inline-block;
        border-radius: 6px;
    }

        .barcodeSpan:hover {
            background-color: #efe2c5;
        }

    .statuinfo {
        float: right;
        margin: 0 10px;
        height: 28px;
        line-height: 28px;
    }

    .returnbtn {
        float: left;
        width: 184px;
        text-align: left;
    }

    .inlineBok {
        display: inline-block;
    }

    @@media screen and (max-width:768px) {
        .statuinfo, .returnbtn {
            float: left;
            width: auto;
        }
    }
</style>

<div id="app" v-cloak>
    <h2 class="text-center">@ViewBag.Title</h2>
    <el-container>
        <el-header>
            <el-row style="text-align:center;">
                <div class="returnbtn inlineBok">
                    <a href="/Burn_in_MosaicScreen/mosaicScreen_ShelfQuery"><el-button size="mini">返回</el-button></a>
                </div>
                <div class="statuinfo inlineBok">
                    <span style="display: inline-block; background: green;width: 10px;height: 10px;"></span> 正常老化中&nbsp;
                    <span style="display: inline-block; background: red;width: 10px;height: 10px;"></span> 异常&nbsp;
                    <span style="display: inline-block; background: blue;width: 10px;height: 10px;"></span> 已完成老化
                </div>
                <div class="inlineBok">
                    <span>订单号：</span>
                    <el-select v-model="selectVal" placeholder="输入内容可查询" filterable clearable size="medium">
                        <el-option v-for="item in selectOptions"
                                   :key="item.value"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                </div>
            </el-row>
        </el-header>
        <el-main v-loading="loading" style="min-height:600px;">
            <el-row :gutter="10">
                <template v-for="item in dataList">
                    <el-col :xs="24" :sm="12" :md="8" :lg="6" :xl="6">
                        <el-card shadow="hover" class="grid-card">
                            <div slot="header">
                                <span>{{'老化架号:'+item.ShelfNum+' (总数:'+ shelfCount(item.content)+')'}}</span>
                            </div>
                            <div v-for="order in item.content">
                                <el-container class="cardbody">
                                    <el-aside style="width:100px;" class="cardbody-left">{{order.ordernum}}<br />(数量:{{Object.keys(order.barcodelist).length}})</el-aside>
                                    <el-main class="cardbody-right">
                                        <template v-for="i in order.barcodelist">
                                            <el-popover placement="right"
                                                        title="条码异常信息"
                                                        trigger="hover"
                                                        v-bind:disabled="i.status=='2'?false:true">
                                                <div>{{i.Abnormal}}</div>
                                                <div class="barcodeSpan" slot="reference" v-bind:style="(i.status=='1')?({color:'green'}):(i.status=='2')?({color:'red'}):(i.status=='3')?({color:'blue'}):''">{{i.barcode}}</div>
                                            </el-popover>
                                        </template>
                                    </el-main>
                                </el-container>
                            </div>
                        </el-card>
                    </el-col>
                </template>
            </el-row>
            <el-row v-show="isData==false">
                <el-alert title="此订单没有拼屏记录"
                          type="info"
                          :closable="false"
                          center
                          show-icon>
                </el-alert>
            </el-row>
        </el-main>
    </el-container>
</div>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            dataList: [],
            isData: false,
            loading: false,
            selectOptions: [],
            selectVal: ''
        },
        methods: {
            request: (v) => {
                app.loading = true;
                app.dataList = [];
                axios.post("/Burn_in_MosaicScreen/mosaicScreen_ShelfQueryHistory", { ordernum: v }).then(response => {
                    console.log(response.data)
                    if (response.data == "没有数据") {
                        app.isData = false;
                    } else {
                        app.dataList = response.data;
                        app.isData = true;
                    };
                    app.loading = false;
                }).catch(error => {
                    console.warn("读取数据失败" + error)
                });
            },
            shelfCount: function (v) {
                let vCount = 0;
                for (let s in v) {
                    vCount += Object.keys(v[s].barcodelist).length;
                };
                return vCount;
            },
        },
        created: function () {
            axios.post('/Packagings/GetOrderList').then(rer => {
                this.selectOptions = rer.data;
            }).catch(err => {
                console.warn("获取选择列表失败")
            });
        },
        mounted: function () {
            let localOrder = localStorage.getItem('Order');
            if (localOrder != null) {
                this.selectVal = localOrder;
            };
        },
        watch: {
            selectVal: function (v) {
                localStorage.setItem('Order', v);
                this.request(v)
            }
        }
    });
</script>