@{
    ViewBag.Title = "录入包装箱基本信息";
}

@*  <summary>
    1.录入包装箱基本信息操作页
    2.选择订单后可以看见该订单已有信息，
    3.若包装还未进行，则可以修改信息
    4.若包装已完成，则不能修改已有记录的包装箱类型的数据，但可以新增类型
    5.可以选择是否有分屏
    </summary>*@

@*<script src="~/Scripts/vue.js"></script>*@
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/axios.min.js"></script>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    .body-content, .container {
        padding-left: 0px;
        padding-right: 0px;
    }

    [v-cloak] {
        display: none;
    }

    .el-header {
        height: auto !important;
        padding: 0;
    }

    .el-main {
        min-height: 600px;
        padding: 20px 0 0;
    }

    .el-input {
        width: auto;
    }

    .mesDiv {
        padding: 5px 0;
        position: relative;
        /*border: 1px solid #ccc;*/
    }

    .mesDiv_div {
        display: inline-block;
    }

    .mesDiv_div_mes {
        position: absolute;
        left: 855px;
        width: 130px;
        font-size: 13px;
        line-height: 25px;
        color: #3082e3;
    }

    a:hover {
        text-decoration: none;
        color: #000;
    }

    .el-button--small {
        padding: 8px 12px;
    }

    .adiv {
        display: inline-block;
    }
</style>

<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            <div v-show="screenSize>=768">
                <h2 class="text-center">@ViewBag.Title</h2>
                @*<a href="/Packagings/board"><el-button size="small">产值看板</el-button></a>*@
                <div class="adiv" href="/Packagings/inputPackaging"><el-button size="small" type="primary" plain disabled style="cursor:default">录入包装箱基本信息</el-button></div>
                <a href="/Packagings/RuleEnter"><el-button size="small">录入模组号规则</el-button></a>

                @*<a href="/Packagings/insidePrint"><el-button size="small">内箱标签打印</el-button></a>*@
                @*<a href="/Packagings/insideConfirm"><el-button size="small">内箱装箱确认</el-button></a>*@
                @*<a href="/Packagings/outsideBinningPrint"><el-button size="small">外箱(重新)装箱和标签打印</el-button></a>
                    <a href="/Packagings/outsideConfirm"><el-button size="small">外箱装箱确认</el-button></a>
                            <a href="/Packagings/inStockConfirm"><el-button size="small">外箱入库确认</el-button></a>
                            <a href="/Packagings/PingZhioutStockConfirm"><el-button size="small">品质外箱入库确认</el-button></a>
                            <a href="/Packagings/stockNumEdit"><el-button size="small">外箱库位号修改</el-button></a>
                            <a href="/Packagings/outStockConfirm"><el-button size="small">外箱出库确认</el-button></a>*@
            </div>
            <div v-show="screenSize<768">
                <h3>@ViewBag.Title</h3>
                <el-dropdown placement="bottom">
                    <el-button size="medium ">
                        更多菜单<i class="el-icon-arrow-down el-icon--right"></i>
                    </el-button>
                    <el-dropdown-menu slot="dropdown">
                        @*<a href="/Packagings/board"><el-dropdown-item>产值看板</el-dropdown-item></a>*@
                        <div href="/Packagings/inputPackaging"><el-dropdown-item disabled>录入包装箱基本信息</el-dropdown-item></div>
                        <a href="/Packagings/RuleEnter"><el-dropdown-item>录入模组号规则</el-dropdown-item></a>

                        @*<a href="/Packagings/insidePrint"><el-dropdown-item>内箱标签打印</el-dropdown-item></a>*@
                        @*<a href="/Packagings/insideConfirm"><el-dropdown-item>内箱装箱确认</el-dropdown-item></a>*@
                        @*<a href="/Packagings/outsideBinningPrint"><el-dropdown-item>外箱(重新)装箱和标签打印</el-dropdown-item></a>
                                            <a href="/Packagings/outsideConfirm"><el-dropdown-item>外箱装箱确认</el-dropdown-item></a>
                            <a href="/Packagings/inStockConfirm"><el-dropdown-item>外箱入库确认</el-dropdown-item></a>
                            <a href="/Packagings/PingZhioutStockConfirm"><el-dropdown-item>品质外箱入库确认</el-dropdown-item></a>
                            <a href="/Packagings/stockNumEdit"><el-dropdown-item>外箱库位号修改</el-dropdown-item></a>
                            <a href="/Packagings/outStockConfirm"><el-dropdown-item>外箱出库确认</el-dropdown-item></a>*@
                    </el-dropdown-menu>
                </el-dropdown>
            </div>
        </el-header>
        <el-main>
            <div class="text-center" style="width:850px;margin:0 auto;">
                <div class="text-left" style="padding-left:24px;">
                    订单号：
                    <el-select v-model="selectVal" placeholder="输入内容可查询" filterable size="medium">
                        <el-option v-for="item in selectOptions"
                                   :key="item.value"
                                   :value="item.value">
                        </el-option>
                    </el-select>

                    <el-switch v-model="isSeparate"
                               active-text="分屏"
                               inactive-text="不分屏"
                               :disabled="canScreen"
                               style="margin-left:18px">
                    </el-switch>
                </div>
                <div style="margin:10px 0;text-align:left">
                    <div v-for="(item,index) in dataVal" :key="index">
                        <div class="mesDiv">
                            <div class="mesDiv_div">
                                包装箱类型：<el-input placeholder="请输入内容"
                                                @*v-model="item.typeVal"*@
                                                :value="item.quantity1>0?'1装'+item.quantity1:''"
                                                clearable
                                                size="mini"
                                                :disabled="true"></el-input>
                            </div>
                            @*<div class="mesDiv_div" v-if="dataVal.length==(index+1)">&nbsp;&nbsp;&nbsp;尾箱类型：<el-input placeholder="请输入内容" v-model="item.typeVal" clearable size="mini"></el-input></div>*@
                            <div class="mesDiv_div">每箱数量：<el-input-number size="mini" :min="0" v-model="item.quantity1" :disabled="item.isedit=='false'"></el-input-number></div>
                            <div class="mesDiv_div">包装箱件数：<el-input-number size="mini" :min="item.ismin" v-model="item.quantity2"></el-input-number></div>
                            <div class="mesDiv_div" v-show="isSeparate">屏序：<el-input-number size="mini" :min="1" v-model="item.screenNum" :disabled="item.isedit=='false'"></el-input-number></div>
                            <div class="mesDiv_div mesDiv_div_mes" v-show="item.isedit=='false'&&isSeparate">此包装箱已打印{{item.ismin}}件</div>
                            <div class="mesDiv_div mesDiv_div_mes" v-show="item.isedit=='false'&&!isSeparate" style="left:680px;">此包装箱已打印{{item.ismin}}件</div>
                        </div>
                    </div>
                </div>
                <div class="changedright">
                    <el-button size="medium" @@click="addrow">添加行</el-button>
                    <el-button size="medium" @@click="reset">重置</el-button>
                    <el-button size="medium" @@click="postSubmit">提交</el-button>
                </div>
            </div>

        </el-main>
    </el-container>
</div>
@* 获取用户的用户名 *@
@{var UserName = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).UserName;}

<script>
    var app = new Vue({
        el: "#app",
        data: {
            selectOptions: [],//订单号下拉列表
            selectVal: '',//订单号值
            dataVal:[],//订单表格数据
            userName: "@UserName",//用户名
            screenSize: document.body.clientWidth,//屏幕宽度
            isSeparate:false//分屏开关
        },
        computed: {
            //若已有不能更改的记录，则分屏按钮不可按
            canScreen: function () {
                let val = this.dataVal;
                for (let i in val) {
                    if (val[i].isedit == "false") {
                        return true;
                    };
                };
                return false;
            }
        },
        methods: {
            //记录填写好的数据方法
            postSubmit: function () {
                let tableData = this.dataVal,
                    order = this.selectVal,
                    user = this.userName,
                    separate = this.isSeparate,
                    packinginfo = [],
                    oknum=0;
                for (let i in tableData) {
                    if (tableData[i].quantity1 >0) {
                        packinginfo.push({
                            OrderNum: order,
                            Type: "1装"+tableData[i].quantity1,
                            screenNum: separate==false?1: (typeof (tableData[i].screenNum) == "undefined" ? 1 : tableData[i].screenNum),//这里要改
                            OuterBoxCapacity: tableData[i].quantity1,
                            Quantity: tableData[i].quantity2,
                            Creator: user,
                            CreateDate: new Date(),
                            Remark: "",
                            IsSeparate: separate
                        });
                        oknum++;
                    };
                };
                if (order != "") {
                    if (oknum != 0) {
                        axios.post('/Packagings/CreatePacking', packinginfo).then(res => {
                            if (res.data == "ok") {
                                this.$alert('录入成功！', {
                                    confirmButtonText: '确定',
                                    closeOnClickModal: true,
                                    closeOnPressEscape: true,
                                    type: "success",
                                    callback: () => {
                                        this.reset();
                                    }
                                });
                            } else {
                                this.$alert('录入失败！', {
                                    confirmButtonText: '确定',
                                    type: "error",
                                });
                            };
                        }).catch(err => {
                            this.$alert('录入失败！', {
                                confirmButtonText: '确定',
                                type: "error",
                            });
                        });
                    } else {
                        this.$message({
                            showClose: true,
                            duration:5000,
                            message: '每箱数量不能全为空！',
                            type: 'error'
                        });
                    };
                } else {
                    this.$message({
                        showClose: true,
                        duration: 5000,
                        message: '订单号不能为空',
                        type: 'error'
                    });
                };
            },
            //表格添加行方法
            addrow: function () {
                this.$prompt('请输入需要添加行数', '添加行', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    inputPattern: /^[1-9]\d*$/,
                    inputErrorMessage: '只能输入数字'
                }).then(({ value }) => {
                    let l = this.dataVal.length;
                    if (this.selectVal != "") {
                        axios.post('/Packagings/GetValueFromOrderNum', { ordernum: this.selectVal }).then(res => {
                            if (Object.keys(res.data).length == 0) {
                                for (let i = 0; i < value; i++) {
                                    this.dataVal.push({
                                        typeVal: "",
                                        quantity1: 0,
                                        quantity2: 0,
                                        isedit: "true",
                                        ismin: 0,
                                        screenNum: l + i + 1
                                    });
                                };
                            } else {
                                for (let i = 0; i < value; i++) {
                                    this.dataVal.push({
                                        typeVal: "",
                                        quantity1: 0,
                                        quantity2: 0,
                                        isedit: "true",
                                        ismin: 0,
                                    });
                                };
                            }
                        }).catch(err => {
                            console.warn("获取值失败")
                        });
                    } else {
                        for (let i = 0; i < value; i++) {
                            this.dataVal.push({
                                typeVal: "",
                                quantity1: 0,
                                quantity2: 0,
                                isedit: "true",
                                ismin: 0,
                                screenNum: l + i + 1
                            });
                        };
                    };
                }).catch(() => {
                    console.log("取消添加");
                });
            },
            //重置按钮
            reset: function () {
                if (this.selectVal == "") {
                    this.initial();
                } else {
                    this.set();
                };
            },
            //根据订单号设置表格初始数据
            set: function () {
                if (this.selectVal != "") {
                    axios.post('/Packagings/GetValueFromOrderNum', { ordernum: this.selectVal }).then(res => {
                        console.log(res.data);
                        let rtdata = res.data, thisrtdata = [];
                        if (Object.keys(rtdata).length > 0) {
                            this.isSeparate = rtdata[0].isSeparate;
                        };
                        if (Object.keys(rtdata).length >= 6) {
                            for (let i in rtdata) {
                                //console.log(rtdata[i]);
                                thisrtdata.push({
                                    typeVal: rtdata[i].packingType,
                                    screenNum: rtdata[i].screenNum,
                                    quantity1: rtdata[i].itemNum,
                                    quantity2: rtdata[i].Num,
                                    isedit: rtdata[i].update,
                                    ismin: rtdata[i].min,
                                });
                            };
                            this.dataVal = thisrtdata;
                        } else if (Object.keys(rtdata).length == 0) {
                            this.initial();
                        }else {
                            let DVal = 6 - Object.keys(rtdata).length;
                            for (let i in rtdata) {
                                thisrtdata.push({
                                    typeVal: rtdata[i].packingType,
                                    screenNum: rtdata[i].screenNum,
                                    quantity1: rtdata[i].itemNum,
                                    quantity2: rtdata[i].Num,
                                    isedit: rtdata[i].update,
                                    ismin: rtdata[i].min,
                                });
                            };
                            for (let i = 0; i < DVal; i++) {
                                thisrtdata.push({
                                    typeVal: "",
                                    quantity1: 0,
                                    quantity2: 0,
                                    isedit: "true",
                                    ismin: 0,
                                });
                            };
                            //console.log(Object.keys(rtdata).length);
                            this.dataVal = thisrtdata;
                        };
                    }).catch(err => {
                        console.warn("获取值失败")
                    });
                };
            },
            //初始化空表
            initial: function () {
                this.dataVal = [];
                for (let i = 0; i < 6;i++) {
                    this.dataVal.push({
                        typeVal: "",
                        quantity1: 0,
                        quantity2: 0,
                        isedit: "true",
                        ismin: 0,
                        screenNum:i+1
                    });
                };
                //this.isSeparate = false;
            }
        },
        created: function () {
            //获取订单号选择框下拉清单
            axios.post('/Packagings/GetOrderList').then(rer => {
                this.selectOptions = rer.data;
            }).catch(err => {
                console.warn("获取选择列表失败")
                });
            //获取屏幕大小，并存储在app.screenSize上
            window.onresize = function () {
                app.screenSize = document.body.clientWidth;
            };
            //初始化
            this.initial();
        },
        mounted: function () {
            //获取浏览器本地存储的订单号
            let localOrder = localStorage.getItem('Order');
            if (localOrder != null) {
                this.selectVal = localOrder;
            };
            //获取浏览器本地存储的权限列表
            var roles = JSON.parse(localStorage.getItem("rigths"));

            //检查权限，若存在‘包装箱信息录入修改’权限，则显示操作按钮
            if (checkRoles(roles, '包装箱信息录入修改')) {
                $('.changedright').show()
            } else {
                $('.changedright').hide()
            }
        },
        watch: {
            //监听订单号
            selectVal: function (v) {
                localStorage.setItem('Order', v);
                this.set();
            },
        },
    });
</script>