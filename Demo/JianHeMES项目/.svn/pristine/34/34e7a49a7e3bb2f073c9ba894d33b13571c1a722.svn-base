using JianHeMES.Controllers;
using JianHeMES.Models;
using Microsoft.AspNet.SignalR;
using Microsoft.AspNet.SignalR.Hubs;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Web;

namespace JianHeMES.Areas.KongYaHT.Hubs
{ 
    #region ---------------------------------------------------------------------

    [HubName("Production_Value")]
    public class Production_Value : Hub
    {
        // Is set via the constructor on each creation
        private Production_ValueBroadcaster ProductionControlIndexBroadcaster_broadcaster;
        public Production_Value()
            : this(Production_ValueBroadcaster.ProductionControlIndexInstance)
        {
        }
        public Production_Value(Production_ValueBroadcaster ProductionControlIndexbroadcaster)
        {
            ProductionControlIndexBroadcaster_broadcaster = ProductionControlIndexbroadcaster;
        }
    }

    /// <summary>
    /// 数据广播器
    /// </summary>
    public class Production_ValueBroadcaster
    {
        private readonly static Lazy<Production_ValueBroadcaster> ProductionControlIndex_instance =
            new Lazy<Production_ValueBroadcaster>(() => new Production_ValueBroadcaster());

        private readonly IHubContext ProductionControlIndex_hubContext;

        private Timer ProductionControlIndex_broadcastLoop;


        public Production_ValueBroadcaster()
        {
            // 获取所有连接的句柄，方便后面进行消息广播
            ProductionControlIndex_hubContext = GlobalHost.ConnectionManager.GetHubContext<Production_Value>();
            // Start the broadcast loop
            ProductionControlIndex_broadcastLoop = new Timer(
                ProductionControlIndexBroadcastShape,
                null,
                0,
                6000);
        }

        private void ProductionControlIndexBroadcastShape(object state)
        {

            JObject Production_Value = QueryExcution();
            //广播发送JSON数据
            ProductionControlIndex_hubContext.Clients.All.sendProductionControlIndex(Production_Value);
        }

        public static Production_ValueBroadcaster ProductionControlIndexInstance
        {
            get
            {
                return ProductionControlIndex_instance.Value;
            }
        }


        #region-----------查询数据方法

        public JObject QueryExcution()
        {
            ApplicationDbContext db = new ApplicationDbContext();
            CommonalityController comm = new CommonalityController();
            JObject value =new  JObject();
            JObject total = new JObject();
            var yesterday = DateTime.Now.AddDays(-1);
            var productionOrder = db.Packing_BasicInfo.Select(c => c.OrderNum).Distinct().ToList();
            int i = 0; 
            foreach (var item in productionOrder)
            {
                var warehouse = db.Warehouse_Join.Where(c => c.IsOut == false || c.WarehouseOutDate >= yesterday&&c.OrderNum==item&&c.QC_Operator!=null).ToList();
                if (warehouse.Count == 0)
                {
                    continue;
                }
                var productionvalue = db.Production_Value.Where(c => c.OrderNum == item).FirstOrDefault();
                
                //订单号
                value.Add("OrderNum", item);

                //模组数量
                //var basicinfo = db.Packing_BasicInfo.Where(c => c.OrderNum == item).ToList();
                //int moduleCount = 0;
                //foreach (var basic in basicinfo)
                //{
                //    moduleCount = moduleCount + (basic.OuterBoxCapacity * basic.Quantity);
                //}
                var moduleCount = db.OrderMgm.Where(c => c.OrderNum == item).Select(c => c.Boxes).FirstOrDefault();
                value.Add("moduleCount", moduleCount);
                //已包装数量
                var packingCount = db.Packing_BarCodePrinting.Count(c => c.OrderNum == item);
                value.Add("packingCount", packingCount);
                //已入库数量
                var warehousJoinCount = db.Warehouse_Join.Count(c => c.OrderNum == item && c.IsOut == false);
                value.Add("warehousJoinCount", warehousJoinCount);
                //已出库数量
                var warehousOutCount= db.Warehouse_Join.Count(c => c.OrderNum == item && c.IsOut == true);
                value.Add("warehousOutCount", warehousOutCount);
                
                //入库完成率
                var warehousJoinComplete = (moduleCount==0?0:(warehousJoinCount*100) / moduleCount).ToString("F2")+"%";
                value.Add("warehousJoinComplete", warehousJoinComplete);
                //出库完成率
                var warehousOutComplete= (moduleCount == 0 ? 0 :( warehousOutCount*100) / moduleCount).ToString("F2") + "%";
                value.Add("warehousOutComplete",warehousOutComplete);

                if (productionvalue == null)
                {
                    value.Add("id", 0);
                    //总产值
                    value.Add("Worth","- -");
                    //目前入库产值
                    value.Add("warehouseJoinValue", 0);
                    //未完成产值
                    value.Add("uncompleteValue", 0);
                    //备注
                    value.Add("remark", "");
                }
                else
                {
                    value.Add("id", productionvalue.Id);
                    //总产值
                    value.Add("Worth", productionvalue.Worth);
                    //目前入库产值
                    var warehouseJoinValue = warehousJoinCount * (moduleCount == 0 ? 0 : productionvalue.Worth / moduleCount);
                    value.Add("warehouseJoinValue", warehouseJoinValue.ToString("F2"));
                    //未完成产值
                    var uncompleteValue = productionvalue.Worth - warehouseJoinValue;
                    value.Add("uncompleteValue", uncompleteValue.ToString("F2"));
                    //备注
                    value.Add("remark", productionvalue.Remark);
                }

                total.Add(i.ToString(), value);
                i++;
                value = new JObject();
            }
            return total;
        }

    }

        #endregion
    }
#endregion