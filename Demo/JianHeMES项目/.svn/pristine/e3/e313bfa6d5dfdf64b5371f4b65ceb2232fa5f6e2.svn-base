@{
    ViewBag.Title = "查看标签";
}
<link href="~/Content/styleFile/packaging/index.css" rel="stylesheet" />
<script src="~/Content/styleFile/packaging/index.js"></script>
<link href="~/Content/styleFile/packaging/stockStyle.css" rel="stylesheet" />
<style>
    .container {
        width: 1200px;
    }
</style>
<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            <div v-show="screenSize>=768">
                <h2 class="text-center">@ViewBag.Title</h2>
                <a href="/Packagings/outsideBinningPrint"><el-button size="small">外箱装箱和标签打印</el-button></a>
                <div class="adiv" href="/Packagings/lookTag"><el-button size="small" type="primary" plain disabled style="cursor:default">查看标签</el-button></div>
                <a href="/Packagings/DeleteConfirm"><el-button size="small">外箱删除</el-button></a>
            </div>
            <div v-show="screenSize<768">
                <h3>@ViewBag.Title</h3>
                <el-dropdown placement="bottom">
                    <el-button size="medium ">
                        更多菜单<i class="el-icon-arrow-down el-icon--right"></i>
                    </el-button>
                    <el-dropdown-menu slot="dropdown">
                        <a href="/Packagings/outsideBinningPrint"><el-dropdown-item>外箱装箱和标签打印</el-dropdown-item></a>
                        <div href="/Packagings/lookTag"><el-dropdown-item disabled>查看标签</el-dropdown-item></div>
                        <a href="/Packagings/DeleteConfirm"><el-dropdown-item>外箱删除</el-dropdown-item></a>
                    </el-dropdown-menu>
                </el-dropdown>
            </div>
        </el-header>
        <el-main v-loading="loading">
            <el-row>
                <div class="inputframe">
                    <span>订单号：</span>
                    <el-select v-model="selectVal" v-bind:disabled="barcodeList.length>0" placeholder="输入内容可查询" filterable size="medium">
                        <el-option v-for="item in selectOptions"
                                   :key="item.value"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                </div>
                <div class="inputframe">
                    <span>打印机：</span>
                    <el-select v-model="printSelect" clearable placeholder="选择打印机" size="medium">
                        <el-option v-for="item in printOptions"
                                   :key="item.value"
                                   :label="item.label"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                </div>
                <div class="inputframe" v-show="printSelect!='0'&&printSelect!=''">
                    <span>打印数量：</span>
                    <el-input-number v-model.trim="pageCount"
                                     size="medium"
                                     :min="1"
                                     :max="5"
                                     style="width:220px"
                                     clearable>
                    </el-input-number>
                </div>
                <div class="inputframe">
                    <span>条码号：</span>
                    <el-input placeholder="请输入条码号"
                              v-model.trim="barcode"
                              style="text-align:right;display:inline-block;"
                              v-on:keyup.enter.native="barScan($event)"
                              size="medium"
                              autofocus
                              clearable>
                    </el-input>
                </div>
                <div class="divframe" style="height:auto;min-height:0;max-height:100px;border:0;text-align:right;">
                    <div v-for="(item,index) in barcodeList" class="listbarcode">
                        {{item}}
                        <el-button @@click.native.prevent="deleteRow(index)"
                                   type="text"
                                   size="mini"
                                   style="margin:0;padding:0;">
                            <i class="el-icon-error"></i>
                        </el-button>
                    </div>
                    <div>
                        <el-button v-on:click="clearList" size="mini" round>重置</el-button>
                        <el-button v-on:click="barGetListData" size="mini" round>查找</el-button>
                    </div>
                </div>
            </el-row>
            <el-row>
                <div class="divframe" style="text-align:center;min-height:0;max-height:200px;">
                    <el-button v-on:click="barGetListData2" size="mini" round>查看勾选条码</el-button>
                    <el-button v-on:click="print" size="mini" round>打印选中条码</el-button><br />
                    <span style="color:#409EFF">此订单已存在条码：</span>
                    <div style="max-height:150px;overflow:auto">
                        <template v-for="item in orderList">
                            <el-checkbox v-model="item.statu" size="mini" border style="padding:1px 3px;height:22px;margin:1px">{{item.value}}</el-checkbox>
                        </template>
                    </div>
                </div>
            </el-row>
            <el-row>
                <div id="img"></div>
            </el-row>
        </el-main>
    </el-container>
</div>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            selectOptions: [],
            selectVal: '',
            screenSize: document.body.clientWidth,
            loading: false,
            barcode: "",
            barcodeList: [],
            orderList: [],
            imgNum: 0,
            pageCount: 1,
            printOptions: [{
                value: '0',
                label: '选择打印机'
            }, {
                value: '172.16.99.240',
                label: '240'
            }, {
                value: '172.16.99.241',
                label: '241'
            }, {
                value: '172.16.99.242',
                label: '242'
            }],
            printSelect: ''
        },
        created: function () {
            axios.post('/Packagings/GetOrderList').then(rer => {
                this.selectOptions = rer.data;
            }).catch(err => {
                console.warn("获取选择列表失败")
            });
            window.onresize = function () {
                app.screenSize = document.body.clientWidth;
            };
        },
        mounted: function () {
            let localOrder = localStorage.getItem('Order');
            if (localOrder != null) {
                this.selectVal = localOrder;
            };
            let printIP = localStorage.getItem('printIP');
            if (printIP != null) {
                this.printSelect = printIP;
            };
            let localpage = localStorage.getItem('printPageCount');
            if (localpage != null) {
                this.pageCount = localpage;
            };
        },
        methods: {
            barScan: function (event) {
                let v = event.target.value, listData = this.barcodeList, orderList = this.orderList;
                if (v == "") {
                    return;
                };
                //检查重复
                for (let i in listData) {
                    if (listData[i] == v) {
                        this.$message({
                            showClose: true,
                            message: '已有重复条码！',
                            type: 'warning'
                        });
                        return;
                    };
                };
                axios.post('/Packagings/CheckOutsideBoxBadeCodeNumExist', { outsidebarcode: v }).then(res => {
                    if (res.data == "True") {
                        listData.push(v);
                        for (let o in orderList) {
                            if (v == orderList[o].value) {
                                orderList[o].statu = true;
                            };
                        };
                    } else {
                        this.$message({
                            showClose: true,
                            message: '不存在此条码！',
                            type: 'error'
                        });
                    };
                }).catch(err => {
                    console.warn("出错")
                });
                this.barcode = "";
            },
            //获取图片
            barGetListData: function () {
                let list = this.barcodeList;
                if (list.length > 0) {
                    $("#img>img").remove();
                    this.loading = true;
                    this.imgNum = 0;
                    for (let i in list) {
                        this.getImg(list[i], list.length);
                    };
                } else {
                    this.$message({
                        showClose: true,
                        message: '没有可查询清单！',
                        type: 'error'
                    });
                };
            },
            //获取图片
            barGetListData2: function () {
                let list = this.orderList, postList = [];
                if (list.length > 0) {
                    for (let i in list) {
                        if (list[i].statu == true) {
                            postList.push(list[i].value);
                        };
                    };
                    if (postList.length > 0) {
                        $("#img>img").remove();
                        this.loading = true;
                        this.imgNum = 0;
                        for (let i in postList) {
                            this.getImg(postList[i], postList.length);
                        };
                    } else {
                        this.$message({
                            showClose: true,
                            message: '没有勾选查询清单！',
                            type: 'error'
                        });
                    };
                } else {
                    this.$message({
                        showClose: true,
                        message: '没有可查询清单！',
                        type: 'error'
                    });
                };
            },
            //显示图片方法
            getImg: function (barcode, num) {
                axios.post('/Packagings/OutsideBoxLablePrintToImg', {
                    outsidebarcode: barcode,
                }, {
                        responseType: "arraybuffer",
                    }).then(function (response) {
                        //console.log(response.data)
                        //将从后台获取的图片流进行转换
                        return 'data:image/png;base64,' + btoa(
                            new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), '')
                        );
                    }).then(function (data) {
                        //接收转换后的Base64图片
                        //console.log(data);

                        ////DIV
                        //let newDiv = document.createElement("div");
                        //newDiv.style.width = "300px";
                        ////IMG
                        //let cc = new Image();
                        //cc.src = data;
                        ////BTN
                        //let button = document.createElement("input");
                        //button.setAttribute("type", "button");
                        //button.setAttribute("value", "打印标签");
                        //button.setAttribute("onclick", this.print());
                        ////生成
                        //newDiv.appendChild(button);
                        //newDiv.appendChild(cc);
                        let cc = new Image();
                        cc.src = data;
                        document.getElementById("img").appendChild(cc);

                        app.imgNum++;
                        if (app.imgNum == num) {
                            app.loading = false;
                        };
                    }).catch(err => {
                        app.imgNum++;
                        if (app.imgNum == num) {
                            app.loading = false;
                        };
                        console.warn("显示失败");
                    });
            },
            //打印
            print: function (v) {
                localStorage.setItem('printPageCount', this.pageCount);
                let list = this.orderList, postList = [];
                if (list.length > 0) {
                    for (let i in list) {
                        if (list[i].statu == true) {
                            postList.push(list[i].value);
                        };
                    };
                    if (postList.length > 0) {
                        this.loading = true;
                        this.imgNum = 0;
                        for (let i in postList) {
                            axios.post('/Packagings/OutsideBoxLablePrintAgain', {
                                outsidebarcode: postList[i],
                                pagecount: this.pageCount,
                                ip: this.printSelect,//ip地址
                                port: 9101,//端口
                            }).then(res => {
                                if (res.data == '打印成功！') {
                                    this.$message({
                                        showClose: true,
                                        message: res.data,
                                        type: 'success'
                                    });
                                } else {
                                    this.$message({
                                        showClose: true,
                                        message: res.data,
                                        type: 'error'
                                    });
                                };
                                this.imgNum++;
                                if (this.imgNum == postList.length) {
                                    this.loading = false;
                                };
                            }).catch(err => {
                                this.$message({
                                    showClose: true,
                                    message: '打印出错！',
                                    type: 'error'
                                });
                                this.imgNum++;
                                if (this.imgNum == postList.length) {
                                    this.loading = false;
                                };
                            });
                        };
                    } else {
                        this.$message({
                            showClose: true,
                            message: '没有勾选条码！',
                            type: 'error'
                        });
                    };
                } else {
                    this.$message({
                        showClose: true,
                        message: '条码清单为空！',
                        type: 'error'
                    });
                };
            },
            //删除行
            deleteRow: function (i) {
                this.barcodeList.splice(i, 1);
            },
            //重置
            clearList: function () {
                this.barcodeList = [];
                $("#img>img").remove();
                let OL = this.orderList;
                for (let i in OL) {
                    OL[i].statu = false;
                };
            },
        },
        watch: {
            selectVal: function (v) {
                localStorage.setItem('Order', v);
                this.orderList = [];
                axios.post('/Packagings/OutputOutsideBoxBarCodeNumList', { ordernum: v }).then(res => {
                    let rtd = res.data, OL = this.orderList;
                    for (let i in rtd) {
                        OL.push({
                            value: rtd[i],
                            statu: false
                        });
                    };
                }).catch(err => {
                    console.warn("出错")
                });
            },
            printSelect: (v) => {
                localStorage.setItem('printIP', v);
            }
        }
    });
</script>