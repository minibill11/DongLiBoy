
@{
    ViewBag.Title = "ViewDisplay";
}
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<h2 style="text-align:center">订单详情</h2>
<style>
    table .cell,table td {
        text-align: center;
        padding:2px !important;
    }
</style>
<div id="app">
    <el-button v-on:click="goBack" type="primary" size="mini"><i class="el-icon-d-arrow-left"></i>返回</el-button>
    <el-table v-bind:data="tableData"
              v-bind:span-method="objectSpanMethod"
              style="width: 100%"
              max-height="550"
              border
              >
        <el-table-column prop="orderN"
                         label="外箱条码"
                         
                         width="180">
        </el-table-column>
        <el-table-column prop="status"
                         label="状态"
                         
                         width="180">
        </el-table-column>
        <el-table-column prop="orderSon"
                         
                         label="模组条码">
        </el-table-column>
    </el-table>
</div>
    
<script>

    var app = new Vue({
        el: "#app",
        data: {
            orderNums:'',   // 无用变量
            tableData: [],
            spanArr: [],
            spanArrs:[],
            orderDetails: {
                orderNum: '',
                worth: '',
                moduleCount: '',
                packingCount: '',
                warehousJoinCount: '',
                warehousOutCount: '',
                warehouseJoinValue: '',
                uncompleteValue: '',
                warehousJoinComplete: '',
                warehousOutComplete: '',
                remark:''
            },
            originData:[]  //原始数据
        },
        mounted() {   // 页面加载时请求数据 以及将href中传递过来的属性值保存到data

            this.orderDetails.orderNum = getUrlParam('orderNum')
            this.orderDetails.worth = getUrlParam('worth')
            this.orderDetails.moduleCount = getUrlParam('moduleCount')
            this.orderDetails.packingCount = getUrlParam('packingCount')
            this.orderDetails.warehousJoinCount = getUrlParam('warehousJoinCount')
            this.orderDetails.warehousOutCount = getUrlParam('warehousOutCount')
            this.orderDetails.warehouseJoinValue = getUrlParam('warehouseJoinValue')
            this.orderDetails.uncompleteValue = getUrlParam('uncompleteValue')
            this.orderDetails.warehousJoinComplete = getUrlParam('warehousJoinComplete')
            this.orderDetails.warehousOutComplete = getUrlParam('warehousOutComplete')
            this.orderDetails.remark = getUrlParam('remark')

            //console.log(this.orderDetails)
            axios.post("/Packagings/DisplayWarehouse", { ordernum: this.orderDetails.orderNum }).then(res=> {
                console.log(`这是res.data${res.data}`)
                console.log(res.data)
                var tabledata = []
                for (let i in res.data) {
                    tabledata.push(res.data[i])
                }
                this.originData = tabledata   //保存每次加载的原始数据用来支持行合并计算
                console.log(tabledata)
                var finalArr = []
                tabledata.forEach(item=> {
                    for (let i = 0; i < item.codeList.length; i++) {
                        var obj = { orderN: item.otherBarcode, status: item.status, orderSon: item.codeList[i] }
                        finalArr.push(obj)
                    }
                })
                this.tableData = finalArr

                console.log('这是mounted的合并!');
                let contactDot = 0;
                let contactDots = 0;
                this.tableData.forEach((item, index) => {
                    if (index === 0) {
                        this.spanArr.push(1)
                    } else {
                        if (item.orderN === this.tableData[index - 1].orderN) {
                            this.spanArr[contactDot] += 1;
                            this.spanArr.push(0)
                        } else {
                            contactDot = index
                            this.spanArr.push(1)
                        }
                    }
                })
                this.tableData.forEach((item, index) => {
                    if (index === 0) {
                        this.spanArrs.push(1)
                    } else {
                        if (item.orderN === this.tableData[index - 1].orderN) {
                            this.spanArrs[contactDots] += 1;
                            this.spanArrs.push(0)
                        } else {
                            contactDots = index
                            this.spanArrs.push(1)
                        }
                    }
                })

                console.log("123456");
                console.log(this.spanArrs);

                //console.log(tabledata)
            }).catch(err=> {
                this.$message({
                    message: '链接失败！',
                    type: 'warning'
                });
            })

            


        },
        methods: {
            formatter(row, column) {
                //return row.address;
            },
            objectSpanMethod({row,column,rowIndex,columnIndex}) {
                if (columnIndex === 0) {
                    if (this.spanArr[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArr[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
                if (columnIndex === 1) {
                    if (this.spanArrs[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArrs[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
    },
    goBack() {
                history.back();
            },

        }
    })


    //  返回href中传递过来的属性值
    function getUrlParam(name) {
        //构造一个含有目标参数的正则表达式对象
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); 
        var r = window.location.search.substr(1).match(reg); //匹配目标参数
        //console.log('---rb--')
        var test = r[0].replace(/\&/g, '')
        var testArr = test.split('=')
        //console.log(r[0].replace(/\&/g, ''))
        //console.log(testArr[1])
        //console.log('---re--')
        if (r != null) {
            return testArr[1];
        } else {
            return null; //返回参数值
        }
    }
</script>