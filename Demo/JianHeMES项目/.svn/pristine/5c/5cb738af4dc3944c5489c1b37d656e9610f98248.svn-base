using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace JianHeMES.Controllers
{
    public class PlansController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        // GET: KPI
        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login2", "Users", new { col = "Plans", act = "Index" });
            }
            return View();
        }
        public ActionResult Section_Enter()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login2", "Users", new { col = "Plans", act = "Section_Enter" });
            }
            return View();
        }

        public ActionResult KPI_Plan()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login2", "Users", new { col = "Plans", act = "KPI_Plan" });
            }
            return View();
        }
        // GET: KPI/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }

        // GET: KPI/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: KPI/Create
        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            try
            {
                // TODO: Add insert logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: KPI/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: KPI/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: KPI/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        #region 工段工序功能集合
        //显示工段工序
        public ActionResult DisplayPlanSectionParameter()
        {
            JArray result = new JArray();
            var value = db.Plan_SectionParameter.Select(c=>c.Section).Distinct().ToList();
            foreach (var item in value)
            {
                var process= db.Plan_SectionParameter.Where(c=>c.Section==item).Select(c => c.Process).Distinct().ToList();
                foreach (var proitem in process)
                {
                    var iteminfo= db.Plan_SectionParameter.Where(c => c.Section == item&&c.Process==proitem&&c.IndicatorsType=="效率").FirstOrDefault();
                    JObject obj = new JObject();
                    obj.Add("id", iteminfo.Id);
                    obj.Add("Process", item);
                    obj.Add("Section", proitem);
                    obj.Add("XTable", iteminfo.Table);
                    obj.Add("XFinshTime", iteminfo.FinshTime);
                    obj.Add("XFinsh", iteminfo.Finsh);
                    obj.Add("XDerparment", iteminfo.Derparment);
                    var iteminfo2 = db.Plan_SectionParameter.Where(c => c.Section == item && c.Process == proitem && c.IndicatorsType == "品质").FirstOrDefault();
                    obj.Add("PTable", iteminfo2.Table);
                    obj.Add("PFinshTime", iteminfo2.FinshTime);
                    obj.Add("PFinsh", iteminfo2.Finsh);
                    obj.Add("PDerparment", iteminfo2.Derparment);
                    result.Add(obj);
                }
               
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //输入工段工序
        public ActionResult AddPlanSectionParameter(string seaction,string process,string XTable, string XFinshTime,string XFinsh,string XDerparment,string PTable,string PFinshTime,string PFinsh,string PDerparment)
        {
            JObject obj = new JObject();
            
            var info = db.Plan_SectionParameter.Count(c => c.Process == process && c.Section == seaction);
            if (info != 0)
            {
                obj.Add("mes", "已有重复工段工序");
                obj.Add("id", null);
                obj.Add("Process", null);
                obj.Add("Section", null);
                obj.Add("XTable", null);
                obj.Add("XFinshTime", null);
                obj.Add("XFinsh", null);
                obj.Add("XDerparment", null);
                obj.Add("PTable", null);
                obj.Add("PFinshTime", null);
                obj.Add("PFinsh", null);
                obj.Add("PDerparment", null);
                return Content(JsonConvert.SerializeObject(obj));
            }
            Plan_SectionParameter plan_ = new Plan_SectionParameter() { Process = process, Section = seaction, IndicatorsType = "品质", Table = PTable, FinshTime = PFinshTime, Finsh = PFinsh, Derparment = PDerparment, Createor = ((Users)Session["User"]) == null ? "测试人员" : ((Users)Session["User"]).UserName, CreateTime = DateTime.Now };
            Plan_SectionParameter plan_2 = new Plan_SectionParameter() { Process = process, Section = seaction, IndicatorsType = "效率", Table = XTable, FinshTime = XFinshTime, Finsh = XFinsh, Derparment = XDerparment, Createor = ((Users)Session["User"]) == null ? "测试人员" : ((Users)Session["User"]).UserName, CreateTime = DateTime.Now };
            db.Plan_SectionParameter.Add(plan_);
            db.Plan_SectionParameter.Add(plan_2) ;
            db.SaveChanges();

            var item = db.Plan_SectionParameter.Where(c => c.Process == process && c.Section == seaction && c.IndicatorsType=="效率").FirstOrDefault();
            var item2 = db.Plan_SectionParameter.Where(c => c.Process == process && c.Section == seaction && c.IndicatorsType == "品质").FirstOrDefault();
            obj.Add("mes", "新增成功");
            obj.Add("id", item.Id);
            obj.Add("Process", item.Process);
            obj.Add("Section", item.Section);
            if (item != null)
            {
                obj.Add("XTable", item.Table);
                obj.Add("XFinshTime", item.FinshTime);
                obj.Add("XFinsh", item.Finsh);
                obj.Add("XDerparment", item.Derparment);
            }
            else
            {
                obj.Add("XTable", null);
                obj.Add("XFinshTime", null);
                obj.Add("XFinsh", null);
                obj.Add("XDerparment", null);
            }
            if (item2 != null)
            {
                obj.Add("PTable", item2.Table);
                obj.Add("PFinshTime", item2.FinshTime);
                obj.Add("PFinsh", item2.Finsh);
                obj.Add("PDerparment", item2.Derparment);
            }
            else
            {
                obj.Add("PTable", null);
                obj.Add("PFinshTime", null);
                obj.Add("PFinsh", null);
                obj.Add("PDerparment", null);
            }
            return Content(JsonConvert.SerializeObject(obj));
        }

        //修改工段工序
        public string UpdatePlanSectionParameter(string oldProcess, string oldSection,string newProcess, string newSection,string XTable, string XFinshTime, string XFinsh, string XDerparment, string PTable, string PFinshTime, string PFinsh, string PDerparment)
        {
            var info = db.Plan_SectionParameter.Where(c=>c.Process== oldProcess && c.Section== oldSection).ToList();
            if (info == null)
            {
                return "找不到该信息记录";
            }
            //判断是否有重复的记录
            var check = db.Plan_SectionParameter.Count(c => c.Process == newProcess && c.Section == newSection);
            if (check != 0)
            {
                return "已有重复记录";
            }
            //判断指标清单表是否有记录
            var info2 = db.KPI_Indicators.Where(c => c.Process == oldProcess && c.Section == oldSection).ToList();

            var xinfo = info.Where(c => c.IndicatorsType == "效率").FirstOrDefault();
            xinfo.Process = newProcess;
            xinfo.Section = newSection;
            xinfo.Table = XTable;
            xinfo.FinshTime = XFinshTime;
            xinfo.Finsh = XFinsh;
            xinfo.Derparment = XDerparment;
            var qinfo= info.Where(c => c.IndicatorsType == "品质").FirstOrDefault();
            qinfo.Process = newProcess;
            qinfo.Section = newSection;
            qinfo.Table = PTable;
            qinfo.FinshTime = PFinshTime;
            qinfo.Finsh = PFinsh;
            qinfo.Derparment = PDerparment;

            info2.ForEach(c => {
                c.Section = newProcess;
                c.Process = newSection;
            });
            db.SaveChanges();
            return "true";
        }

        //删除工段工序
        public string DeletePlanSectionParameter(string Process, string Section)
        {
            var info = db.Plan_SectionParameter.Where(C => C.Process == Process && C.Section == Section).ToList(); ;
            if (info == null)
            {
                return "找不到改信息记录";
            }
            db.Plan_SectionParameter.RemoveRange(info);
            db.SaveChanges();
            return "true";
        }
        #endregion

        #region 各工段工序计划录入
        //显示
        public ActionResult DisplayPlan_FromKPI(string ordernum, string deparment, string group, string process, string section, DateTime? time)
        {
            JArray result = new JArray();
            var totalvalue = db.Plan_FromKPI.ToList();
            if (!string.IsNullOrEmpty(ordernum))
            {
                totalvalue = totalvalue.Where(c => c.OrderNum == ordernum).ToList();
            }
            if (!string.IsNullOrEmpty(deparment))
            {
                totalvalue = totalvalue.Where(c => c.Department == deparment).ToList();
            }
            if (!string.IsNullOrEmpty(group))
            {
                totalvalue = totalvalue.Where(c => c.Group == group).ToList();
            }
            if (!string.IsNullOrEmpty(process))
            {
                totalvalue = totalvalue.Where(c => c.Process == process).ToList();
            }
            if (!string.IsNullOrEmpty(section))
            {
                totalvalue = totalvalue.Where(c => c.Section == section).ToList();
            }

            if (time != null)
            {
                totalvalue = totalvalue.Where(c => c.PlanTime == time).ToList();
            }
            foreach (var item in totalvalue)
            {
                JObject obj = new JObject();
                obj.Add("ID", item.Id); //订单
                obj.Add("OrderNum", item.OrderNum); //订单
                obj.Add("Department", item.Department);//部门
                obj.Add("Group", item.Group);//班组
                obj.Add("Process", item.Process);//工段
                obj.Add("Section", item.Section);//工序
                obj.Add("IndicatorsType", item.IndicatorsType);//品质或者效率
                obj.Add("CheckDepartment", item.CheckDepartment);//检验部门
                obj.Add("CheckGroup", item.CheckGroup);//检验班组
                obj.Add("CheckType", item.CheckType);//抽检或全检
                obj.Add("PlanTime", item.PlanTime);//计划时间
                obj.Add("PlanNum", item.PlanNum);//计划数量
                result.Add(obj);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //新增
        public string AddPlan_FromKPI(List<Plan_FromKPI> Record)
        {
            string error = "";
            foreach (var item in Record)
            {
                var info = db.Plan_FromKPI.Count(c => c.PlanTime == item.PlanTime && c.OrderNum == item.OrderNum && c.Department == item.Department && c.Group == item.Group && c.Process == item.Process && c.Section == item.Section);
                if (info != 0)
                {
                    error = error + item.OrderNum + "在" + item.PlanTime + "已有" + item.Department + item.Group + "的计划记录.";

                }
            }
            if (string.IsNullOrEmpty(error))
            {
                Record.ForEach(c => { c.PlanCreateor = ((Users)Session["User"]) == null ? "张三" : ((Users)Session["User"]).UserName; c.PlanCreateTime = DateTime.Now; });
                db.Plan_FromKPI.AddRange(Record);
                db.SaveChanges();
                return "新增成功";
            }
            else
            {
                return error;
            }

        }
        //修改
        public string UpdatePlan_FromKPI(int id, Plan_FromKPI Record)
        {
            var info = db.Plan_FromKPI.Find(id);
            if (info == null)
            {
                return "没有找到数据";
            }
            info.OrderNum = Record.OrderNum;
            info.Department = Record.Department;
            info.Group = Record.Group;
            info.Process = Record.Process;
            info.Section = Record.Section;
            info.IndicatorsType = Record.IndicatorsType;
            info.CheckDepartment = Record.CheckDepartment;
            info.CheckGroup = Record.CheckGroup;
            info.CheckType = Record.CheckType;
            info.PlanTime = Record.PlanTime;
            info.PlanNum = Record.PlanNum;

            db.SaveChanges();
            return "修改成功";

        }

        //删除

        public string DeletePlan_FromKPI(int id)
        {
            var info = db.Plan_FromKPI.Find(id);
            if (info == null)
            {
                return "找不到该信息";
            }
            db.Plan_FromKPI.Remove(info);
            db.SaveChanges();
            return "true";
        }
        #endregion
    }
}
