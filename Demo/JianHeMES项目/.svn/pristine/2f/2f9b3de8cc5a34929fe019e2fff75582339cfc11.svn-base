using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using System.Drawing;
using System.IO;

namespace JianHeMES.Controllers
{
    public class ModuleManagementController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        #region------模块看板
        //模块看板首页
        public async Task<ActionResult> Index()
        {


            return View();
        }
        #endregion

        #region------各工序功能

        #region------后焊工序
        //后焊工序
        // GET: ModuleManagement/AfterWeldingCreate
        public ActionResult AfterWeldingCreate()
        {
            return View();
        }

        // POST: ModuleManagement/AfterWeldingCreate
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> AfterWeldingCreate(AfterWelding afterWelding)
        {
            if (ModelState.IsValid)
            {
                db.AfterWelding.Add(afterWelding);
                await db.SaveChangesAsync();
                return RedirectToAction("AfterWeldingCreate");
            }
            return View(afterWelding);
        }
        #endregion

        #region------灌胶前电检工序
        //灌胶前电检工序
        // GET: ModuleManagement/ElectricInspectionBeforeGlueFillingCreate
        public ActionResult ElectricInspectionBeforeGlueFillingCreate()
        {
            return View();
        }

        // POST: ModuleManagement/ElectricInspectionBeforeGlueFillingCreate
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ElectricInspectionBeforeGlueFillingCreate(ElectricInspection electricInspectionBeforeGlueFilling)
        {
            if (ModelState.IsValid)
            {
                db.ElectricInspection.Add(electricInspectionBeforeGlueFilling);
                await db.SaveChangesAsync();
                return RedirectToAction("ElectricInspectionBeforeGlueFillingCreate");
            }
            return View(electricInspectionBeforeGlueFilling);
        }
        #endregion

        #region------灌胶后电检工序
        //灌胶后电检工序
        // GET: ModuleManagement/ElectricInspectionAfterGlueFillingCreate
        public ActionResult ElectricInspectionAfterGlueFillingCreate()
        {
            return View();
        }

        // POST: ModuleManagement/ElectricInspectionAfterGlueFillingCreate
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ElectricInspectionAfterGlueFillingCreate(ElectricInspection electricInspectionAfterGlueFilling)
        {
            if (ModelState.IsValid)
            {
                db.ElectricInspection.Add(electricInspectionAfterGlueFilling);
                await db.SaveChangesAsync();
                return RedirectToAction("ElectricInspectionAfterGlueFillingCreate");
            }
            return View(electricInspectionAfterGlueFilling);
        }
        #endregion

        #endregion

        #region 内箱标签打印
        /// <summary>
        /// 后台绘图后打印方法
        /// </summary>
        /// <param name="pagecount"></param>
        /// <param name="barcode"></param>
        /// <param name="modulenum"></param>
        /// <param name="concentration">浓度</param>

        /// <returns></returns>

        public ActionResult InsideBoxLablePrint(string modulenum, string orderNum, int pagecount, string language, string sntn, string barcode = "", string ip = "", int port = 0, int concentration = 5, bool testswitch = false)
        {
            var list = modulenum.Split(',');
            //开始绘制图片
            int initialWidth = 510, initialHeight = 250;//宽2高1
            Bitmap theBitmap = new Bitmap(initialWidth, initialHeight);
            Graphics theGraphics = Graphics.FromImage(theBitmap);
            Brush bush = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //呈现质量
            theGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            //背景色
            theGraphics.Clear(System.Drawing.Color.FromArgb(120, 240, 180));

            Pen pen = new Pen(Color.Black, 3);
            theGraphics.DrawRectangle(pen, 36, 10, 460, 220); //460矩形的宽度 220矩形的高度
            //横线            
            theGraphics.DrawLine(pen, 36, 35, 495, 35);
            theGraphics.DrawLine(pen, 36, 60, 495, 60);
            theGraphics.DrawLine(pen, 36, 110, 495, 110);

            //竖线
            theGraphics.DrawLine(pen, 240, 10, 240, 60);

            //引入订单号文字
            StringFormat format = new StringFormat();
            format.Alignment = StringAlignment.Center; //居中 
            Rectangle orderRectangle = new Rectangle(14, 12, 245, 105);//文本矩形
            System.Drawing.Font myFont_order;
            myFont_order = new System.Drawing.Font("Microsoft YaHei UI", 14, FontStyle.Regular);
            if (language == "中")
            {
                theGraphics.DrawString("订   单   号", myFont_order, bush, orderRectangle, format);
            }
            else if (language == "英")
            {
                theGraphics.DrawString("Order  No", myFont_order, bush, orderRectangle, format);
            }
            else
            {
                Rectangle orderRectangle1 = new Rectangle(13, 12, 245, 105);//文本矩形
                theGraphics.DrawString("订单号 Order NO", myFont_order, bush, orderRectangle1, format);
            }

            //引入订单号值
            Rectangle orderNumberRectangle = new Rectangle(245, 12, 245, 105);
            theGraphics.DrawString(orderNum, myFont_order, bush, orderNumberRectangle, format);

            //引入件号、数文字
            if (language == "中")
            {
                Rectangle sntnRectangle = new Rectangle(12, 36, 245, 105);
                theGraphics.DrawString("件号 / 数", myFont_order, bush, sntnRectangle, format);
            }
            else if (language == "英")
            {
                Rectangle sntnRectangle = new Rectangle(12, 36, 245, 105);
                theGraphics.DrawString("SN / TN", myFont_order, bush, sntnRectangle, format);
            }
            else
            {
                Rectangle sntnRectangle = new Rectangle(21, 36, 245, 105);
                theGraphics.DrawString("件号 / 数（SN / TN）", myFont_order, bush, sntnRectangle, format);
            }

            //引入件号/数值
            Rectangle sntnValueRectangle = new Rectangle(245, 35, 245, 105);
            theGraphics.DrawString(sntn, myFont_order, bush, sntnValueRectangle, format);

            //引入条码
            StringFormat geshi = new StringFormat();
            geshi.Alignment = StringAlignment.Center; //居中
            Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(barcode, 380, 30);
            theGraphics.DrawImage(bmp_barcode, 80, 65, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

            //引入条码号
            System.Drawing.Font myFont_modulebarcodenum;
            myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 11, FontStyle.Regular);
            StringFormat geshi1 = new StringFormat();
            geshi1.Alignment = StringAlignment.Center; //居中
            theGraphics.DrawString(barcode, myFont_modulebarcodenum, bush, 260, 92, geshi);

            //// 引入模组号
            if (list.Length <= 4)
            {
                System.Drawing.Font myFont_modulenum_list;
                myFont_modulenum_list = new System.Drawing.Font("Microsoft YaHei UI", 20, FontStyle.Bold);
                StringFormat listformat = new StringFormat();
                listformat.Alignment = StringAlignment.Center;
                int top_y = 150;
                int left_x = 100;
                for (int i = 1; i < list.Count() + 1; i++)
                {
                    theGraphics.DrawString(list[i - 1], myFont_modulenum_list, bush, left_x, top_y, listformat);
                    left_x += 110;
                }
            }
            else if (list.Length > 4 && list.Length <= 8)
            {
                System.Drawing.Font myFont_modulenum_list;
                myFont_modulenum_list = new System.Drawing.Font("Microsoft YaHei UI", 18, FontStyle.Bold);
                StringFormat listformat = new StringFormat();
                listformat.Alignment = StringAlignment.Center;
                int top_y = 135;
                int left_x = 120;
                for (int i = 1; i < list.Count() + 1; i++)
                {
                    theGraphics.DrawString(list[i - 1], myFont_modulenum_list, bush, left_x, top_y, listformat);
                    if ((i % 4) != 0)
                    {
                        left_x += 100;
                    }
                    else
                    {
                        top_y += 40;
                        left_x -= 300;
                    }
                }
            }
            else if (list.Length > 8 && list.Length <= 12)
            {
                System.Drawing.Font myFont_modulenum_list;
                myFont_modulenum_list = new System.Drawing.Font("Microsoft YaHei UI", 18, FontStyle.Bold);
                StringFormat listformat = new StringFormat();
                listformat.Alignment = StringAlignment.Center;
                int top_y = 115;
                int left_x = 120;
                for (int i = 1; i < list.Count() + 1; i++)
                {
                    theGraphics.DrawString(list[i - 1], myFont_modulenum_list, bush, left_x, top_y, listformat);
                    if ((i % 4) != 0)
                    {
                        left_x += 100;
                    }
                    else
                    {
                        top_y += 40;
                        left_x -= 300;
                    }
                }
            }
            else if (list.Length > 12 && list.Length <= 16)
            {
                System.Drawing.Font myFont_modulenum_list;
                myFont_modulenum_list = new System.Drawing.Font("Microsoft YaHei UI", 14, FontStyle.Bold);
                StringFormat listformat = new StringFormat();
                listformat.Alignment = StringAlignment.Center;
                int top_y = 115;
                int left_x = 120;
                for (int i = 1; i < list.Count() + 1; i++)
                {
                    theGraphics.DrawString(list[i - 1], myFont_modulenum_list, bush, left_x, top_y, listformat);
                    if ((i % 4) != 0)
                    {
                        left_x += 100;
                    }
                    else
                    {
                        top_y += 30;
                        left_x -= 300;
                    }
                }
            }
            else
            {

            }

            string data = "^XA^MD" + concentration + "~DGR:ZONE.GRF,";//^MD5浓度
            Bitmap bm = new Bitmap(BarCodeLablePrint.ConvertTo1Bpp1(BarCodeLablePrint.ToGray(theBitmap)));//图形转二值

            //string ip = "172.16.99.240";//打印机IP地址
            //int port = 9101;//打印机端口

            if (testswitch == true)
            {
                MemoryStream ms = new MemoryStream();
                theBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                theBitmap.Dispose();
                return File(ms.ToArray(), "image/Png");
            }
            else
            {
                int totalbytes = bm.ToString().Length;
                int rowbytes = 10;
                string hex = ZebraUnity.BmpToZpl(bm, out totalbytes, out rowbytes);
                data += totalbytes + "," + rowbytes + "," + hex;
                data += "^LH0,0^FO150,0^XGR:ZONE.GRF^FS^XZ";
                string result = ZebraUnity.IPPrint(data.ToString(), pagecount, ip, port);
                return Content(result);
            }
        }

        #endregion

        #region---模块条码打印---30*40
        public ActionResult ModuleBarcodePrinting1(string[] modulenum, int pagecount, string barcode = "", string ip = "", int port = 0, int concentration = 5, bool testswitch = false)
        {
            //开始绘制图片
            int initialWidth = 520, initialHeight = 250;//宽2高1
            Bitmap theBitmap = new Bitmap(initialWidth, initialHeight);
            Graphics theGraphics = Graphics.FromImage(theBitmap);
            Brush bush = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //呈现质量
            theGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            //背景色
            theGraphics.Clear(System.Drawing.Color.FromArgb(120, 240, 180));

            Pen pen = new Pen(Color.Black, 1);
            theGraphics.DrawRectangle(pen, 32, 8, 475, 238); //460矩形的宽度 220矩形的高度
            //横线            
            theGraphics.DrawLine(pen, 32, 40, 502, 40);
            theGraphics.DrawLine(pen, 32, 40, 502, 40);
            theGraphics.DrawLine(pen, 32, 72, 502, 72);
            theGraphics.DrawLine(pen, 32, 104, 502, 104);
            theGraphics.DrawLine(pen, 32, 136, 502, 136);
            theGraphics.DrawLine(pen, 32, 168, 502, 168);
            theGraphics.DrawLine(pen, 32, 200, 502, 200);
            //竖线
            theGraphics.DrawLine(pen, 260, 0, 260, 235);

            //引入条码
            int cout = 0;
            int left_x = 10;
            int top_y = 50;
            int left_xx = 23;
            int top_yy = 140;
            foreach (var item in modulenum)
            {
                if (cout <= 5)
                {
                    //条形码
                    StringFormat geshi = new StringFormat();
                    geshi.Alignment = StringAlignment.Center; //居中
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(item, 200, 16);
                    theGraphics.DrawImage(bmp_barcode, top_y, left_x, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    System.Drawing.Font myFont_modulebarcodenum;
                    myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 8, FontStyle.Regular);
                    StringFormat geshi1 = new StringFormat();
                    geshi1.Alignment = StringAlignment.Center; //居中
                    theGraphics.DrawString(item, myFont_modulebarcodenum, bush, top_yy, left_xx, geshi);
                    cout++;
                    left_x += 32;
                    left_xx += 32;
                }
                else if (cout >= 6 && cout <= 11)
                {
                    if (cout == 6)
                    {
                        left_x = 10;
                        left_xx = 23;
                        top_y = 290;
                        top_yy = 385;
                    }
                    //条形码
                    StringFormat geshi = new StringFormat();
                    geshi.Alignment = StringAlignment.Center; //居中
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(item, 200, 16);
                    theGraphics.DrawImage(bmp_barcode, top_y, left_x, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    System.Drawing.Font myFont_modulebarcodenum;
                    myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 8, FontStyle.Regular);
                    StringFormat geshi1 = new StringFormat();
                    geshi1.Alignment = StringAlignment.Center; //居中
                    theGraphics.DrawString(item, myFont_modulebarcodenum, bush, top_yy, left_xx, geshi);
                    cout++;
                    if (cout > 6)
                    {
                        left_x += 32;
                        left_xx += 32;
                    }
                }
            }

            string data = "^XA^MD" + concentration + "~DGR:ZONE.GRF,";//^MD5浓度
            Bitmap bm = new Bitmap(BarCodeLablePrint.ConvertTo1Bpp1(BarCodeLablePrint.ToGray(theBitmap)));//图形转二值

            if (testswitch == true)
            {
                MemoryStream ms = new MemoryStream();
                theBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                theBitmap.Dispose();
                return File(ms.ToArray(), "image/Png");
            }
            else
            {
                int totalbytes = bm.ToString().Length;
                int rowbytes = 10;
                string hex = ZebraUnity.BmpToZpl(bm, out totalbytes, out rowbytes);
                data += totalbytes + "," + rowbytes + "," + hex;
                data += "^LH0,0^FO150,0^XGR:ZONE.GRF^FS^XZ";
                string result = ZebraUnity.IPPrint(data.ToString(), pagecount, ip, port);
                return Content(result);
            }
        }
        #endregion

        #region---模块条码打印
        public ActionResult ModuleBarcodePrinting(string[] modulenum, int pagecount, string barcode = "", string ip = "", int port = 0, int concentration = 5, bool testswitch = false)
        {
            //开始绘制图片
            int initialWidth = 750, initialHeight = 1000;//宽2高1
            Bitmap theBitmap = new Bitmap(initialWidth, initialHeight);
            Graphics theGraphics = Graphics.FromImage(theBitmap);
            Brush bush = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //Brush bush1 = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //呈现质量
            theGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            //背景色
            theGraphics.Clear(System.Drawing.Color.FromArgb(255, 255, 255));

            Pen pen = new Pen(Color.Black, 3);
            theGraphics.DrawRectangle(pen, 5, 40, 675, 895); //460矩形的宽度 220矩形的高度

            ////横线 
            int x_axis = 5;
            int y_axis = 72;
            int high = 678;
            for (var i = 0; i < 27; i++)
            {
                theGraphics.DrawLine(pen, x_axis, y_axis, high, y_axis);
                y_axis += 32;
            }

            ////竖线
            theGraphics.DrawLine(pen, 229, 40, 229, 935);
            theGraphics.DrawLine(pen, 453, 40, 453, 935);

            //引入条码
            int cout = 0;
            int left_x = 44;
            int top_y = 19;
            int left_xx = 57;
            int top_yy = 120;
            foreach (var item in modulenum)
            {
                if (cout <= 27)
                {
                    //条形码
                    StringFormat geshi = new StringFormat();
                    geshi.Alignment = StringAlignment.Center; //居中
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(item, 200, 16);
                    theGraphics.DrawImage(bmp_barcode, top_y, left_x, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    System.Drawing.Font myFont_modulebarcodenum;
                    myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 8, FontStyle.Regular);
                    theGraphics.DrawString(item, myFont_modulebarcodenum, bush, top_yy, left_xx, geshi);
                    cout++;
                    left_x += 32;
                    left_xx += 32;
                }
                else if (cout >= 28 && cout <= 55)
                {
                    if (cout == 28)
                    {
                        left_x = 44;
                        top_y = 245;

                        left_xx = 57;
                        top_yy = 350;
                    }
                    //条形码
                    StringFormat geshi = new StringFormat();
                    geshi.Alignment = StringAlignment.Center; //居中
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(item, 200, 16);
                    theGraphics.DrawImage(bmp_barcode, top_y, left_x, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    System.Drawing.Font myFont_modulebarcodenum;
                    myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 8, FontStyle.Regular);
                    theGraphics.DrawString(item, myFont_modulebarcodenum, bush, top_yy, left_xx, geshi);
                    cout++;
                    if (cout > 28 && cout <= 55)
                    {
                        left_x += 32;
                        left_xx += 32;
                    }
                }
                else if (cout >= 56 && cout <= 83)
                {
                    if (cout == 56)
                    {
                        left_x = 44;
                        top_y = 471;

                        left_xx = 57;
                        top_yy = 580;
                    }
                    //条形码
                    StringFormat geshi = new StringFormat();
                    geshi.Alignment = StringAlignment.Center; //居中
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(item, 200, 16);
                    theGraphics.DrawImage(bmp_barcode, top_y, left_x, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    System.Drawing.Font myFont_modulebarcodenum;
                    myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 8, FontStyle.Regular);
                    theGraphics.DrawString(item, myFont_modulebarcodenum, bush, top_yy, left_xx, geshi);
                    cout++;
                    if (cout > 56 && cout <= 83)
                    {
                        left_x += 32;
                        left_xx += 32;
                    }

                }
            }

            string data = "^XA^MD" + concentration + "~DGR:ZONE.GRF,";//^MD5浓度
            Bitmap bm = new Bitmap(BarCodeLablePrint.ConvertTo1Bpp1(BarCodeLablePrint.ToGray(theBitmap)));//图形转二值

            if (testswitch == true)
            {
                MemoryStream ms = new MemoryStream();
                theBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                theBitmap.Dispose();
                return File(ms.ToArray(), "image/Png");
            }
            else
            {
                int totalbytes = bm.ToString().Length;
                int rowbytes = 10;
                string hex = ZebraUnity.BmpToZpl(bm, out totalbytes, out rowbytes);
                data += totalbytes + "," + rowbytes + "," + hex;
                data += "^LH0,0^FO70,0^XGR:ZONE.GRF^FS^XZ";
                string result = ZebraUnity.IPPrint(data.ToString(), pagecount, ip, port);
                return Content(result);
            }
        }

        public ActionResult ModuleBarcodePrinting2(string[] modulenum, int pagecount, string barcode = "", string ip = "", int port = 0, int concentration = 5, bool testswitch = false)
        {
            string[] modulelist = new string[6];
            modulelist[0] = "B00001";
            modulelist[1] = "B00002";
            modulelist[2] = "B00003";
            //modulelist[3] = "2019YA00101B00004";
            //modulelist[4] = "2019YA00101B00005";
            //modulelist[5] = "2019YA00101B00006";

            //开始绘制图片
            int initialWidth = 716, initialHeight = 33;//宽2高1
            Bitmap theBitmap = new Bitmap(initialWidth, initialHeight);
            Graphics theGraphics = Graphics.FromImage(theBitmap);
            Brush bush = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //Brush bush1 = new SolidBrush(System.Drawing.Color.Black);//填充的颜色
            //呈现质量
            theGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            //背景色
            theGraphics.Clear(System.Drawing.Color.FromArgb(255, 255, 255));

            Pen pen = new Pen(Color.Black, 1);
            //theGraphics.DrawRectangle(pen, 0, 0, 700, 33); //460矩形的宽度 220矩形的高度
            ////横线 
           //theGraphics.DrawLine(pen, 0, 30, 932, 30);
            ////竖线
            //theGraphics.DrawLine(pen, 229, 0, 229, 28);
            //theGraphics.DrawLine(pen, 453, 0, 453, 28);

            //引入条码
            int default_left_y = 0;
            int default_top_x = 5;
            double default_left_yy = 9;
            int default_top_xx = 90;
            //int left_y = 0;
            int top_x = 5;
            //int left_yy = 13;
            int top_xx = 90;
            StringFormat geshi = new StringFormat();
            geshi.Alignment = StringAlignment.Center; //居中
            System.Drawing.Font myFont_modulebarcodenum;
            myFont_modulebarcodenum = new System.Drawing.Font("Malgun Gothic", 10, FontStyle.Bold);
            for (var i = 1; i < modulenum.Count()+1; i++)
            {                
                if ((i % 3) == 0)
                {
                    //条形码
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(modulenum[i - 1], 200, 14);
                    theGraphics.DrawImage(bmp_barcode, top_x, default_left_y, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    theGraphics.DrawString(modulenum[i - 1], myFont_modulebarcodenum, bush, top_xx, (float)default_left_yy, geshi);
                    top_x = default_top_x;
                    top_xx = default_top_xx;
                }
                else
                {
                    //条形码
                    Bitmap bmp_barcode = BarCodeLablePrint.BarCodeToImg(modulenum[i - 1], 200, 14);
                    theGraphics.DrawImage(bmp_barcode, top_x, default_left_y, (float)(bmp_barcode.Width), (float)(bmp_barcode.Height));

                    //条码号
                    theGraphics.DrawString(modulenum[i - 1], myFont_modulebarcodenum, bush, top_xx, (float)default_left_yy, geshi);
                    top_x += 228;
                    top_xx += 239;
                }
            }

            string data = "^XA^MD" + concentration + "~DGR:ZONE.GRF,";//^MD5浓度
            Bitmap bm = new Bitmap(BarCodeLablePrint.ConvertTo1Bpp1(BarCodeLablePrint.ToGray(theBitmap)));//图形转二值

            if (testswitch == true)
            {
                MemoryStream ms = new MemoryStream();
                theBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                theBitmap.Dispose();
                return File(ms.ToArray(), "image/Png");
            }
            else
            {
                int totalbytes = bm.ToString().Length;
                int rowbytes = 10;
                string hex = ZebraUnity.BmpToZpl(bm, out totalbytes, out rowbytes);
                data += totalbytes + "," + rowbytes + "," + hex;
                data += "^LH0,0^FO60,1^XGR:ZONE.GRF^FS^XZ";

                concentration = 10;
                data = "^XA^MD" + concentration + "^LH0,0^FO62,5^BCN,15,Y,N^BY1,1,15^FD" + modulelist[0] + "^FS";//第一个条码
                data += "^FO295,5^BCN,15,Y,N^BY1,1,15^FD" + modulelist[1] + "^FS";//第二个条码
                data += "^FO520,5^BCN,15,Y,N^BY1,1,15^FD" + modulelist[2] + "^FS^XZ";// + "^FS"第三个条码
                //data += "^FO90,9^A@N,3,2,E:ARIALR.FNT^FDWO:" + modulelist[0] + "^FS";//第一个条码的字符数字
                //data += "^FO330,9^A@N,3,2,E:ARIALR.FNT^FDWO:" + modulelist[1] + "^FS";//第二个条码的字符数字
                //data += "^FO570,9^A@N,3,2,E:ARIALR.FNT^FDWO:" + modulelist[2]+ "^FS^XZ";//第三个条码的字符数字
                string result = ZebraUnity.IPPrint(data.ToString(), pagecount, ip, port);
                return Content(result);

                /*条码打印命令说明
                ^XA //条码打印指令开始
                ^MD30 //设置色带颜色的深度, 取值范围从-30到30
                ^LH60,10 //设置条码纸的边距
                ^FO20,10 //设置条码左上角的位置
                ^ACN,18,10 //设置字体
                ^BY1.4,3,50 //设置条码样式。1.4是条码的缩放级别，3是条码中粗细柱的比例, 50是条码高度
                ^BC,,Y,N //打印code128的指令
                ^FD12345678^FS //设置要打印的内容, ^FD是要打印的条码内容^FS表示换行
                ^XZ //条码打印指令结束
                */ 
                //上面的指令会打印12345678的CODE128的条码
            }
        }

        #endregion

    }
}
