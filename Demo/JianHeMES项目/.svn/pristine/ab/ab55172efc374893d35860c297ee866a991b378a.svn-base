using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Threading.Tasks;

namespace JianHeMES.Controllers
{
    public class SMT_SulderpasterController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        private CommonalityController com = new CommonalityController();
        // GET: SMT_Sulderpaster
        //锡膏入库
        public ActionResult AddWarehouseBaseInfo()
        {
            return View();
        }
        //锡膏入冰柜
        public ActionResult AddWarehouseFreezer()
        {
            return View();
        }
        //入SMT冰柜
        public ActionResult AddSMTFreezer()
        {
            return View();
        }
        //回温
        public ActionResult Rewarming()
        {
            return View();
        }
        //搅拌
        public ActionResult Stir()
        {
            return View();
        }
        //使用
        public ActionResult Use()
        {
            return View();
        }
        //回收
        public ActionResult recovery()
        {
            return View();
        }
        //看板
        public ActionResult board()
        {
            return View();
        }
        #region 物料表
        //录入物料信息
        public bool Addwarehouse_Material(Warehouse_Material warehouse_Material)
        {
            db.Warehouse_Material.Add(warehouse_Material);
            db.SaveChanges();
            return true;
        }

        #endregion

        #region 锡膏入库
        //仓库基本信息录入
        [HttpPost]
        public bool AddWarehouseBaseInfo(Warehouse_BaseInfo warehouse_BaseInfo)
        {
            if (((Users)Session["User"]) != null)
            {
                if (ModelState.IsValid)
                {
                    warehouse_BaseInfo.CheckTime = DateTime.Now;
                    warehouse_BaseInfo.Username = ((Users)Session["User"]).UserName;
                    warehouse_BaseInfo.JobNum = ((Users)Session["User"]).UserNum.ToString();
                    db.Warehouse_BaseInfo.Add(warehouse_BaseInfo);
                    db.SaveChanges();
                    return true;
                }
            }
            return false;
        }

        ////锡膏条码生成
        //public List<string> AddBarcode(string receivingNum, DateTime productionDate, int Num)
        //{
        //    if (!string.IsNullOrEmpty(receivingNum) || productionDate != null)
        //    {
        //        string year = productionDate.Year.ToString().Substring(2);
        //        List<string> barcodeList = new List<string>();
        //        for (int i = 1; i <= Num; i++)
        //        {
        //            var lastBarcode = db.Barcode_Solderpaste.Where(c => c.ReceivingNum == receivingNum).OrderByDescending(c => c.SolderpasterBacrcode).FirstOrDefault();
        //            if (lastBarcode != null&&lastBarcode.LeaveFactoryTime==productionDate)
        //            {

        //                string lastNUm = lastBarcode.SolderpasterBacrcode.Substring(lastBarcode.SolderpasterBacrcode.Length-3,3);
        //                i = int.Parse(lastNUm)+1;
        //            }

        //            string barcode = receivingNum + "-" + year + productionDate.Month.ToString() + productionDate.Day.ToString() + "-" + i.ToString().PadLeft(3, '0');
        //            barcodeList.Add(barcode);
        //        }
        //        return barcodeList;
        //    }
        //    return null;
        //}

        /// <summary>
        /// 打印条码
        /// </summary>
        /// <param name="Batch"> 批次</param>
        /// <param name="ReceivingNum">料号</param>
        /// <param name="LeaveFactoryTime">生产时间</param>
        /// <param name="Supplier">供应商</param>
        /// <param name="SolderpasteType">型号</param>
        public async Task<bool> AddBarcode_SolderpasteAsync(string Batch, string ReceivingNum, DateTime LeaveFactoryTime, string Supplier, string SolderpasteType, int EffectiveDay, int Num)
        {
            if (!string.IsNullOrEmpty(ReceivingNum) || LeaveFactoryTime != null)
            {
                string year = LeaveFactoryTime.Year.ToString().Substring(2);
                List<string> barcodeList = new List<string>();
                int count = 0;
                for (int i = 1; i <= Num; i++)
                {
                    var lastBarcode = db.Barcode_Solderpaste.Where(c => c.ReceivingNum == ReceivingNum).OrderByDescending(c => c.SolderpasterBacrcode).FirstOrDefault();
                    if (lastBarcode != null && lastBarcode.LeaveFactoryTime == LeaveFactoryTime)
                    {

                        string lastNUm = lastBarcode.SolderpasterBacrcode.Substring(lastBarcode.SolderpasterBacrcode.Length - 3, 3);
                        i = int.Parse(lastNUm) + 1;
                    }

                    string barcode = ReceivingNum + "-" + year + LeaveFactoryTime.Month.ToString() + LeaveFactoryTime.Day.ToString() + "-" + i.ToString().PadLeft(3, '0');

                    Barcode_Solderpaste barcode_Solderpaste = new Barcode_Solderpaste() { SolderpasterBacrcode = barcode, Batch = Batch, LeaveFactoryTime = LeaveFactoryTime, ReceivingNum = ReceivingNum, SolderpasteType = SolderpasteType, Supplier = Supplier, PrintTime = DateTime.Now, PrintName = "张三" };
                    db.Barcode_Solderpaste.Add(barcode_Solderpaste);
                    count +=await db.SaveChangesAsync();
                }
                if (count == Num)
                    return true;
            }
            return false;
        }

        //输入物料号，返回物料信息
        public ActionResult GetMaterialInfo(string Material)
        {
            var info = db.Warehouse_Material.Where(c => c.MaterialNum == Material).FirstOrDefault();
            JObject message = new JObject();
            message.Add("type", info.Type);
            //厂商简称
            message.Add("ManufactorName", info.ManufactorName);
            //厂商编号
            message.Add("ManufactorNum", info.ManufactorNum);
            return Content(JsonConvert.SerializeObject(message));
        }
        #endregion

        #region 入冰柜
        //入仓库冰柜
        [HttpPost]
        public async Task<bool> AddWarehouseFreezerAsync(List<string> warehouse_FreezerList, string warehouseNum)
        {
            //if (((Users)Session["User"]) != null)
            //{
            int count = 0;
            foreach (var item in warehouse_FreezerList)
            {
                Warehouse_Freezer warehouse_Freezer = new Warehouse_Freezer();
                warehouse_Freezer.SolderpasterBacrcode = item;
                warehouse_Freezer.WarehouseNum = warehouseNum;
                warehouse_Freezer.IntoTime = DateTime.Now;
                warehouse_Freezer.UserName = "张丹媛";
                warehouse_Freezer.JobNum = "16621";
                db.Warehouse_Freezer.Add(warehouse_Freezer);
                count +=await db.SaveChangesAsync();
            }
            if (count == warehouse_FreezerList.Count())
                return true;
            else
                return false;
            //}
            //return Content("false");
        }
        /// <summary>
        /// 条码检验
        /// </summary>
        /// <param name="smt_FreezerList">条码列表</param>
        /// <param name="statu">例：仓库，冰柜，回温，领用</param>
        /// <param name="belogin">冰柜专属 如：仓库，回温，领用</param>
        /// <returns></returns>
        public ActionResult CheckSMTFreezer(List<string> smt_FreezerList, string statu, string belogin = null)
        {
            JArray List = new JArray();
            foreach (var item in smt_FreezerList)
            {
                JObject jObject = new JObject();
                jObject.Add("barcode", item);
                var startime = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.PrintTime).FirstOrDefault();
                if (startime == null)
                {
                    jObject.Add("Tips", "没有找到此条码");
                }
                else
                {
                    var spantime = com.TwoDTforMonth_sub(DateTime.Now, startime);
                    var recyle = db.SMT_Recycle.Count(c => c.SolderpasterBacrcode == item);
                    if (spantime >= 5 && spantime < 6)
                    {
                        jObject.Add("Tips", "将过期");
                    }
                    else if (spantime >= 6)
                    {
                        jObject.Add("Tips", "已过期");
                    }

                    else if (recyle != 0)
                    {
                        jObject.Add("Tips", "此条码已回收");
                    }
                    else
                    {
                        if (statu == "冰柜")
                        {
                            var freezecount = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item && c.Belogin == belogin).OrderByDescending(c => c.IntoTime).Select(c => c.IntoTime).FirstOrDefault();

                            if (belogin == "仓库")
                            {
                                if (freezecount != null)
                                { jObject.Add("Tips", "此条码已存在SMT冰柜中"); }
                                else
                                    jObject.Add("Tips", "正常");
                            }
                            else if (belogin == "回温")
                            {
                                var warmcount = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();
                                if (warmcount <= freezecount)
                                { jObject.Add("Tips", "此条码已存在SMT冰柜中"); }
                                else
                                    jObject.Add("Tips", "正常");
                            }
                            else if (belogin == "领用")
                            {
                                var emply = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();
                                if (emply <= freezecount)
                                { jObject.Add("Tips", "此条码已存在SMT冰柜中"); }
                                else
                                    jObject.Add("Tips", "正常");
                            }
                        }
                        else if (statu == "回温")
                        {
                            var freeze = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.IntoTime).Select(c => c.IntoTime).FirstOrDefault();
                            var warm = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();
                            if (warm != null || warm >= freeze)
                            { jObject.Add("Tips", "此条码已在回温中"); }
                            else
                                jObject.Add("Tips", "正常");
                        }
                        else if (statu == "领用")
                        {
                            var warm=db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();
                            var stri=db.SMT_Stir.Where(c=>c.SolderpasterBacrcode==item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();

                            var freeze = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.IntoTime).Select(c => c.IntoTime).FirstOrDefault();
                            var emply = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == item).OrderByDescending(c => c.StartTime).Select(c => c.StartTime).FirstOrDefault();
                            if (stri < warm)
                            {
                                jObject.Add("Tips", "此条码未经过搅拌");
                            }
                            else if (emply != null || emply >= freeze)
                            { jObject.Add("Tips", "此条码已经在使用中"); }
                            else
                                jObject.Add("Tips", "正常");
                        }
                        else
                        {
                            jObject.Add("Tips", "正常");
                        }
                    }
                }
                List.Add(jObject);
            }
            return Content(JsonConvert.SerializeObject(List));
        }

        //入SMT冰柜右边列表
        public ActionResult CheckSMTFreezeList()
        {
            var rewarm = db.Warehouse_Freezer.OrderBy(c => c.IntoTime).Select(c => c.SolderpasterBacrcode).ToList();

            List<string> distin = new List<string>();
            //排序
            //var orderbydate=rewarm
            JArray list = new JArray();
            foreach (var item in rewarm)
            {
                //去重
                if (distin.Contains(item))
                { continue; }

                JObject rejobject = new JObject();

                rejobject.Add("barcode", item);
                //var time = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).Max(c => c.StartTime);
                var time = db.Warehouse_Freezer.Where(c => c.SolderpasterBacrcode == item).Max(c => c.IntoTime);
                var imespan = DateTime.Now - time;
                rejobject.Add("freezespan", imespan.Value.TotalSeconds);

                var productiontime = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.LeaveFactoryTime).FirstOrDefault();
                if (productiontime == null)
                {
                    continue;
                }
                var span = (DateTime.Now.Date - productiontime).Value.TotalDays;
                var effiday = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.EffectiveDay).FirstOrDefault();
                rejobject.Add("overdue", effiday-span);

                list.Add(rejobject);

                distin.Add(item);
            }
            return Content(JsonConvert.SerializeObject(list));
        }


        //入SMT冰柜
        [HttpPost]
        public async Task<bool> AddSMTFreezerAsync(List<string> smt_FreezerList, string belogin)
        {
            //if (((Users)Session["User"]) != null)
            //{
            int count = 0;
            foreach (var item in smt_FreezerList)
            {
                SMT_Freezer smt_Freezer = new SMT_Freezer();
                smt_Freezer.SolderpasterBacrcode = item;
                smt_Freezer.IntoTime = DateTime.Now;
                smt_Freezer.UserName = ((Users)Session["User"]) == null ? "张丹媛" : ((Users)Session["User"]).UserName;
                smt_Freezer.JobNum = ((Users)Session["User"]) == null ? "16621" : ((Users)Session["User"]).UserNum.ToString();

                smt_Freezer.Belogin = belogin;

                db.SMT_Freezer.Add(smt_Freezer);
               count +=await db.SaveChangesAsync();
            }
            if (count == smt_FreezerList.Count())
                return true;
            else
                return false;

            //}
            //return Content("false");
        }

        #endregion

        #region 回温
        //回温输入旁边列表
        public ActionResult CheckSMTRewarm()
        {
            var rewarm = db.SMT_Freezer.OrderBy(c => c.IntoTime).Select(c => c.SolderpasterBacrcode).ToList();

            List<string> distin = new List<string>();
            //排序
            //var orderbydate=rewarm
            JArray list = new JArray();
            foreach (var item in rewarm)
            {
                //去重
                if (distin.Contains(item))
                { continue; }

                JObject rejobject = new JObject();
                //最晚一条回温记录
                var warmcount = db.SMT_Rewarm.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == item).Select(c => c.StartTime).FirstOrDefault();
                //最晚一条搅拌记录
                var sitcount = db.SMT_Stir.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == item).Select(c => c.StartTime).FirstOrDefault(); ;
                if (warmcount != null && sitcount != null && sitcount < warmcount)
                {
                    rejobject.Add("barcode", item);
                    //var time = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).Max(c => c.StartTime);
                    var time = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item).Max(c => c.IntoTime);
                    var imespan = DateTime.Now - time;
                    rejobject.Add("freezespan", imespan.Value.TotalSeconds);

                    var productiontime = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.LeaveFactoryTime).FirstOrDefault();
                    if (productiontime == null)
                    {
                        continue;
                    }
                    var span = (DateTime.Now.Date - productiontime).Value.TotalDays;
                    var effiday = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.EffectiveDay).FirstOrDefault();
                    rejobject.Add("overdue", effiday - span);

                    list.Add(rejobject);
                }
                distin.Add(item);
            }
            return Content(JsonConvert.SerializeObject(list));
        }


        //开始回温
        [HttpPost]
        public async Task<bool> AddSMTRewarmAsync(List<string> smt_RewarmList)
        {
            //if (((Users)Session["User"]) != null)
            //{
            int count = 0;
            foreach (var item in smt_RewarmList)
            {
                SMT_Rewarm smt_Rewarm = new SMT_Rewarm();
                smt_Rewarm.SolderpasterBacrcode = item;
                smt_Rewarm.StartTime = DateTime.Now;
                smt_Rewarm.UserName = ((Users)Session["User"]) == null ? "张丹媛" : ((Users)Session["User"]).UserName;
                smt_Rewarm.JobNum = ((Users)Session["User"]) == null ? "16621" : ((Users)Session["User"]).UserNum.ToString();
                db.SMT_Rewarm.Add(smt_Rewarm);
                count +=await db.SaveChangesAsync();
            }
            if (count == smt_RewarmList.Count())
                return true;

            else
                return false;
            //}
            //return Content("false");
        }

        
        //回温记录
        public ActionResult RewarmInfo()
        {
            var rewarm = db.SMT_Rewarm.OrderBy(c => c.StartTime).Select(c => c.SolderpasterBacrcode).Distinct().ToList();
            List<string> distin = new List<string>();
            //排序
            //var orderbydate=rewarm
            JArray list = new JArray();
            foreach (var item in rewarm)
            {
                //去重
                if (distin.Contains(item))
                { continue; }
                JObject rejobject = new JObject();
                var warmcount = db.SMT_Rewarm.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == item).Select(c => c.StartTime).FirstOrDefault();
                var sitcount = db.SMT_Stir.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == item).Select(c => c.StartTime).FirstOrDefault(); ;
                if (warmcount != null && sitcount != null && sitcount < warmcount)
                {
                    rejobject.Add("barcode", item);
                    var time = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item).Max(c => c.StartTime);
                    var imespan = DateTime.Now - time;
                    rejobject.Add("retimespan", imespan.Value.TotalSeconds);

                    var productiontime = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.LeaveFactoryTime).FirstOrDefault();
                    if (productiontime == null)
                    {
                        continue;
                    }
                    var span = (DateTime.Now.Date - productiontime).Value.TotalDays;
                    var effiday = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == item).Select(c => c.EffectiveDay).FirstOrDefault();
                    rejobject.Add("overdue", effiday - span);

                    list.Add(rejobject);
                }
            }
            return Content(JsonConvert.SerializeObject(list));
        }

        [HttpPost]
        //回温记录搜索
        public ActionResult RewarmInfo(string barocde)
        {
            var barcode = db.SMT_Rewarm.Count(c => c.SolderpasterBacrcode == barocde);
            if (barcode != 0)
            {
                JObject rejobject = new JObject();
                var warmcount = db.SMT_Rewarm.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == barocde).Select(c => c.StartTime).FirstOrDefault();
                var sitcount = db.SMT_Stir.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == barocde).Select(c => c.StartTime).FirstOrDefault(); ;
                if (warmcount != null && sitcount != null && sitcount < warmcount)
                {
                    rejobject.Add("barcode", barocde);
                    var time = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == barocde).Max(c => c.StartTime);
                    var imespan = DateTime.Now - time;
                    rejobject.Add("retimespan", imespan.Value.TotalSeconds);

                    var productiontime = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == barocde).Select(c => c.LeaveFactoryTime).FirstOrDefault();
                    if (productiontime == null)
                    {
                        return Content("false");
                    }
                    var span = (DateTime.Now.Date - productiontime).Value.TotalDays;
                    var effiday = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == barocde).Select(c => c.EffectiveDay).FirstOrDefault();
                    rejobject.Add("overdue", effiday - span);

                    return Content(JsonConvert.SerializeObject(rejobject));
                }
                ModelState.AddModelError("", "此条码没有正在的回温记录");
            }
            ModelState.AddModelError("", "没有找到此条码");
            return Content("false");
        }
        #endregion

        #region 搅拌
        [HttpPost]
        public ActionResult DisplatStirInfo(string SolderpasterBacrcode)
        {
            JObject infojobject = new JObject();
            var info = db.SMT_Stir.Where(c => c.SolderpasterBacrcode == SolderpasterBacrcode).ToList();
            if (info.Count == 0)
            {
                infojobject.Add("first", "-");
                infojobject.Add("second", "-");
                infojobject.Add("three", "-");
                infojobject.Add("flow", "-");
            }
            else
            {
                var info1 = info.OrderByDescending(c => c.StartTime).FirstOrDefault();
                var user = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == SolderpasterBacrcode).ToList();
                if (user.Count() != 0)
                {
                    var freeze = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == SolderpasterBacrcode && c.Belogin == "领用").Max(c => c.IntoTime);
                    if (freeze > info1.StartTime)
                    {
                        infojobject.Add("first", "-");
                        infojobject.Add("second", "-");
                        infojobject.Add("three", "-");
                        infojobject.Add("flow", "-");
                    }
                    else
                    {
                        infojobject.Add("first", info1.StartTime);
                        infojobject.Add("second", info1.SecondTime);
                        infojobject.Add("three", info1.ThreeTime);
                        infojobject.Add("flow", info1.FlorTime);
                    }
                }
                else
                {
                    infojobject.Add("first", info1.StartTime);
                    infojobject.Add("second", info1.SecondTime);
                    infojobject.Add("three", info1.ThreeTime);
                    infojobject.Add("flow", info1.FlorTime);
                }
            }

            return Content(JsonConvert.SerializeObject(infojobject));
        }

        //开始搅拌
        public void AddSMTStir(string SolderpasterBacrcode, int num)
        {
            var sMT_Stir = db.SMT_Stir.OrderByDescending(c => c.StartTime).Where(c => c.SolderpasterBacrcode == SolderpasterBacrcode).FirstOrDefault();
            switch (num)
            {
                case 1:
                    SMT_Stir stir = new SMT_Stir() { SolderpasterBacrcode = SolderpasterBacrcode, UserName = "张三", JobNum = "123456", StartTime = DateTime.Now };
                    db.SMT_Stir.Add(stir);

                    break;
                case 2:
                    if (sMT_Stir.SecondTime == null)
                    {
                        sMT_Stir.SecondTime = DateTime.Now;
                        sMT_Stir.SecondName = "张三";
                        sMT_Stir.SecondJobNum = "123456";
                    }
                    break;
                case 3:
                    if (sMT_Stir.ThreeTime == null)
                    {
                        sMT_Stir.ThreeTime = DateTime.Now;
                        sMT_Stir.ThreeJobName = "张三";
                        sMT_Stir.ThreeNum = "123456";
                    }
                    break;
                case 4:
                    if (sMT_Stir.FlorTime == null)
                    {
                        sMT_Stir.FlorTime = DateTime.Now;
                        sMT_Stir.FlorName = "张三";
                        sMT_Stir.FlorJobNum = "123456";
                    }
                    break;
                default:

                    break;
            }
            db.SaveChanges();
        }
        #endregion

        #region 使用
        [HttpPost]
        public async Task<bool> AddEmployAsync(List<string> smt_EmployList, string ordernum, int line)
        {
            int count = 0;
            foreach (var item in smt_EmployList)
            {
                SMT_Employ sMT_Employ = new SMT_Employ() { SolderpasterBacrcode = item, StartTime = DateTime.Now, JobNum = "123456", UserName = "张三", OrderNum = ordernum, LineNum = line };
                db.SMT_Employ.Add(sMT_Employ);
                count +=await db.SaveChangesAsync();
            }
            if (count == smt_EmployList.Count())
                return true;
            else
                return false;
        }

        #endregion

        #region  回收
        [HttpPost]
        public async Task<bool> RecycleAsync(List<string> smt_RecycleList)
        {
            int count = 0;
            foreach (var item in smt_RecycleList)
            {
                SMT_Recycle sMT_Recycle = new SMT_Recycle() { SolderpasterBacrcode = item, RecoveTime = DateTime.Now, JobNum = "123456", UserName = "张三" };
                db.SMT_Recycle.Add(sMT_Recycle);
                count += await db.SaveChangesAsync();
            }
            if (count == smt_RecycleList.Count())
                return true;
            else
                return false;
        }
        #endregion

        #region 看板

        
        public ActionResult Boadr()
        {
            JArray totle = new JArray();
            var freezebarcode = db.SMT_Freezer.Select(c => c.SolderpasterBacrcode).Distinct();
            foreach (var item in freezebarcode)
            {
                JObject barcodejobject = new JObject();

                var freeze = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item).OrderBy(c => c.IntoTime).ToList();
                for (int i = 0; i < freeze.Count(); i++)
                {
                    //SMT冰柜时间
                    JObject timeList = new JObject();
                    timeList.Add("barcode", item);
                    var freetime = freeze[i].IntoTime;
                    var freetiem2 = new DateTime?();
                    if (i + 1 == freeze.Count())
                    {
                        freetiem2 = DateTime.Now;
                    }
                    else
                    {
                        freetiem2 = freeze[i + 1].IntoTime;
                    }
                    timeList.Add("freezetime", freetime);
                    //回温时间
                    var warmtime = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    timeList.Add("warmtime", warmtime == null ? "--" : warmtime.UserName + ":" + warmtime.StartTime.ToString());
                    //搅拌时间
                    var stirtime = db.SMT_Stir.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    JArray stir = new JArray();
                    if (stirtime != null)
                    {
                        stir.Add(stirtime.UserName + ":" + stirtime.StartTime.ToString());
                        stir.Add(stirtime.SecondTime == null ? null : stirtime.SecondName + ":" + stirtime.SecondTime.ToString());
                        stir.Add(stirtime.ThreeTime == null ? null : stirtime.ThreeNum + ":" + stirtime.ThreeTime.ToString());
                        stir.Add(stirtime.FlorTime == null ? null : stirtime.FlorName + ":" + stirtime.FlorTime.ToString());
                        timeList.Add("stirtime", stir);
                    }
                    else
                    { timeList.Add("stirtime", "--"); }
                    //领用时间
                    var employ = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    if (employ != null)
                    {
                        timeList.Add("ordernum", employ.OrderNum);
                        timeList.Add("linnum", employ.LineNum);
                        timeList.Add("employtime", employ.UserName + ":" + employ.StartTime.ToString());
                    }
                    else
                    {
                        timeList.Add("ordernum", "--");
                        timeList.Add("linnum", "--");
                        timeList.Add("employtime", "--");
                    }
                    //回收时间
                    var recycle = db.SMT_Recycle.Where(c => c.SolderpasterBacrcode == item).FirstOrDefault();
                    if (i + 1 == freeze.Count())
                    {
                        timeList.Add("recycletime", recycle == null ? "--" : recycle.UserName + ":" + recycle.RecoveTime.ToString());
                    }
                    else
                        timeList.Add("recycletime", "--");
                    barcodejobject.Add(i.ToString(), timeList);
                }
                totle.Add(barcodejobject);
            }
            return Content(JsonConvert.SerializeObject(totle));
        }

        [HttpPost]
        public ActionResult Boadr(string barcode, string bitch, string ReceivingNum, string Supplier, string ordernum)
        {
            var freezebarcode = db.SMT_Freezer.Select(c => c.SolderpasterBacrcode).Distinct();
            if (!string.IsNullOrEmpty(barcode))
            {
                freezebarcode = freezebarcode.Where(c => c == barcode);
            }
            if (!string.IsNullOrEmpty(bitch))
            {
                var barcodeList = db.Barcode_Solderpaste.Where(c => c.Batch == bitch).Select(c => c.SolderpasterBacrcode).ToList();
                freezebarcode = freezebarcode.Where(c => barcodeList.Contains(c));
            }
            if (!string.IsNullOrEmpty(ReceivingNum))
            {
                var barcodeList = db.Barcode_Solderpaste.Where(c => c.ReceivingNum == ReceivingNum).Select(c => c.SolderpasterBacrcode).ToList();
                freezebarcode = freezebarcode.Where(c => barcodeList.Contains(c));
            }
            if (!string.IsNullOrEmpty(Supplier))
            {
                var barcodeList = db.Barcode_Solderpaste.Where(c => c.Supplier == Supplier).Select(c => c.SolderpasterBacrcode).ToList();
                freezebarcode = freezebarcode.Where(c => barcodeList.Contains(c));
            }
            if (!string.IsNullOrEmpty(ordernum))
            {
                var barcodeList = db.SMT_Employ.Where(c => c.OrderNum == ordernum).Select(c => c.SolderpasterBacrcode).ToList();
                freezebarcode = freezebarcode.Where(c => barcodeList.Contains(c));
            }

            JArray totle = new JArray();

            foreach (var item in freezebarcode)
            {
                JObject barcodejobject = new JObject();

                var freeze = db.SMT_Freezer.Where(c => c.SolderpasterBacrcode == item).OrderBy(c => c.IntoTime).ToList();
                for (int i = 0; i < freeze.Count(); i++)
                {
                    //SMT冰柜时间
                    JObject timeList = new JObject();
                    timeList.Add("barcode", item);
                    var freetime = freeze[i].IntoTime;
                    var freetiem2 = new DateTime?();
                    if (i + 1 == freeze.Count())
                    {
                        freetiem2 = DateTime.Now;
                    }
                    else
                    {
                        freetiem2 = freeze[i + 1].IntoTime;
                    }
                    timeList.Add("freezetime", freetime);
                    //回温时间
                    var warmtime = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    timeList.Add("warmtime", warmtime == null ? "--" : warmtime.UserName + ":" + warmtime.StartTime.ToString());
                    //搅拌时间
                    var stirtime = db.SMT_Stir.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    JArray stir = new JArray();
                    if (stirtime != null)
                    {
                        stir.Add(stirtime.UserName + ":" + stirtime.StartTime.ToString());
                        stir.Add(stirtime.SecondTime == null ? null : stirtime.SecondName + ":" + stirtime.SecondTime.ToString());
                        stir.Add(stirtime.ThreeTime == null ? null : stirtime.ThreeNum + ":" + stirtime.ThreeTime.ToString());
                        stir.Add(stirtime.FlorTime == null ? null : stirtime.FlorName + ":" + stirtime.FlorTime.ToString());
                        timeList.Add("stirtime", stir);
                    }
                    else
                    { timeList.Add("stirtime", "--"); }
                    //领用时间
                    var employ = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == item && c.StartTime < freetiem2).OrderByDescending(c => c.StartTime).FirstOrDefault();
                    if (employ != null)
                    {
                        timeList.Add("ordernum", employ.OrderNum);
                        timeList.Add("linnum", employ.LineNum);
                        timeList.Add("employtime", employ.UserName + ":" + employ.StartTime.ToString());
                    }
                    else
                    {
                        timeList.Add("ordernum", "--");
                        timeList.Add("linnum", "--");
                        timeList.Add("employtime", "--");
                    }
                    //回收时间
                    var recycle = db.SMT_Recycle.Where(c => c.SolderpasterBacrcode == item).FirstOrDefault();
                    if (i + 1 == freeze.Count())
                    {
                        timeList.Add("recycletime", recycle == null ? "--" : recycle.UserName + ":" + recycle.RecoveTime.ToString());
                    }
                    else
                        timeList.Add("recycletime", "--");
                    barcodejobject.Add(i.ToString(), timeList);
                }
                totle.Add(barcodejobject);
            }
            return Content(JsonConvert.SerializeObject(totle));
        }
        #endregion


        #region 列表获取
        //领用订单列表获取
        public ActionResult GetOrderList()
        {
            var orders = db.OrderMgm.OrderByDescending(m => m.ID).Select(m => m.OrderNum).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }


        //看板条码列表获取
        public ActionResult GetBoardBarcodeList()
        {
            var orders = db.SMT_Freezer.OrderByDescending(m => m.ID).Select(m => m.SolderpasterBacrcode).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //看板批次列表获取
        public ActionResult GetBoardBatchList()
        {
            var orders = db.Barcode_Solderpaste.OrderByDescending(m => m.ID).Select(m => m.Batch).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //看板厂商简称列表获取
        public ActionResult GetBoardSupplierList()
        {
            var orders = db.Barcode_Solderpaste.OrderByDescending(m => m.ID).Select(m => m.Supplier).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //看板物料编号列表获取
        public ActionResult GetBoardReceivingNumList()
        {
            var orders = db.Barcode_Solderpaste.OrderByDescending(m => m.ID).Select(m => m.ReceivingNum).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //看板订单列表获取
        public ActionResult GetBoardOrdernumList()
        {
            var orders = db.SMT_Employ.OrderByDescending(m => m.ID).Select(m => m.OrderNum).Distinct().ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }


        #endregion
    }
}