using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using Microsoft.Office.Interop.Excel;
using System.Diagnostics;
using System.IO;
using Microsoft.Office.Interop.Word;
using Newtonsoft.Json;

namespace JianHeMES.Controllers
{
    public class ManualController : Controller
    {
        #region---客户端读取文件夹清单
        /// <summary>  
        /// 返回指定目录下文件夹清单信息  
        /// <returns>Content(Object)</returns>  
        [HttpPost]
        public ActionResult GetFolderList()
        {
            string folderpath = "D:/MES_Data/MES说明书/";
            DirectoryInfo[] theFolderlist = GetFolderInDirectory(folderpath);
            return Content(JsonConvert.SerializeObject(theFolderlist));
        }
        #endregion


        #region---客户端读取文件夹下的所有文件清单
        /// <summary>  
        /// <param name="directory">目录字符串</param>  
        /// 返回指定目录下的所有文件清单信息  
        /// <returns>Content(Object)</returns>  
        [HttpPost]
        public ActionResult GetFolderALLFilesList(string directory)
        {
            string folderpath = "D:/MES_Data/MES说明书/"+directory;
            var theFolderlist = GetFilesInDirectory(folderpath);
            return Content(JsonConvert.SerializeObject(theFolderlist));
        }
        #endregion


        #region---客户端读取文件夹下的PDF文件清单
        /// <summary>  
        /// <param name="directory">目录字符串</param>  
        /// 返回指定目录下的PDF文件清单信息  
        /// <returns>Content(Object)</returns>  
        [HttpPost]
        public ActionResult GetFolderPDFFilesList(string directory)
        {
            string folderpath = "D:/MES_Data/MES说明书/" + directory;
            var FilesList = GetFilesInDirectory(folderpath);
            List<FileInfo> ResultFilesList = new List<FileInfo>();
            foreach (var item in FilesList)
            {
                var ext = item.Extension;
                if (item.Extension == ".pdf") ResultFilesList.Add(item);
            }
            return Content(JsonConvert.SerializeObject(ResultFilesList));
        }
        #endregion


        #region---客户端读取pdf文件路径
        /// <summary>  
        /// <param name="directory">目录字符串</param>  
        /// <param name="filename">文件名</param>  
        /// 返回指定目录下文件路径信息  
        /// <returns>Content(PathString)</returns>  
        [HttpPost]
        public ActionResult GetPath(string directory, string filename)
        {
            string folderpath = "~/MES_Data/MES说明书/";

            DirectoryInfo theFolder = new DirectoryInfo(folderpath);
            //读取文件夹清单
            //DirectoryInfo[] theFolderlist = GetFolderInDirectory(folderpath);
            ////设选项为第一个文件夹(已排队不使用)
            //subdirectory = theFolderlist[0].Name;
            //读取文件清单
            var theFileslist = GetFilesInDirectory(folderpath + "/" + directory);

            if (filename == "") filename = theFileslist[0].Name;
            if (theFileslist.Count > 0)
            {
                string linkaddress = folderpath + directory + "/" + filename;
                return Content(linkaddress);
            }
            else
            {
                return Content("目录内没有PDF文件！");
            }
        }
        #endregion


        // GET: Manual
        public ActionResult Index(string url = "~/MES_Data/MES说明书/备品配件操作说明书/1.备品配件首页.pdf")
        {
            string physicalPath = Server.MapPath(Server.UrlDecode(url));
            string extension = Path.GetExtension(physicalPath);

            string htmlUrl = "";
            switch (extension.ToLower())
            {
                case ".xls":
                case ".xlsx":
                    htmlUrl = PreviewExcel(physicalPath, url);
                    break;
                case ".doc":
                case ".docx":
                    htmlUrl = PreviewWord(physicalPath, url);
                    break;
                case ".txt":
                    htmlUrl = PreviewTxt(physicalPath, url);
                    break;
                case ".pdf":
                    htmlUrl = PreviewPdf(physicalPath, url);
                    break;
                case ".jpg":
                case ".jpeg":
                case ".bmp":
                case ".gif":
                case ".png":
                    htmlUrl = PreviewImg(physicalPath, url);
                    break;
                default:
                    htmlUrl = PreviewOther(physicalPath, url);
                    break;
            }
            return View();
        }

        #region Index页面
        ///// <summary>
        ///// Index页面
        ///// </summary>
        ///// <param name="url">例：/uploads/......XXX.xls</param>
        ////[HttpPost]
        //public ActionResult Index(string url= "~/MES_Data/MES说明书/备品配件说明书/1.备品配件首页.pdf")
        //{
        //    string physicalPath = Server.MapPath(Server.UrlDecode(url));
        //    string extension = Path.GetExtension(physicalPath);

        //    string htmlUrl = "";
        //    switch (extension.ToLower())
        //    {
        //        case ".xls":
        //        case ".xlsx":
        //            htmlUrl = PreviewExcel(physicalPath, url);
        //            break;
        //        case ".doc":
        //        case ".docx":
        //            htmlUrl = PreviewWord(physicalPath, url);
        //            break;
        //        case ".txt":
        //            htmlUrl = PreviewTxt(physicalPath, url);
        //            break;
        //        case ".pdf":
        //            htmlUrl = PreviewPdf(physicalPath, url);
        //            break;
        //        case ".jpg":
        //        case ".jpeg":
        //        case ".bmp":
        //        case ".gif":
        //        case ".png":
        //            htmlUrl = PreviewImg(physicalPath, url);
        //            break;
        //        default:
        //            htmlUrl = PreviewOther(physicalPath, url);
        //            break;
        //    }

        //    return Redirect(Url.Content(htmlUrl));
        //}
        #endregion

        #region 预览Excel
        /// <summary>
        /// 预览Excel
        /// </summary>
        public string PreviewExcel(string physicalPath, string url)
        {
            Microsoft.Office.Interop.Excel.Application application = null;
            Microsoft.Office.Interop.Excel.Workbook workbook = null;
            application = new Microsoft.Office.Interop.Excel.Application();
            object missing = Type.Missing;
            object trueObject = true;
            application.Visible = false;
            application.DisplayAlerts = false;
            workbook = application.Workbooks.Open(physicalPath, missing, trueObject, missing, missing, missing,
                missing, missing, missing, missing, missing, missing, missing, missing, missing);
            //Save Excel to Html
            object format = Microsoft.Office.Interop.Excel.XlFileFormat.xlHtml;
            string htmlName = Path.GetFileNameWithoutExtension(physicalPath) + ".html";
            String outputFile = Path.GetDirectoryName(physicalPath) + "\\" + htmlName;
            workbook.SaveAs(outputFile, format, missing, missing, missing,
                              missing, XlSaveAsAccessMode.xlNoChange, missing,
                              missing, missing, missing, missing);
            workbook.Close();
            application.Quit();
            return Path.GetDirectoryName(Server.UrlDecode(url)) + "\\" + htmlName;
        }
        #endregion

        #region 预览Word
        /// <summary>
        /// 预览Word
        /// </summary>
        public string PreviewWord(string physicalPath, string url)
        {
            Microsoft.Office.Interop.Word._Application application = null;
            Microsoft.Office.Interop.Word._Document doc = null;
            application = new Microsoft.Office.Interop.Word.Application();
            object missing = Type.Missing;
            object trueObject = true;
            application.Visible = false;
            application.DisplayAlerts = WdAlertLevel.wdAlertsNone;
            doc = application.Documents.Open(physicalPath, missing, trueObject, missing, missing, missing,
                missing, missing, missing, missing, missing, missing, missing, missing, missing, missing);
            //Save Excel to Html
            object format = Microsoft.Office.Interop.Word.WdSaveFormat.wdFormatHTML;
            string htmlName = Path.GetFileNameWithoutExtension(physicalPath) + ".html";
            String outputFile = Path.GetDirectoryName(physicalPath) + "\\" + htmlName;
            doc.SaveAs(outputFile, format, missing, missing, missing,
                              missing, XlSaveAsAccessMode.xlNoChange, missing,
                              missing, missing, missing, missing);
            doc.Close();
            application.Quit();
            return Path.GetDirectoryName(Server.UrlDecode(url)) + "\\" + htmlName;
        }
        #endregion

        #region 预览Txt
        /// <summary>
        /// 预览Txt
        /// </summary>
        public string PreviewTxt(string physicalPath, string url)
        {
            return Server.UrlDecode(url);
        }
        #endregion

        #region 预览Pdf
        /// <summary>
        /// 预览Pdf
        /// </summary>
        public string PreviewPdf(string physicalPath, string url)
        {
            return Server.UrlDecode(url);
        }
        #endregion

        #region 预览图片
        /// <summary>
        /// 预览图片
        /// </summary>
        public string PreviewImg(string physicalPath, string url)
        {
            return Server.UrlDecode(url);
        }
        #endregion

        #region 预览其他文件
        /// <summary>
        /// 预览其他文件
        /// </summary>
        public string PreviewOther(string physicalPath, string url)
        {
            return Server.UrlDecode(url);
        }
        #endregion

        #region --------------------返回指定目录下所有文件信息
        /// <summary>  
        /// 返回指定目录下所有文件信息  
        /// </summary>  
        /// <param name="strDirectory">目录字符串</param>  
        /// <returns></returns>  
        public List<FileInfo> GetAllFilesInDirectory(string strDirectory)
        {
            List<FileInfo> listFiles = new List<FileInfo>(); //保存所有的文件信息  
            DirectoryInfo directory = new DirectoryInfo(strDirectory);
            DirectoryInfo[] directoryArray = directory.GetDirectories();
            FileInfo[] fileInfoArray = directory.GetFiles();
            if (fileInfoArray.Length > 0) listFiles.AddRange(fileInfoArray);
            foreach (DirectoryInfo _directoryInfo in directoryArray)
            {
                DirectoryInfo directoryA = new DirectoryInfo(_directoryInfo.FullName);
                DirectoryInfo[] directoryArrayA = directoryA.GetDirectories();
                FileInfo[] fileInfoArrayA = directoryA.GetFiles();
                if (fileInfoArrayA.Length > 0) listFiles.AddRange(fileInfoArrayA);
                GetAllFilesInDirectory(_directoryInfo.FullName);//递归遍历  
            }
            return listFiles;
        }
        #endregion

        #region --------------------返回指定目录下文件夹信息
        /// <summary>  
        /// 返回指定目录下文件夹信息  
        /// </summary>  
        /// <param name="strDirectory">目录字符串</param>  
        /// <returns></returns>  
        public DirectoryInfo[] GetFolderInDirectory(string strDirectory)
        {
            DirectoryInfo directory = new DirectoryInfo(strDirectory);
            DirectoryInfo[] directoryArray = directory.GetDirectories();
            return directoryArray;
        }
        #endregion

        #region --------------------返回指定目录下文件信息
        /// <summary>  
        /// 返回指定目录下文件信息  
        /// </summary>  
        /// <param name="strDirectory">目录字符串</param>  
        /// <returns></returns>  
        public List<FileInfo> GetFilesInDirectory(string strDirectory)
        {
            List<FileInfo> listFiles = new List<FileInfo>(); //保存所有的文件信息  
            DirectoryInfo directory = new DirectoryInfo(strDirectory);
            FileInfo[] fileInfoArray = directory.GetFiles();
            if (fileInfoArray.Length > 0) listFiles.AddRange(fileInfoArray);
            return listFiles;
        }
        #endregion

    }

}