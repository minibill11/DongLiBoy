using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace JianHeMES.Controllers
{
    public class Burn_in_MosaicScreenController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();


        #region 开始拼屏
        public ActionResult mosaicScreen_B()
        {
            ViewBag.OrderList = GetOrderList();//向View传递OrderNum订单号列表.
            ViewBag.nuoOrderList = GetnuoOrderList();
            return View();

        }
        [HttpPost]
        public ActionResult mosaicScreen_Begin(string OrderNum, string BurnInShelfNum, List<string> BarCodesNumList)
        {
            var newRecord = new Burn_in_MosaicScreen();
            newRecord.OrderNum = OrderNum;
            string result_putin = "";
            string result_never_putin = "";
            foreach (var item in BarCodesNumList)
            {
                var count = db.Burn_in_MosaicScreen.Count(c => c.BarCodesNum == item);
                if (count == 0)
                {
                    newRecord.BarCodesNum = item;
                    newRecord.OQCMosaicStartTime = DateTime.Now;
                    newRecord.OQCPrincipalNum = "16621";
                    newRecord.BurnInShelfNum = BurnInShelfNum;
                    db.Burn_in_MosaicScreen.Add(newRecord);
                    db.SaveChanges();
                    if (result_putin == "")
                    {
                        result_putin = item;
                    }
                    else
                    {
                        result_putin = result_putin + ",\n" + item;
                    }
                }
                else
                {
                    if (result_never_putin == "")
                    {
                        result_never_putin = item;
                    }
                    else
                    {
                        result_never_putin = result_never_putin + ",\n" + item;
                    }
                }
            }
            if (result_putin != "")
            {
                result_putin = result_putin + "\n已经开始老化。";
            }
            if (result_never_putin != "")
            {
                result_never_putin = result_never_putin + "\n已经在老化，没有进入重复开始老化。";
            }
            if (result_putin + result_never_putin != "")
            {
                return Content(result_putin + result_never_putin);
            }
            else
            {
                return Content("没有模组开始老化。");
            }
            //return Json(data,JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region 完成拼屏
        public ActionResult mosaicScreen_F()
        {
            //权限
            ViewBag.OrderList = GetOrderList();
            return View();

        }
        [HttpPost]
        public ActionResult mosaicScreenFinish(string OrderNum, List<string> BarCodesNumList)
        {
            foreach (var barcode in BarCodesNumList)
            {
                var mosaicScreen = db.Burn_in_MosaicScreen.Where(c => c.OrderNum == OrderNum && c.BarCodesNum == barcode).FirstOrDefault();
                if (mosaicScreen != null)
                {
                    mosaicScreen.OQCMosaicEndTime = DateTime.Now;
                    db.SaveChanges();
                }
            }
            return Content("完成拼屏");


        }
        #endregion

        //拼屏数据显示
        public ActionResult mosaicScreen_ShelfQuery()
        {
            return View();

        }
        [HttpPost]
        public ActionResult mosaicScreen_ShelfQueryData()
        {
            JObject mosaicScreenOrder = new JObject();
            JObject aa = new JObject();
            JObject mosaicScreenNum = new JObject();
            JObject mosaicScreenBegimBarcode = new JObject();
            JObject mosaicScreenEndBarcode = new JObject();
            var BurnInShelfNumList = db.Burn_in_MosaicScreen.Select(c => c.BurnInShelfNum).Distinct().ToList();
            foreach (var item in BurnInShelfNumList)
            {
                var OrderNumList = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == item).Select(c => c.OrderNum).Distinct().ToList();
                foreach (var OrderNum in OrderNumList)
                {
                    var barcodeList = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == item && c.OrderNum == OrderNum).ToList();
                    var begimList = barcodeList.Where(c => c.OQCMosaicStartTime != null && c.OQCMosaicEndTime == null).Select(c=>c.BarCodesNum).ToList();
                    var endList = barcodeList.Where(c => c.OQCMosaicStartTime != null && c.OQCMosaicEndTime != null).Select(c => c.BarCodesNum).ToList();
                    
                    if (begimList.Count != 0)
                        mosaicScreenOrder.Add("未完成", JsonConvert.DeserializeObject<JToken>(JsonConvert.SerializeObject(begimList)));
                    else
                        mosaicScreenOrder.Add("未完成", "");
                    mosaicScreenOrder.Add("未完成数量", begimList.Count);

                    if (endList.Count != 0)
                        mosaicScreenOrder.Add("已完成", JsonConvert.DeserializeObject<JToken>(JsonConvert.SerializeObject(endList)));
                    else
                        mosaicScreenOrder.Add("已完成", "");
                    mosaicScreenOrder.Add("已完成数量", endList.Count);
                    mosaicScreenNum.Add(OrderNum, mosaicScreenOrder);
                    mosaicScreenOrder = new JObject();
                }

                mosaicScreenNum.Add("老化架号", item);
               
            }
        
            if (BurnInShelfNumList.Count != 0)
            {
                return Content(JsonConvert.SerializeObject(mosaicScreenNum));
    }
            return Content("没有数据");
}

public ActionResult mosaicScreen_ShelfQueryHistory()
{
    return View();

}



// GET: Burn_in_MosaicScreen
public ActionResult Index()
{
    return View(db.Burn_in_MosaicScreen.ToList());

}
[HttpPost]
public ActionResult Index(string burnInShelfNum)
{
    JObject MosaicScreen = new JObject();
    JObject MosaicScreenFinshing = new JObject();
    JObject MosaicScreenBeagin = new JObject();
    var count = db.Burn_in_MosaicScreen.Count(c => c.BurnInShelfNum == burnInShelfNum);
    var OQCinfoFinshing = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == burnInShelfNum && c.OQCMosaicStartTime != null && c.OQCMosaicEndTime != null).ToList();
    var OQCinfoBeagin = db.Burn_in_MosaicScreen.Where(c => c.BurnInShelfNum == burnInShelfNum && c.OQCMosaicStartTime != null && c.OQCMosaicEndTime == null).ToList();
    foreach (var item in OQCinfoFinshing)
    {
        MosaicScreenFinshing.Add("BarCodesNum", item.BarCodesNum);
    }
    foreach (var item in OQCinfoBeagin)
    {
        MosaicScreenBeagin.Add("BarCodesNum", item.BarCodesNum);
    }
    //已完成列表
    MosaicScreen.Add("Finashing", MosaicScreenFinshing);
    //已完成数量
    MosaicScreen.Add("FinashingCount", OQCinfoFinshing.Count());
    //未完成列表
    MosaicScreen.Add("Beagin", MosaicScreenBeagin);
    //未完成数量
    MosaicScreen.Add("BeaginCount", OQCinfoBeagin.Count());
    //总数量
    MosaicScreen.Add("Count", count);
    return Content(JsonConvert.SerializeObject(MosaicScreen));

}
// GET: Burn_in_MosaicScreen/Details/5 
public ActionResult Details(int? id)
{
    if (id == null)
    {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
    if (burn_in_MosaicScreen == null)
    {
        return HttpNotFound();
    }
    return View(burn_in_MosaicScreen);
}

// GET: Burn_in_MosaicScreen/Create
public ActionResult Create()
{
    return View();
}

// POST: Burn_in_MosaicScreen/Create
// 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
// 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
[HttpPost]
public ActionResult Create(List<Burn_in_MosaicScreen> burn_in_MosaicScreenList)
{
    foreach (var burn_in_MosaicScreen in burn_in_MosaicScreenList)
    {
        if (ModelState.IsValid)
        {
            db.Burn_in_MosaicScreen.Add(burn_in_MosaicScreen);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
    }
    return View();
}

// GET: Burn_in_MosaicScreen/Edit/5
public ActionResult Edit(int? id)
{
    if (id == null)
    {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
    if (burn_in_MosaicScreen == null)
    {
        return HttpNotFound();
    }
    return View(burn_in_MosaicScreen);
}

// POST: Burn_in_MosaicScreen/Edit/5
// 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
// 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult Edit([Bind(Include = "Id,OrderNum,BarCodesNum,BurnInShelfNum,OQCPrincipalNum,OQCMosaicStartTime,OQCMosaicEndTime,Remark")] Burn_in_MosaicScreen burn_in_MosaicScreen)
{
    if (ModelState.IsValid)
    {
        db.Entry(burn_in_MosaicScreen).State = EntityState.Modified;
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    return View(burn_in_MosaicScreen);
}

// GET: Burn_in_MosaicScreen/Delete/5
public ActionResult Delete(int? id)
{
    if (id == null)
    {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
    if (burn_in_MosaicScreen == null)
    {
        return HttpNotFound();
    }
    return View(burn_in_MosaicScreen);
}

// POST: Burn_in_MosaicScreen/Delete/5
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public ActionResult DeleteConfirmed(int id)
{
    Burn_in_MosaicScreen burn_in_MosaicScreen = db.Burn_in_MosaicScreen.Find(id);
    db.Burn_in_MosaicScreen.Remove(burn_in_MosaicScreen);
    db.SaveChanges();
    return RedirectToAction("Index");
}

//检查开始拼屏FQC是否检查
public ActionResult CheckFQC(List<string> barcodeList)
{
    JObject FQCcheckList = new JObject();
    foreach (var barcode in barcodeList)
    {
        var count = db.FinalQC.Where(c => c.BarCodesNum == barcode && c.FQCCheckFinish == true).Count();
        if (count == 0)
        {
            FQCcheckList.Add(barcode, "NO");
        }
        else
        {

            FQCcheckList.Add(barcode, "YES");
        }

    }

    return Content(JsonConvert.SerializeObject(FQCcheckList));
}

//检查条码是否能完成拼屏
public ActionResult CheckMosciScreenF(string ordernum, List<string> barcodeList)
{
    JObject checkList = new JObject();
    foreach (var item in barcodeList)
    {
        var mosicScreenInfo = db.Burn_in_MosaicScreen.Where(c => c.BarCodesNum == item).FirstOrDefault();
        if (mosicScreenInfo == null)
        {
            checkList.Add(item, "未找到此条码");
            continue;
        }
        else
        {
            if (mosicScreenInfo.OQCMosaicStartTime == null)
            {
                checkList.Add(item, "未开始拼屏");
                continue;
            }
            else if (mosicScreenInfo.OQCMosaicEndTime != null)
            {
                checkList.Add(item, "已完成拼屏");
                continue;
            }
            else if (ordernum != mosicScreenInfo.OrderNum)
            {
                checkList.Add(item, "条码不属于此订单");
                continue;
            }
            else
            {
                checkList.Add(item, "正常");
            }
        }
    }
    return Content(JsonConvert.SerializeObject(checkList));
}

#region ---------------------------------------GetOrderList()取出整个OrderMgms的OrderNum订单号列表
private List<SelectListItem> GetOrderList()
{
    var orders = db.OrderMgm.OrderByDescending(m => m.ID).Select(m => m.OrderNum);    //增加.Distinct()后会重新按OrderNum升序排序
    var items = new List<SelectListItem>();
    foreach (string order in orders)
    {
        items.Add(new SelectListItem
        {
            Text = order,
            Value = order
        });
    }
    return items;
}
#endregion

#region --------------------GetnuoOrderList()取出整个OrderMgms的挪用单号列表
private List<SelectListItem> GetnuoOrderList()
{
    var orders = db.OrderMgm.OrderByDescending(m => m.ID).Where(m => m.IsRepertory == true).Select(m => m.OrderNum);    //增加.Distinct()后会重新按OrderNum升序排序
    var items = new List<SelectListItem>();
    foreach (string order in orders)
    {
        items.Add(new SelectListItem
        {
            Text = order,
            Value = order
        });
    }
    return items;
}
//----------------------------------------------------------------------------------------
#endregion
protected override void Dispose(bool disposing)
{
    if (disposing)
    {
        db.Dispose();
    }
    base.Dispose(disposing);
}
    }
}
