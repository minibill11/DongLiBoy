@model IEnumerable<JianHeMES.Models.EquipmentBasicInfo>

@{
    ViewBag.Title = "设备信息";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/axios.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Content/styleFile/solder/solderJavascript.js"></script>
<style>
    /* 宽度设为屏幕宽度的96% */
    .container, .body-content {
        width: 96vw;
    }

    [v-cloak] {
        display: none;
    }

    .statusBtn {
        padding: 2px;
    }

    #app {
        width: 100%;
        margin: 0 auto;
        padding: 0;
    }

    .line {
        display: flex;
        justify-content: flex-start;
        margin-top: 5px;
        margin-left: 5px;
        overflow-x: auto;
    }

    .mechine {
        width: 152px;
        height: 40px;
        margin: 2px 12px 6px;
        background-color: #ddd;
        border-radius: 4px;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
    }

    .mechinetop {
        width: 152px;
        height: 20px;
        border-radius: 4px;
        border-bottom: 1px solid black;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
    }

    .mechinbottom {
        width: 152px;
        height: 20px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
    }

        .mechinetop button,
        .mechinbottom button {
            /*background-color: rgb(82, 166, 221);*/
            border: none;
            padding: 0 4px;
            border-radius: 5px;
            height: 18px;
        }

    /* 隐藏小图标样式 */

    .mechine {
        position: relative;
        padding: 0px;
    }

        .mechine:hover .left {
            display: inline-block;
        }

        .mechine:hover .rigth {
            display: inline-block;
        }

        .mechine:hover .left {
            display: inline-block;
        }

        .mechine:hover .rigth {
            display: inline-block;
        }

    .left {
        position: absolute;
        left: -15px;
        top: 31%;
        display: none;
        transition: all linear .2s;
    }

        .left:hover {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background-color: #ccc;
        }

    .rigth {
        position: absolute;
        right: -15px;
        top: 31%;
        display: none;
        transition: all linear .2s;
    }

        .rigth:hover {
            background-color: #ccc;
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }

    .left {
        position: absolute;
        left: -10px;
        z-index: 66;
    }

    .rigth {
        position: absolute;
        right: -10px;
        z-index: 66;
    }

    .el-collapse-item__wrap {
        padding: 0 25px;
    }

    .selectContainer {
        text-align: center;
        margin: 15px auto;
    }

    .el-form-item {
        margin-top: 5px !important;
        margin-bottom: 0 !important;
    }

    /*.el-input{
          width:300px;
      }*/

    .el-collapse-item__wrap {
        overflow-x: auto;
    }

    .red {
        color: red;
        background-color: white !important;
    }

    .allLineContainer {
        width: 100%;
        /*border-bottom:1px solid black;*/
        border-top: 1px solid black;
        margin-top: 14px;
    }

    .footer {
        position: absolute;
        bottom: 28px;
        left: 46%;
    }

    a:visited {
        color: #808080
    }
    /* 已访问的链接 */

    .lineSamryInfos {
        margin-left: 50px;
    }

    .lineSamryInfosInner {
        padding: 4px;
    }
</style>

<h2 style="text-align:center;margin-top:15px;margin-bottom:5px;font-size:21px;">设备管理</h2>
@{var UserDepar = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).Department; }

<div id="app">
    <div class="selectContainer">
        <p style="display:flex;justify-content:center;margin-top:10px;">
        </p>
        <el-select v-model="depars" size="mini" clearable filterable placeholder="请选择">
            <el-option v-for="item in deparments"
                       v-bind:key="item.value"
                       v-bind:label="item.value"
                       v-bind:value="item.value">
            </el-option>
        </el-select>
        <el-button type="primary" v-on:click="addLine" class="addLineBtn" size="mini" style="display:none;">增加产线</el-button>
        <a class="eqindex" href="/Equipment/Index2"><el-button type="primary" size="mini" plain>设备台账</el-button></a>
        <a class="checkLines" href="/Equipment/Equipment_Rateof_grain"><el-button type="primary" size="mini" plain>稼动率</el-button></a>
    </div>

    @* 产线查询结果 *@
    <div style="max-height:650px;overflow-y:auto;" v-cloak>
        <div class="allLineContainer" v-for="(items,indexs) in datas">
            <div v-show="items.mechines.length>0?true:false">
                <span v-if="items.linenum=='空压机'" style="display:inline-block;width:400px;">
                    <span>{{items.depar}}&nbsp;&nbsp;&nbsp;&nbsp;产线:&nbsp;&nbsp; <strong>{{items.linenum}}</strong> &nbsp;&nbsp;&nbsp;&nbsp; {{items.productLineStatus}}&nbsp;</span>
                    <i v-show="items.productLineStatus=='运行'?true:false" style="color: yellowgreen;font-size:20px;"
                       class="el-icon-loading"></i>
                    <i v-show="items.productLineStatus=='运行'?false:true" style="color: red;font-size:20px;"
                       class="el-icon-remove"></i>
                    <el-button style="padding:4px;" size="mini" v-bind:type="changeColor==true?'success':'primary'" v-text="changeColor==true?'整线调整':'整线调整'" v-on:click="shudonwall(items,indexs)" v-bind:disabled="checkRoles(rolse,'设备状态修改')?false:true">整线停机</el-button>
                </span>
                <span v-else style="display:inline-block;width:400px;">
                    <span>{{items.depar}}&nbsp;&nbsp;&nbsp;&nbsp;产线:&nbsp;&nbsp; <strong>{{items.linenum}}</strong> &nbsp;&nbsp;&nbsp;&nbsp; {{items.productLineStatus}}&nbsp;</span>
                    <i v-show="items.productLineStatus=='运行'?true:false" style="color: yellowgreen;font-size:20px;"
                       class="el-icon-loading"></i>
                    <i v-show="items.productLineStatus=='运行'?false:true" style="color: red;font-size:20px;"
                       class="el-icon-remove"></i>
                    <el-button style="padding:4px;" size="mini" v-bind:type="changeColor==true?'success':'primary'" v-text="changeColor==true?'整线调整':'整线调整'" v-on:click="shudonwall(items,indexs)" v-bind:disabled="checkRoles(rolse,'设备状态修改')?false:true">整线停机</el-button>
                </span>
                <span class="lineSamryInfos">
                    <el-button class="lineSamryInfosInner" type="success" size="mini">运行:{{checkCountNums(items,'运行')}}台</el-button>
                    <el-button class="lineSamryInfosInner" type="warning" size="mini">停机:{{checkCountNums(items,'停机')}}台</el-button>
                    <el-button class="lineSamryInfosInner" type="danger" size="mini">维修:{{checkCountNums(items,'维修')}}台</el-button>
                    <el-button class="lineSamryInfosInner" type="info" size="mini">断电:{{checkCountNums(items,'断电')}}台</el-button>
                </span>
                <div class="line">
                    <div v-for="(item,index) in items.mechines" class="mechine" v-bind:class="`mechine${index}`">
                        <div class="mechinetop" v-on:click="showDetails(index,indexs)">
                            <span style="font-size: 11px">{{item.mechineindex}}号</span>
                            <span style="font-size:11px;padding-bottom:2px;">{{item.equipmentName}}</span>
                        </div>
                        <div class="mechinbottom">
                            <a v-bind:href=`/Equipment/Equipment_Tally_maintenance?num=${item.equipmentNumber}&time=null&canchange=true` target="_blank">
                                点检
                            </a>
                            <a v-bind:href=`/Equipment/EquipmentRepairbill?num=${item.equipmentNumber}&time=null&canchange=true` target="_blank">
                                报修
                            </a>
                            @*<button v-on:click="showplandialog(item)">计划</button>*@
                            <el-popover ref="popover1"
                                        placement="left"
                                        width="160"
                                        trigger="click"
                                        content="这是一段内容,这是一段内容,这是一段内容,这是一段内容。">
                                <div v-show="item.equipmentName=='空压机'&&item.status!='运行'?true:false">
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'维修',items,indexs)" size="mini" type="danger">维修</el-button>
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'离线',items,indexs)" size="mini" type="warning">离线</el-button>
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'断电',items,indexs)" size="mini" type="info">断电</el-button>
                                </div>
                                <div v-show="item.equipmentName=='空压机'?false:true">
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'运行',items,indexs)" size="mini" type="success">运行</el-button>
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'停机',items,indexs)" size="mini" type="warning">停机</el-button>
                                    <el-button class="statusBtn" v-on:click="changeS(item,index,'维修',items,indexs)" size="mini" type="danger">维修</el-button>
                                </div>
                                <el-button class="statusBtn" slot="reference" v-bind:type="checkStatusType(item.status)" v-bind:class="item.status==null?'red':''" v-text="item.status==null?'选择':item.status" v-bind:disabled="checkRoles(rolse,'设备状态修改')?false:true">focus 激活</el-button>
                            </el-popover>
                        </div>
                        <i class="el-icon-arrow-left left" v-on:click="addInLeft(item,index,indexs)"></i>
                        <i class="el-icon-arrow-right rigth" v-on:click="addInRight(item,index,indexs)"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* 添加设备信息弹框 *@
    <el-dialog title="添加设备" v-bind:visible.sync="dialogVisible" width="30%" before-close="handleClose">
        <el-form label-width="100px" model="addMachine">
            <el-form-item label="产线">
                <el-input size="small" disabled v-model="addMachine.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="设备编号">
                <el-select clearable filterable v-model="addSelectedAssetnums" size="small" placeholder="请选择">
                    <el-option v-for="item in assetNumsList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="设备名称">
                <el-input size="small" disabled v-model="addMachine.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="使用部门">
                <el-select clearable filterable v-model="addMachine.UserDepartment" size="small" placeholder="请选择">
                    <el-option v-for="item in deparments"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="运行状态">
                <el-select v-model="addMachine.Status" size="small" placeholder="请选择">
                    <el-option v-for="item in statusList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="资产编号">
                <el-input size="small" disabled v-model="addMachine.AssetNumber"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" v-model="addMachine.Section"></el-input>
            </el-form-item>
            <el-form-item label="设备位置">
                <el-input size="small" disabled v-model="addMachine.StationNum"></el-input>
            </el-form-item>
            <el-form-item label="备注">
                <el-input size="small" v-model="addMachine.Remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogVisible = false">取 消</el-button>
            <el-button type="primary" v-on:click="saveAdd">确 定</el-button>
        </span>
    </el-dialog>
    @* 设备详细信息弹框 *@
    <el-dialog title="设备详细信息" v-bind:visible.sync="showMachineDetials" width="30%" before-close="handleClose">
        <el-form label-width="80px">
            <el-form-item label="产线">
                <el-input size="small" v-model="machineDetails.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="机器名称">
                <el-input size="small" disabled v-model="machineDetails.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="设备编号">
                <el-input size="small" disabled v-model="machineDetails.EquipmentNumber"></el-input>
            </el-form-item>
            <el-form-item label="资产编号">
                <el-input size="small" disabled v-model="machineDetails.AssetNumber"></el-input>
            </el-form-item>
            <el-form-item label="使用部门">
                <el-select clearable filterable v-model="machineDetails.UserDepartment" size="small" placeholder="请选择">
                    <el-option v-for="item in deparments"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="车间">
                <el-input size="small" v-model="machineDetails.WorkShop"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" v-model="machineDetails.Section"></el-input>
            </el-form-item>
            <el-form-item label="设备位置">
                <el-input size="small" v-model="machineDetails.StationNum"></el-input>
            </el-form-item>
            <el-form-item label="运行状态">
                <el-input size="small" disabled v-model="machineDetails.Status"></el-input>
                @*<el-select v-model="machineDetails.Status" size="small" placeholder="请选择">
                        <el-option v-for="item in statusList"
                                   v-bind:key="item.value"
                                   v-bind:label="item.value"
                                   v-bind:value="item.value">
                        </el-option>
                    </el-select>*@
            </el-form-item>
            <el-form-item label="备注">
                <el-input size="small" v-model="machineDetails.Remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showImages">预览图片</el-button>
            <el-button v-on:click="showMachineDetials = false">取 消</el-button>
            <el-button type="primary" v-on:click="moveMachine">修 改</el-button>
            <el-button type="danger" v-on:click="removeMachine">删 除</el-button>
        </span>
    </el-dialog>
    @* 改变设备状态弹框 *@
    <el-dialog title="修改设备运行状态" v-bind:visible.sync="showChangeStatus" width="30%" before-close="handleClose">
        <el-form label-width="80px" model="changeStatusForm">
            <el-form-item label="产线">
                <el-input size="small" disabled v-model="changeStatusForm.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="机器名称">
                <el-input size="small" disabled v-model="changeStatusForm.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" disabled v-model="changeStatusForm.Section"></el-input>
            </el-form-item>
            <el-form-item label="状态">
                <el-select v-model="changeStatusForm.Status" size="small" placeholder="请选择">
                    <el-option v-for="item in statusList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showChangeStatus = false">取 消</el-button>
            <el-button type="primary" v-on:click="saveChangedStatus">确 定</el-button>
        </span>
    </el-dialog>


    @* 增加产线弹框 *@
    <el-dialog title="添加产线" v-bind:visible.sync="showAddLine" width="40%" before-close="handleClose">
        <el-form label-width="100px" model="addSelectedAssetnumsReturnData">
            <el-form-item label="产线">
                <el-input size="small" v-model="addSelectedAssetnumsReturnData.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="部门">
                <el-select clearable filterable v-model="addSelectedAssetnumsReturnData.UserDepartment" size="small" placeholder="请选择">
                    <el-option v-for="item in deparments"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <hr />
            <div>
                <el-button size="small" type="success" v-on:click="addMachineToCreatingLine">添加设备</el-button>
                <el-button size="small" type="danger" v-on:click="cancelAddMachineToCreatingLine">回退删除</el-button>
            </div>
            <div style="display:flex;flex-wrap:wrap;">
                <div style="display:flex;margin-left:5px;" v-for="(item,index) in addlinemachinechioed">
                    <span style="padding-top:5px;">序号:{{index +1}}&nbsp;&nbsp;&nbsp;</span>
                    <el-select clearable filterable v-model="item.test" class="addlinemachines" size="small" placeholder="请选择">
                        <el-option v-for="item in assetNumsList"
                                   v-bind:key="item.value"
                                   v-bind:label="item.value"
                                   v-bind:value="item.value">
                        </el-option>
                    </el-select>
                </div>
            </div>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showAddLine = false">取 消</el-button>
            <el-button type="primary" v-on:click="asveAddMachineToCreatingLine">保 存</el-button>
        </span>
    </el-dialog>

    @* 预览弹框 *@
    <el-dialog title="预览图片"
               v-bind:visible.sync="showImg"
               width="65%"
               before-close="handleClose">
        <div>
            <el-carousel height="470px" trigger="click" v-bind:interval="4000">
                <el-carousel-item v-for="(item,index) in imgArr" key="item">
                    <img style="width:100%;height:100%;" v-on:click="showBigImg(index)" v-bind:src="item.FullPath" />
                </el-carousel-item>
            </el-carousel>
        </div>
        <span slot="footer" class="dialog-footer">
            <el-button type="primary" v-on:click="showImg = false">关 闭</el-button>
            @*<el-button type="primary" v-on:click="showImg = false">确 定</el-button>*@
        </span>
    </el-dialog>

    @* 新增保养计划弹框 *@
    <el-dialog title="新增保养计划"
               v-bind:visible.sync="showaddlpan"
               width="30%"
               v-bind:before-close="handleClose">
        <div>
            <el-form label-width="100px" v-bind:model="addRecordData">
                <el-form-item label="设备编号:">
                    <el-select v-model="addRecordData.enumber" size="mini" filterable placeholder="请选择">
                        <el-option v-for="item in EnumLists"
                                   v-bind:key="item.value"
                                   v-bind:label="item.label"
                                   v-bind:value="item.value">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="保养记录时间:">
                    <el-date-picker v-model="addRecordData.createDate"
                                    type="month"
                                    size="mini"
                                    placeholder="请选择保养日期">
                    </el-date-picker>
                </el-form-item>
                <el-form-item label="部门:">
                    {{addRecordData.depar}}
                </el-form-item>
                <el-form-item label="设备名称:">
                    {{addRecordData.ename}}
                </el-form-item>
                <el-form-item label="计划保养日期:">
                    <el-date-picker v-model="addRecordData.repiarDate"
                                    type="date"
                                    size="mini"
                                    placeholder="请选择保养日期">
                    </el-date-picker>
                </el-form-item>
                <el-form-item label="保养工时:">
                    <el-input-number v-model="addRecordData.hours" size="mini" v-bind:step="0.5"></el-input-number>
                </el-form-item>
                <el-form-item label="负责人:">
                    <el-input v-model="addRecordData.agent" size="mini"></el-input>
                </el-form-item>
                <el-form-item label="备注:">
                    <el-input v-model="addRecordData.remark" size="mini"></el-input>
                </el-form-item>
                <el-form-item label="异常记录:">
                    <el-input v-model="addRecordData.Abnormal_records" size="mini"></el-input>
                </el-form-item>
            </el-form>
        </div>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showaddlpan = false">取 消</el-button>
            <el-button type="primary" v-on:click="saveAddPlan">保 存</el-button>
        </span>
    </el-dialog>
</div>




<script>
    // 返回首页
    function goback() {
        window.location.href = "/Equipment/Index"
    };
    let vm = new Vue({
        el: "#app",
        data: {
            addRecordData:{
                enumber: null,
                ename: null,
                repiarDate: null,
                hours: null,
                agent: null,
                remark: null,
                createDate: null,
                depar: null,
                Abnormal_records:null,
            },
            showaddlpan: false,
            EnumLists:[],
            expandNumver: '1',
            activeNames: ['1','2'],
            deparments: [],
            depars: null,
            mechineNum: null,
            formLabelAlign: {
                linenum: null,
                mechineName: null,
                mechineStatus: null
            },
            dialogVisible: false,
            showMachineDetials: false,
            machineDetails:{
                AssetNumber: null,   // 资产编号
                EquipmentName: null,   //设备名称
                EquipmentNumber: null,  // 设备编号
                LineNum: null,    // 产线号
                Section: null,  // 工段
                StationNum: null,  // 机器位置序号
                Status: null,    // 运状态
                UserDepartment: null,   // 使用部门
                WorkShop: null,   // 车间
                Remark:null     // 备注
            },
            datas: [],
            showChangeStatus: false,
            changeStatusForm: {
                EquipmentName: null,   //设备名称
                LineNum: null,    // 产线号
                Section: null,  // 工段
                Status: null,    // 运状态
            },
            statusList: [
                { label: "维修", value: "维修" },
                { label: "停机", value: "停机" },
                { label: "运行", value: "运行" },
                { label: "正常", value: "正常" },
            ],
            // 为了实时修改产线上设备运行状态而不必访问后台数据
            ln: null,
            mm: null,

            // 添加设备信息
            addMachine: {
                LineNum: null,
                EquipmentName: null,
                AssetNumber: null,
                UserDepartment: null,
                Status: null,
                EquipmentNumber: null,
                Section: null,
                StationNum: null,
                Remark: null,
            },
            addSelectedAssetnums: null,     // 添加设备所选资产编号
            addSelectedAssetnumsReturnData: {
                LineNum: null,
                EquipmentName: null,
                AssetNumber: null,
                UserDepartment: null,
                Status: null,
                EquipmentNumber: null,
                Section: null,
                StationNum: null,
                Remark: null,
            },
            assetNumsList: [],

            // 添加产线
            showAddLine: false,
            addlinemachinechioed: [],
            changeColor: false,
            showImg: false,
            imgArr: [],
            rolse: JSON.parse(localStorage.getItem("rigths"))
        },
        mounted() {
            // 页面加载时获取设备资产编号以及使用部门
            this.gstSelectVal();
            this.getAllAssetNums();
            // 获取上一连接地址--用来判断是从哪个页面跳转过来的并且获取对应的报修单数据
            let lastUrl = document.referrer;
            if (lastUrl.indexOf("Equipment_Rateof_grain") != -1) {
                let dapar = getUrlParam('depar')
                this.depars = dapar
            } else {
                this.depars = '@UserDepar';
            }

            if (this.checkRoles(this.rolse, '设备产线添加')) {
                $('.addLineBtn').show()
            };
        },
        methods: {
            checkRoles(list, roleName) {   //检测权限
                if (list && roleName) {
                    for (let item in list) {
                        if (list[item] == roleName) {
                            return true;
                        };
                    };
                };
                return false;
            },
            KYsetinterval() {
                if (this.datas.length > 0) {
                    axios.post("/Equipment/KongYa_Status").then(res=> {
                        this.datas.forEach(item=> {
                            if (item.linenum == "空压机") {
                                if (item.mechines.length > 0) {
                                    item.mechines.forEach(items=> {
                                        if (items.equipmentNumber == res.data.table.equipmentNumber) {
                                            items.status = res.data.table.status
                                        } else if (items.equipmentNumber == res.data.table1.equipmentNumber) {
                                            items.status = res.data.table1.status
                                        } else if (items.equipmentNumber == res.data.table2.equipmentNumber) {
                                            items.status = res.data.table2.status
                                        }
                                    });
                                }

                            }
                        })
                })
                }
            },
            // 计算三种状态下的设备数量--每条产线
            checkCountNums(item, status) {
                let n = 0
                item.mechines.forEach(element=> {
                    if (element.status == status) {
                        n++
                    }
                });
                return n
            },
            // 选择设备状态
            changeS(item,index,status,items,indexs){
                console.log(item)
                console.log(index)
                console.log(status)
                console.log(items)
                console.log(indexs)
                let equipmentNumber = [item.equipmentNumber];
                let linenum = items.linenum;
                let userdepar = items.depar
                axios.post("/Equipment/Equipment_state", { equipmentNumber, status, linenum, userdepar}).then(res=> {
                    console.log(res.data)
                    if (res.data.result == true) {
                        this.$notify({
                            message: res.data.msg,
                            type: "success"
                        });
                        this.datas[indexs].mechines[index].status = status;
                    } else {
                        this.$notify({
                            message: "操作失败",
                            type: "warning"
                        })
                    }
                }).catch(err=> {
                    this.$notify({
                        message: "连接失败",
                        type:"warning"
                    })
                })
            },
            // 监听设备状态返回按钮type
            checkStatusType(item){
                if (item == "运行") {
                    return `success`
                } else if (item == "停机") {
                    return `warning`
                } else if (item == "维修") {
                    return `danger`
                } else if (item == "离线" || item == "断电") {
                    return `info`
                }
            },
            // 点击保养计划方法
            showplandialog(item) {
                console.log(item.equipmentNumber)
                getmacihnedetials(item.equipmentNumber);

                this.showaddlpan = true;
                //this.getAllEquinums()
            },
            // 新建保存
            saveAddPlan() {
                if (this.addRecordData.enumber != null && this.addRecordData.repiarDate != null && this.addRecordData.hours != null && this.addRecordData.createDate != null && this.addRecordData.depar != null) {
                    let dd = new Date(this.addRecordData.createDate);  //
                    let year = dd.getFullYear();
                    let month = dd.getMonth() + 1;
                    let obj = {
                        UserDepartment: this.addRecordData.depar, EquipmentName: this.addRecordData.ename,
                        EquipmentNumber: this.addRecordData.enumber, Mainten_equipment: this.addRecordData.repiarDate,
                        Maintenance_work: this.addRecordData.hours + 'H', Mainten_supervisor: this.addRecordData.agent,
                        Abnormal_records: this.addRecordData.Abnormal_records, Year: year, Month: month, Remark: this.addRecordData.remark
                    }
                    axios.post("/Equipment/ADDMonthlyMain_plan", obj).then(res=> {
                        console.log(res.data)
                        if (res.data.meg == 'true') {
                            this.$message({
                                message: "保存成功",
                                type: "success"
                            });
                            this.showaddlpan = false;
                            window.location.href = "/Equipment/Equipment_MonthlyMaintenance_plan?dates=" + encodeURI(this.addRecordData.createDate) + "&depar=" + encodeURI(this.addRecordData.depar)
                            //thisgetTableInfos(this.addRecordData.createDate, this.addRecordData.depar)
                        } else {
                            if ("plan_main" in res.data) {
                                this.$message({
                                    message: res.data.plan_main,
                                    type: "warning"
                                });
                            } else {
                                this.$message({
                                    message: "保存失败",
                                    type: "warning"
                                })
                            }
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "新建保存时连接失败",
                            type: "warning"
                        })
                    })
                } else {
                    this.$message({
                        message: "请补全信息",
                        type: "warning"
                    })
                }
            },
            // 获取使用部门列表
            gstSelectVal() {
                var obj = new Date();
                axios.post("/Equipment/Userdepartment_list", { exce: obj }).then(res=> {
                    res.data.forEach(item=> {
                        let obj = { label: item, value: item };
                        this.deparments.push(obj);
                    });
                }).catch(err=> {
                    console.log(err.data)
                })
            },
            // 使用部门选择框发生改变--获取新的数据
            selectChanged(val) {
                console.log(val)
                if (val.length != 0) {
                    axios.post("/Equipment/Index2", { departmentlist: val }).then(res=> {
                        console.log(res.data)
                        if (res.data.length > 0) {
                            let test = []
                            res.data.forEach(item=> {
                                for (let i in item) {
                                    for (let j = 0; j < item[i].length; j++) {
                                        item[i][j].depar = i
                                        test.push(item[i][j])
                                    }
                                }
                            });
                            test.forEach(item=> {
                                //console.log(item.linenum)
                                if (item.linenum == "空压机") {
                                    console.log(item.linenum)
                                    if (item.mechines.length > 0) {
                                        item.mechines.forEach(items=> {
                                            if (items.status == "运行") {
                                                item.productLineStatus = "运行"
                                                return false;
                                            }
                                        })
                                    }
                                };
                                return false;
                            })
                            this.datas = test;
                            console.log(test)
                            //setInterval(this.KYsetinterval(), 1000);
                        } else {
                            this.$notify({
                                message: "暂无数据",
                                type:"warning"
                            })
                        }

                    }).catch(err=> {

                    })
                } else {
                    this.datas = [];
                }
            },
            // 在原有设备的左边添加新设备
            addInLeft(item, index, linenum) {
                console.log(item)
                this.dialogVisible = true
                this.addMachine.LineNum = this.datas[linenum].linenum
                this.addMachine.StationNum = index + 1
                this.addMachine.UserDepartment = this.datas[linenum].depar
            },
            // 在原有设备的右边添加新设备
            addInRight(item, index, linenum) {
                this.dialogVisible = true
                this.addMachine.LineNum = this.datas[linenum].linenum
                this.addMachine.UserDepartment = this.datas[linenum].depar
                this.addMachine.StationNum = index + 1 +1
            },
            //单击实现此行收缩
            changeexpand(index) {
                alert(index)
                this.expandNumver = `"${index}"`
            },

            // 设备上的"详细信息"按钮方法--获取设备详细信息
            showDetails(mechineIndex, lineIndex) {
                let asNum = getAsUnms(lineIndex, mechineIndex)
                getmacihnedetials(asNum)
                this.showMachineDetials = true;
            },

            // 改变设备状态
            changeStatus(mechineIndex, lineIndex) {
                let asNum = getAsUnms(lineIndex, mechineIndex);
                console.log(asNum)
                //getmacihnedetials(asNum, vm.changeStatusForm)
                getmacihnedetials(asNum)
                this.showChangeStatus = true;

                this.ln = lineIndex;
                this.mm = mechineIndex;
            },
            // 保存修改的运行状态
            saveChangedStatus() {
                axios.post("/Equipment/Equipment_state", { equipmentNumber: this.changeStatusForm.EquipmentNumber, linenum: this.changeStatusForm.LineNum, status: this.changeStatusForm.Status, userdepar: this.changeStatusForm.UserDepartment }).then(res=> {
                    console.log(res.data)
                    if (res.data.result == true) {
                        vm.$message({
                            message: res.data.msg,
                            type: "success"
                        });
                        this.datas.forEach((item, index) => {
                            if (this.ln == index) {
                                item.mechines[this.mm].status = this.changeStatusForm.Status;
                            }
                        })
                        this.showChangeStatus = false;
                    } else {
                        vm.$message({
                            message: res.data.msg,
                            type: "warning"
                        });
                    }
                }).catch(err=> {
                    vm.$message({
                        message: "连接服务器失败1",
                        type: "warning"
                    });
                });

            },
            // 弹窗关闭提示
            handleClose(done) {
                this.$confirm('确认关闭？')
                  .then(_ => {
                      done();
                  })
                  .catch(_ => { });
            },
            // 确认保存添加的设备信息
            saveAdd() {
                if (this.addMachine.EquipmentName == ('' | null)) {
                    this.$message({
                        message: "请填写设备名称",
                        type: "warning"
                    })
                } else if (this.addMachine.AssetNumber == ('' | null)) {
                    this.$message({
                        message: "请填写设备资产编号",
                        type: "warning"
                    })
                } else if (this.addMachine.UserDepartment == ('' | null)) {
                    this.$message({
                        message: "请填写设备使用部门",
                        type: "warning"
                    })
                } else if (this.addMachine.EquipmentNumber == ('' | null)) {
                    this.$message({
                        message: "请填写设备编号",
                        type: "warning"
                    })
                } else if (this.addMachine.Section == ('' | null)) {
                    this.$message({
                        message: "请填写设备工段",
                        type: "warning"
                    })
                } else {
                    axios.post("/Equipment/ADDEquipment", {
                        EquipmentNumber: this.addMachine.EquipmentNumber, AssetNumber: this.addMachine.AssetNumber, EquipmentName: this.addMachine.EquipmentName, Status: this.addMachine.Status,
                        UserDepartment: this.addMachine.UserDepartment, LineNum: this.addMachine.LineNum, Section: this.addMachine.Section, StationNum: this.addMachine.StationNum, Remark: this.addMachine.Remark
                    }).then(res=> {
                        console.log(JSON.parse(res.data.equipmentSetStation));
                        if (res.status == 200) {
                            this.datas.forEach((item) => {
                                if (this.addMachine.LineNum == item.linenum) {
                                    let obj = {
                                        'mechineindex': this.addMachine.StationNum - 1,
                                        'status': this.addMachine.Status,
                                        'equipmentName': this.addMachine.EquipmentName
                                    }
                                    item.mechines.splice(this.addMachine.StationNum-1, 0, obj)
                                }
                                console.log(this.datas);

                            });
                            this.$message({
                                message: "添加成功",
                                type: "success"
                            })
                            this.dialogVisible = false
                        } else {
                            this.$message({
                                message: res.data,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "连接服务器失败",
                            type: "warning"
                        })
                    })
                }

            },

            // 迁移设备方法
            moveMachine() {
                if (this.machineDetails.UserDepartment == ('' | null) || this.machineDetails.StationNum == ('' | null) || this.machineDetails.LineNum == ('' | null)) {
                    this.$message({
                        message: "进行设备迁移必须填写：使用部门、设备位置、产线等信息",
                        type: "warning"
                    });
                } else {
                    axios.post("/Equipment/Migration", {
                        equipmentNumber: this.machineDetails.EquipmentNumber,
                        userdepar: this.machineDetails.UserDepartment,
                        linenum: this.machineDetails.LineNum,
                        stationnum: this.machineDetails.StationNum,
                        workShop: this.machineDetails.WorkShop,
                        section: this.machineDetails.Section,
                        remark: this.machineDetails.Remark
                    }).then(res=> {

                        if (res.data.indexOf("成功") != -1) {
                            this.$message({
                                message: "操作成功",
                                type: "success"
                            })
                        } else {
                            this.$message({
                                message: res.data,
                                type: "warning"
                            })
                        }

                    }).catch(err=> {
                        this.$message({
                            message: "连接服务器失败2",
                            type: "warning"
                        })
                    })
                }

                this.showMachineDetials = false;
            },

            // 删除设备
            removeMachine(){
                let confirms = confirm("确定将本台设备移出产线吗？");
                if (confirms) {
                    axios.post("/Equipment/deleteEquipment", { equipmentNumber: this.machineDetails.EquipmentNumber }).then(res=> {
                        if (res.data == "删除设备成功！") {
                            this.$message({
                                message: res.data,
                                type: "success"
                            });
                            this.datas.forEach(item=> {
                                item.mechines.forEach((items, index) => {
                                    if (items.equipmentNumber == this.machineDetails.EquipmentNumber) {
                                        item.mechines.splice(index, 1)
                                    }
                                })
                            });
                            this.showMachineDetials = false;
                        } else {
                            this.$message({
                                message: res.data,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "链接服务器失败",
                            type: "warning"
                        })
                    })
                } else {

                }
            },

            // 获取所有设备的资产编号
            getAllAssetNums() {
                axios.post("/Equipment/EQNumberList").then(res=> {
                    console.log(res.data)
                    res.data.forEach(item=> {
                        let obj = { label: item, value: item }
                        this.assetNumsList.push(obj)
                    })
                })
            },


            // 添加产线
            addLine() {
                this.showAddLine = true;
            },
            //  添加新产线设备
            addMachineToCreatingLine() {
                let obj = { test: null };
                this.addlinemachinechioed.push(obj);
            },
            //  回退删除
            cancelAddMachineToCreatingLine() {
                this.addlinemachinechioed.pop();
            },
            // 保存提交新增产线
            asveAddMachineToCreatingLine() {

                if (this.addlinemachinechioed.length == 0) {
                    this.$message({
                        message: "新增产线必须至少存在一台或以上设备！",
                        type: "warning"
                    });
                } else {
                    let flag = false;
                    this.addlinemachinechioed.forEach(item=> {
                        if (item.test == null) {

                        } else {
                            flag = true;
                        }
                    });
                    if (flag) {
                        //alert("falg=true")
                        let postdata = []
                        this.addlinemachinechioed.forEach((item, index) => {
                            let obj = [(index + 1), item.test]
                            let obj2 = {Key:index + 1,Value:item.test}
                            postdata.push(obj2)
                        });
                        console.log(JSON.stringify(postdata))
                        //alert('addSelectedAssetnumsReturnData.UserDepartment')
                        //console.log(this.addSelectedAssetnumsReturnData)
                        //console.log(this.addSelectedAssetnumsReturnData.UserDepartment)
                        axios.post("/Equipment/ADDLineNum", { usedepartment: this.addSelectedAssetnumsReturnData.UserDepartment, lineNum: this.addSelectedAssetnumsReturnData.LineNum, equipmentNumberlist: JSON.stringify(postdata) }).then(res=> {
                            console.log(res.data)
                            if (res.data.indexOf("成功") != -1) {
                                this.$message({
                                    message: res.data,
                                    type: "success"
                                });
                                this.showAddLine = false;
                            } else {
                                this.$message({
                                    message: res.data,
                                    type: "warning"
                                });
                            }
                        }).catch(err=> {
                            this.$message({
                                message: "链接服务器失败",
                                type: "warning"
                            });
                        })
                    } else {
                        this.$message({
                            message: "请补全设备信息",
                            type: "warning"
                        });
                    }
                }
            },

            //  下班停线功能
            shudonwall(item,index) {
                //console.log(item)

                let needChangeArr = []   // 在运行机器
                let needChangeArr2 = []   // 停机机器
                let flag = true;
                item.mechines.forEach(item=> {
                    //console.log(items.equipmentNumber)
                    if (item.status == "运行") {
                        needChangeArr.push(item.equipmentNumber);
                        flag = false;    // 还有运行的机器说明是准备下班的阶段
                    } else if (item.status == "停机") {
                        console.log(item.equipmentNumber)
                        needChangeArr2.push(item.equipmentNumber);
                    }
                });

                let statu = "运行"
                let machin = needChangeArr

                if (flag==false) {
                    statu = "停机";

                } else {
                    machin = needChangeArr2
                }
                //console.log(needChangeArr)
                //console.log(needChangeArr2)
                //console.log(machin)
                axios.post("/Equipment/Equipment_state", { equipmentNumber: machin, status: statu, linenum: item.linenum, userdepar: item.depar }).then(res=> {
                    console.log(res.data)
                    if (res.data.result == true) {
                        if (statu == "停机") {
                            this.$message({
                                message: "整线停机操作成功！",
                                type: "success"
                            });
                            //this.changeColor = true;
                            this.datas[index].mechines.forEach(item=> {
                                if (item.status == "运行") {
                                    item.status = "停机"
                                }
                            });
                        } else {
                            this.$message({
                                message: "整线开机操作成功！",
                                type: "success"
                            });
                            //this.changeColor = false;
                            this.datas[index].mechines.forEach(item=> {
                                if (item.status == "停机") {
                                    item.status = "运行"
                                }
                            });
                        }

                    } else {
                        if (statu == "停机") {
                            this.$message({
                                message: "关机失败，请重试或手动单个修改运行状态！",
                                type: "warning"
                            });
                            this.changeColor = true;
                        } else {
                            this.$message({
                                message: "开机失败，请重试或手动单个修改运行状态！",
                                type: "warning"
                            });
                            this.changeColor = false;
                        }
                    }
                }).catch(err=> {
                    this.$message({
                        message: "下班失败！",
                        type: "warning"
                    })
                })
            },

            // 显示预览图片按钮方法
            showImages() {
                this.showImg = true;
                axios.post("/Equipment/Details", { equipmentNumber: this.machineDetails.AssetNumber }).then(res=> {
                    console.log(res.data);
                    // 获取图片
                    if (res.data.picture != '未上传图片。') {
                        let img = JSON.parse(res.data.picture);

                        img.forEach(item=> {
                            item.FullPath = item.FullPath.replace(/D:/, '')
                        })
                        //console.log(img)
                        this.imgArr = img

                    } else {
                        this.$message({
                            message: res.data.picture,
                            type:"warning"
                        })
                    }
                }).catch(err=> {
                    this.$message({
                        message: "获取预览图失败",
                        type: "warning"
                    })
                })
            },
            // 显示预览大图
            showBigImg(index) {
                alert(index)
            },
            // 展开指定行
        },
        watch: {
            // 监听添加产线时所选资产编号--获取相对应的数据
            addSelectedAssetnums() {
                if (this.addSelectedAssetnums != ('' | null)) {
                    axios.post("/Equipment/EquipmentInfo_getdata_by_eqnum", { equipmentNumber: this.addSelectedAssetnums }).then(res=> {
                        console.log(res.data)

                        if (res.data.length == 0) {
                            this.$message({
                                message:"此资产编号无对应数据",
                                type:"warning"
                            })
                        } else {
                            this.addMachine.EquipmentName = res.data.EquipmentName;
                            this.addMachine.EquipmentNumber = res.data.EquipmentNumber;
                            this.addMachine.AssetNumber = res.data.AssetNumber;
                            this.addMachine.Remark = res.data.Remark;
                            this.addMachine.Section = res.data.Section
                            //this.addSelectedAssetnumsReturnData = res.data[0]
                        }
                    })
                }
            },
            // 监听使用部门算则矿改变--获取新的产线数据
            depars() {
                if (this.depars != null) {
                    this.selectChanged(this.depars)
                }

            }
        }
    });


    //  获取设备编号
    function getAsUnms(linme, machinenum) {
        let asNum = null
        vm.datas.forEach((item, lineindexs) => {
            if (Number(linme) == Number(lineindexs)) {
                asNum = item.mechines[machinenum].equipmentNumber
            }
        });
        return asNum
    };

    window.onload = function () {
        setInterval('vm.KYsetinterval()', 3000);
    }



    // 根据资产编号获取设备详细
    function getmacihnedetials(asnums) {
        axios.post("/Equipment/Particulars", { equipmentNumber: asnums }).then(res=> {
            console.log(res.data[0])
            //console.log(res.data)
            if (res.data.length == 0) {
                vm.machineDetails = "";
                vm.changeStatusForm = "";
            } else {
                vm.machineDetails = res.data[0];
                vm.changeStatusForm = res.data[0]

                vm.addRecordData.enumber = vm.machineDetails.EquipmentNumber
                vm.addRecordData.depar = vm.machineDetails.UserDepartment
                vm.addRecordData.ename = vm.machineDetails.EquipmentName
            }
        }).catch(err=> {
            vm.$message({
                message: "连接服务器失败3",
                type: "warning"
            });
        });
    }



</script>
