@model IEnumerable<JianHeMES.Models.EquipmentBasicInfo>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/axios.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<style>
    #app {
        width: 100%;
        height: 550px;
        margin: 0 auto;
        padding: 25px;
      }

      .line {
        width: 100%;
        display: flex;
        justify-content: space-between;
        margin-top: 25px;
      }

      .mechine {
        width: 92px;
        height: 40px;
        background-color: #ddd;
        border-radius: 4px;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
      }

      .mechinetop {
        width: 92px;
        height: 20px;
        border-radius: 4px;
        border-bottom: 1px solid black;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
      }

      .mechinbottom {
        width: 92px;
        height: 20px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);
      }

      .mechinetop button,
      .mechinbottom button {
        background-color: #409eff;
        border: none;
        padding: 0 4px;
        border-radius: 5px;
        height:18px;
      }

      /* 隐藏小图标样式 */

      .mechine {
        position: relative;
        padding: 0px;
      }

      .mechine:hover .left {
        display: inline-block;
      }

      .mechine:hover .rigth {
        display: inline-block;
      }

      .mechine:hover .left {
        display: inline-block;
      }

      .mechine:hover .rigth {
        display: inline-block;
      }

      .left {
        position: absolute;
        left: -15px;
        top: 31%;
        display: none;
        transition: all linear .2s;
      }

      .left:hover {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        background-color: #ccc;
      }

      .rigth {
        position: absolute;
        right: -15px;
        top: 31%;
        display: none;
        transition: all linear .2s;
      }

      .rigth:hover {
        background-color: #ccc;
        width: 15px;
        height: 15px;
        border-radius: 50%;
      }

      .left {
        position: absolute;
        left: -10px;
        z-index: 66;
      }

      .rigth {
        position: absolute;
        right: -10px;
        z-index: 66;
      }

      .el-collapse-item__wrap {
        padding: 0 25px;
      }

      .selectContainer{
          text-align:center;
          margin:15px auto;
      }

      .el-form-item{
          margin-top:5px !important;
          margin-bottom:0 !important;
      }

      /*.el-input{
          width:300px;
      }*/
</style>

<h2 style="text-align:center;margin-top:15px;margin-bottom:0;font-size:25px;">设备信息</h2>


<div id="app">
    <div class="selectContainer">
        <el-select v-model="depars" v-on:change="selectChanged" multiple multiple-limit="3" placeholder="请选择">
            <el-option v-for="item in deparments"
                       v-bind:key="item.value"
                       size="mini"
                       v-bind:label="item.value"
                       v-bind:value="item.value">
            </el-option>
        </el-select>
    </div>
    <el-collapse accordion v-for="(items,indexs) in datas">
        <el-collapse-item>
            <template slot="title">
                {{items.depar}}&nbsp;&nbsp;&nbsp;&nbsp;产线:&nbsp;&nbsp; {{items.linenum}} &nbsp;&nbsp;&nbsp;&nbsp; {{items.productLineStatus}}
                <i style="color: yellowgreen;"
                   class="header-icon el-icon-success"></i>
            </template>
            <div class="line">
                <div v-for="(item,index) in items.mechines" class="mechine" v-bind:class="`mechine${index}`">
                    <div class="mechinetop">
                        <span style="font-size: 11px">{{index+1}}号</span>
                        <button v-on:click="showDetails(index,indexs)">详细信息</button>
                    </div>
                    <div class="mechinbottom">
                        <button v-on:click="changeStatus(index,indexs)">{{item.status}}</button>
                    </div>
                    <i class="el-icon-arrow-left left" v-on:click="addInLeft(item,index,indexs)"></i>
                    <i class="el-icon-arrow-right rigth" v-on:click="addInRight(item,index,indexs)"></i>
                </div>
            </div>
        </el-collapse-item>
    </el-collapse>

    @* 添加设备信息弹框 *@
    <el-dialog title="添加设备" v-bind:visible.sync="dialogVisible" width="30%" before-close="handleClose">
        <!-- <span>这是一段信息</span> -->
        <el-form label-width="100px" model="addSelectedAssetnumsReturnData">
            <el-form-item label="产线">
                <el-input size="small" disabled v-model="addSelectedAssetnumsReturnData.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="资产编号">
                @*<el-input size="small" v-model="addMachine.AssetNumber"></el-input>*@
                <el-select v-model="addSelectedAssetnums" size="small" placeholder="请选择">
                    <el-option v-for="item in assetNumsList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="设备名称">
                <el-input size="small" disabled v-model="addSelectedAssetnumsReturnData.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="使用部门">
                @*<el-input v-model="addMachine.UserDepartment"></el-input>*@
                <el-select v-model="addSelectedAssetnumsReturnData.UserDepartment" size="small" placeholder="请选择">
                    <el-option v-for="item in deparments"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="运行状态">
                @*<el-input v-model="addMachine.Status"></el-input>*@
                <el-select v-model="addSelectedAssetnumsReturnData.Status" size="small" placeholder="请选择">
                    <el-option v-for="item in statusList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="设备编号">
                <el-input size="small" disabled v-model="addSelectedAssetnumsReturnData.EquipmentNumber"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" v-model="addSelectedAssetnumsReturnData.Section"></el-input>
            </el-form-item>
            <el-form-item label="设备位置">
                <el-input size="small" disabled v-model="addSelectedAssetnumsReturnData.StationNum"></el-input>
            </el-form-item>
            <el-form-item label="备注">
                <el-input size="small" v-model="addSelectedAssetnumsReturnData.Remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogVisible = false">取 消</el-button>
            <el-button type="primary" v-on:click="saveAdd">确 定</el-button>
        </span>
    </el-dialog>
    @* 设备详细信息弹框 *@
    <el-dialog title="设备详细信息" v-bind:visible.sync="showMachineDetials" width="30%" before-close="handleClose">
        <!-- <span>这是一段信息</span> -->
        <el-form label-width="80px" model="machineDetails">
            <el-form-item label="产线">
                <el-input size="small" v-model="machineDetails.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="机器名称">
                <el-input size="small" disabled v-model="machineDetails.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="设备编号">
                <el-input size="small" disabled v-model="machineDetails.EquipmentNumber"></el-input>
            </el-form-item>
            <el-form-item label="资产编号">
                <el-input size="small" disabled v-model="machineDetails.AssetNumber"></el-input>
            </el-form-item>
            <el-form-item label="使用部门">
                <el-select v-model="machineDetails.UserDepartment" size="small" placeholder="请选择">
                    <el-option v-for="item in deparments"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="车间">
                <el-input size="small" v-model="machineDetails.WorkShop"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" v-model="machineDetails.Section"></el-input>
            </el-form-item>
            <el-form-item label="设备位置">
                <el-input size="small" v-model="machineDetails.StationNum"></el-input>
            </el-form-item>
            <el-form-item label="运行状态">
                @*<el-input size="small" v-model="machineDetails.Status"></el-input>*@
                <el-select v-model="machineDetails.Status" size="small" placeholder="请选择">
                    <el-option v-for="item in statusList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="备注">
                <el-input size="small" v-model="machineDetails.Remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showMachineDetials = false">取 消</el-button>
            <el-button type="primary" v-on:click="moveMachine">修 改</el-button>
        </span>
    </el-dialog>
    @* 改变设备状态弹框 *@
    <el-dialog title="修改设备运行状态" v-bind:visible.sync="showChangeStatus" width="30%" before-close="handleClose">
        <!-- <span>这是一段信息</span> -->
        <el-form label-width="80px" model="changeStatusForm">
            <el-form-item label="产线">
                <el-input size="small" disabled v-model="changeStatusForm.LineNum"></el-input>
            </el-form-item>
            <el-form-item label="机器名称">
                <el-input size="small" disabled v-model="changeStatusForm.EquipmentName"></el-input>
            </el-form-item>
            <el-form-item label="工段">
                <el-input size="small" disabled v-model="changeStatusForm.Section"></el-input>
            </el-form-item>
            <el-form-item label="状态">
                @*<el-input v-model="changeStatusForm.Status"></el-input>*@
                <el-select v-model="changeStatusForm.Status" size="small" placeholder="请选择">
                    <el-option v-for="item in statusList"
                               v-bind:key="item.value"
                               v-bind:label="item.value"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="showChangeStatus = false">取 消</el-button>
            <el-button type="primary" v-on:click="saveChangedStatus">确 定</el-button>
        </span>
    </el-dialog>

</div>


<script>
    let vm = new Vue({
        el: "#app",
        data: {
            deparments: [],
            depars: null,
            mechineNum: null,
            formLabelAlign: {
                linenum: null,
                mechineName: null,
                mechineStatus: null
            },
            dialogVisible: false,
            showMachineDetials: false,
            machineDetails:{
                AssetNumber: "123456",   // 资产编号
                EquipmentName: null,   //设备名称
                EquipmentNumber: null,  // 设备编号
                LineNum: null,    // 产线号
                Section: null,  // 工段
                StationNum: null,  // 机器位置序号
                Status: null,    // 运状态
                UserDepartment: null,   // 使用部门
                WorkShop: null,   // 车间
                Remark:null     // 备注
            },
            datas: [],
            showChangeStatus: false,
            changeStatusForm: {
                EquipmentName: null,   //设备名称
                LineNum: null,    // 产线号
                Section: null,  // 工段
                Status: null,    // 运状态
            },
            statusList: [
                { label: "维修", value: "维修" },
                { label: "停机", value: "停机" },
                { label: "运行", value: "运行" },
                { label: "正常", value: "正常" },
            ],
            // 为了实时修改产线上设备运行状态而不必访问后台数据
            ln: null,
            mm: null,

            // 添加设备信息
            addMachine: {
                LineNum: null,
                EquipmentName: null,
                AssetNumber: null,
                UserDepartment: null,
                Status: null,
                EquipmentNumber: null,
                Section: null,
                StationNum: null,
                Remark: null,
            },
            addSelectedAssetnums: null,     // 添加设备所选资产编号
            addSelectedAssetnumsReturnData: {
                LineNum: null,
                EquipmentName: null,
                AssetNumber: null,
                UserDepartment: null,
                Status: null,
                EquipmentNumber: null,
                Section: null,
                StationNum: null,
                Remark: null,
            },
            assetNumsList:[]
        },
        mounted() {
            this.gstSelectVal();
            this.getAllAssetNums();
        },
        methods: {
            gstSelectVal() {
                var obj = new Date();
                axios.post("/Common/comany", { exce: obj }).then(res=> {
                    res.data.forEach(item=> {
                        let obj = { label: item, value: item };
                        this.deparments.push(obj);
                    });
                }).catch(err=> {
                    console.log(err.data)
                })
            },
            selectChanged(val) {
                console.log(val)
                if (val.length != 0) {
                    axios.post("/Equipment/Index2", { departmentlist: val }).then(res=> {
                        console.log(res.data)
                        let test = []
                        res.data.forEach(item=> {
                            for (let i in item) {
                                for (let j = 0; j < item[i].length; j++) {
                                    item[i][j].depar = i
                                    test.push(item[i][j])
                                }
                            }
                        });
                        this.datas = test;
                        //console.log(res.data)
                    }).catch(err=> {

                    })
                } else {
                    this.datas = [];
                }
            },
            addInLeft(item, index, linenum) {
                //alert(`点击了第${linenum+1}产线的第${index + 1}台机器,表示想在本台机器前面添加一台新机器`)
                console.log(item)
                this.dialogVisible = true
                //this.formLabelAlign.mechineNum = index
                //this.formLabelAlign.linenum = linenum + 1
                this.addMachine.LineNum = this.datas[linenum].linenum
                this.addMachine.StationNum = index + 1
                this.addMachine.UserDepartment = this.datas[linenum].depar
                //console.log(this.datas[linenum].linenum)

            },
            addInRight(item, index, linenum) {
                //alert(`点击了第${linenum + 1}产线的第${index + 1}台机器,表示想在本台机器后面添加一台新机器`)
                this.dialogVisible = true
                this.addMachine.LineNum = this.datas[linenum].linenum
                this.addMachine.UserDepartment = this.datas[linenum].depar
                this.addMachine.StationNum = index + 1 +1
            },

            // 设备上的"详细信息"按钮方法--获取设备详细信息
            showDetails(mechineIndex, lineIndex) {
                //alert(`点击了第${lineIndex + 1}产线的第${mechineIndex + 1}台机器,表示想查看响应的详细数据`)
                let asNum = getAsUnms(lineIndex, mechineIndex)
                getmacihnedetials(asNum)
                this.showMachineDetials = true;
            },

            // 改变设备状态
            changeStatus(mechineIndex, lineIndex) {
                //alert(`点击了第${lineIndex + 1}产线的第${mechineIndex + 1}台机器,表示想改变这台机器的状态`)
                let asNum = getAsUnms(lineIndex, mechineIndex);
                //getmacihnedetials(asNum, vm.changeStatusForm)
                getmacihnedetials(asNum)
                this.showChangeStatus = true;

                this.ln = lineIndex;
                this.mm = mechineIndex;
            },
            // 保存修改的运行状态
            saveChangedStatus() {
                axios.post("/Equipment/ChangeStatus", { id: this.changeStatusForm.Id, statu: this.changeStatusForm.Status }).then(res=> {
                    if (res.data == true) {
                        vm.$message({
                            message: "修改设备状态成功",
                            type: "success"
                        });
                        this.datas.forEach((item, index) => {
                            if (this.ln == index) {
                                item.mechines[this.mm].status = this.changeStatusForm.Status;
                            }
                        })
                        this.showChangeStatus = false;
                    } else {
                        vm.$message({
                            message: "修改失败",
                            type: "warning"
                        });
                    }
                }).catch(err=> {
                    vm.$message({
                        message: "连接服务器失败1",
                        type: "warning"
                    });
                });
                
            },
            handleClose(done) {
                this.$confirm('确认关闭？')
                  .then(_ => {
                      done();
                  })
                  .catch(_ => { });
            },
            saveAdd() {
                if (this.addMachine.EquipmentName == ('' | null)) {
                    this.$message({
                        message: "请填写设备名称",
                        type: "warning"
                    })
                } else if (this.addMachine.AssetNumber == ('' | null)) {
                    this.$message({
                        message: "请填写设备资产编号",
                        type: "warning"
                    })
                } else if (this.addMachine.UserDepartment == ('' | null)) {
                    this.$message({
                        message: "请填写设备使用部门",
                        type: "warning"
                    })
                } else if (this.addMachine.EquipmentNumber == ('' | null)) {
                    this.$message({
                        message: "请填写设备编号",
                        type: "warning"
                    })
                } else if (this.addMachine.Section == ('' | null)) {
                    this.$message({
                        message: "请填写设备工段",
                        type: "warning"
                    })
                } else {
                    axios.post("/Equipment/ADDEquipment", {
                        EquipmentNumber: this.addMachine.EquipmentNumber, AssetNumber: this.addMachine.AssetNumber, EquipmentName: this.addMachine.EquipmentName, Status: this.addMachine.Status,
                        UserDepartment: this.addMachine.UserDepartment, LineNum: this.addMachine.LineNum, Section: this.addMachine.Section, StationNum: this.addMachine.StationNum, Remark: this.addMachine.Remark
                    }).then(res=> {
                        console.log(this.addMachine.StationNum);
                        if (res.data == "添加成功！") {
                            this.datas.forEach((item) => {
                                if (this.addMachine.LineNum == item.linenum) {
                                    let obj = {
                                        'mechineindex': this.addMachine.StationNum - 1,
                                        'status': this.addMachine.Status
                                    }
                                    item.mechines.splice(this.addMachine.StationNum-1, 0, obj)
                                }
                                console.log(this.datas);

                            });
                            this.$message({
                                message: "添加成功",
                                type: "success"
                            })
                            this.dialogVisible = false
                        } else {
                            this.$message({
                                message: res.data,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "连接服务器失败",
                            type: "warning"
                        })
                    })
                }
                
            },

            // 迁移设备方法
            moveMachine() {
                if (this.machineDetails.UserDepartment == ('' | null) || this.machineDetails.StationNum == ('' | null) || this.machineDetails.LineNum == ('' | null)) {
                    this.$message({
                        message: "进行设备迁移必须填写：使用部门、设备位置、产线等信息",
                        type: "warning"
                    });
                } else {
                    axios.post("/Equipment/Migration", { id: this.machineDetails.Id, userdepar: this.machineDetails.UserDepartment, linenum: this.machineDetails.LineNum, stationnum: this.machineDetails.StationNum }).then(res=> {
                        if (res.data == "迁移成功！") {
                            this.$message({
                                message: "迁移成功",
                                type: "success"
                            })
                        } else {
                            this.$message({
                                message: res.data,
                                type: "warning"
                            })
                        }
                    }).catch(err=> {
                        this.$message({
                            message: "连接服务器失败2",
                            type: "warning"
                        })
                    })
                }
                
                this.showMachineDetials = false;
            },


            // 获取所有设备的资产编号
            getAllAssetNums() {
                axios.post("/Equipment/AssetNumberList").then(res=> {
                    console.log(res.data)
                    res.data.forEach(item=> {
                        let obj = { label: item, value: item }
                        this.assetNumsList.push(obj)
                    })
                })
            }
        },
        watch: {
            addSelectedAssetnums() {
                if (this.addSelectedAssetnums != ('' | null)) {
                    axios.post("/Equipment/Particulars", { assetnumber: this.addSelectedAssetnums }).then(res=> {
                        console.log(res.data)
                        
                        if (res.data.length == 0) {
                            this.$message({
                                message:"此资产编号无对应数据",
                                type:"warning"
                            })
                        } else {
                            this.addSelectedAssetnumsReturnData = res.data[0]
                        }
                    })
                }
            }
        }
    });


    //  获取资产编号
    function getAsUnms(linme, machinenum) {
        let asNum = null
        vm.datas.forEach((item, lineindexs) => {
            if (Number(linme) == Number(lineindexs)) {
                asNum = item.mechines[machinenum].assetNumber
            }
        });
        return asNum
    };

    // 根据资产编号获取设备详细
    function getmacihnedetials(asnums) {

        axios.post("/Equipment/Particulars", { assetnumber: asnums }).then(res=> {
            vm.machineDetails = res.data[0]
            vm.changeStatusForm = res.data[0]
        }).catch(err=> {
            vm.$message({
                message: "连接服务器失败3",
                type: "warning"
            });
        });
    }



</script>
