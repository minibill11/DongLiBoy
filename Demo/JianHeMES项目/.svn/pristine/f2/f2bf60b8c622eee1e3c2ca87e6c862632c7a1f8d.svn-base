using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

namespace JianHeMES.Controllers
{
    public class Personnel_Quality_objectivesController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();


        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Quality_objectives", act = "Index" });
            }
            return View();
        }


        public ActionResult Summarizing()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Quality_objectives", act = "Summarizing" });
            }
            return View();
        }




        #region --------------------DepartmentList()检索部门
        public ActionResult DepartmentList()
        {
            var depar = db.Personnel_IndexName.OrderByDescending(m => m.Id).Select(c => c.DepartmentData).Distinct();
            return Content(JsonConvert.SerializeObject(depar));
        }
        #endregion

        #region --------------------AssessmentList()检索考核指标比例版本
        public ActionResult AssessmentList()
        {
            var indica = db.Personnel_Assessment_indicators.OrderByDescending(m => m.Id).Select(c => new { c.indName, c.Price }).ToList();
            return Content(JsonConvert.SerializeObject(indica));
        }
        #endregion

        #region -----质量目标达成状况统计表显示
        public ActionResult Quality(string departmentdata, int year, int month)
        {
            //传入值有效，查数据
            var data = db.Personnel_Quality_objectives.Where(c => c.DepartmentData == departmentdata && c.Year == year && c.Month <= month).ToList();
            JObject userItem = new JObject();
            JObject userJobject = new JObject();
            int i = 0;
            //被考核部门有几个,此被考核部门班组有几个，项目、指标名称有几组
            var departmentlist = data.Select(c => c.AssetDepartment).Distinct().ToList();
            foreach (var department in departmentlist)//循环被考核部门
            {
                var DG_list = data.Where(c => c.AssetDepartment == department).Select(c => c.DP_Group).Distinct().ToList();
                foreach (var dg in DG_list)//循环被考核部门的班组
                {
                    var project_list = data.Where(c => c.AssetDepartment == department && c.DP_Group == dg).Select(c => c.Project).Distinct().ToList();
                    foreach (var project in project_list)//循环被考核部门的项目
                    {
                        var depart_DG_project_datalist = data.Where(c => c.AssetDepartment == department && c.DP_Group == dg && c.Project == project).Select(c => c.IndexName).ToList();
                        foreach (var target in depart_DG_project_datalist)//循环被考核部门的指标名称
                        {
                            var asset_target = data.Where(c => c.AssetDepartment == department && c.DP_Group == dg && c.Project == project && c.IndexName == target).Select(c => c.Target + c.Target_value + c.Target2).ToList();
                            foreach (var itge in asset_target)//循环被考核部门的目标值
                            {
                                var tarodlist = data.Where(c => c.AssetDepartment == department && c.DP_Group == dg && c.Project == project && c.IndexName == target && c.Target + c.Target_value + c.Target2 == itge).OrderBy(c => c.Month).ToList();
                                //ID
                                userItem.Add("Id", tarodlist.FirstOrDefault().Id);
                                //部门
                                userItem.Add("AssetDepartment", tarodlist.FirstOrDefault().AssetDepartment);
                                //班组
                                userItem.Add("DP_Group", tarodlist.FirstOrDefault().DP_Group);
                                //项目
                                userItem.Add("project", tarodlist.FirstOrDefault().Project);
                                //指标名称
                                userItem.Add("indexName", tarodlist.FirstOrDefault().IndexName);
                                //目标值
                                userItem.Add("target", tarodlist.FirstOrDefault().Target + tarodlist.FirstOrDefault().Target_value + tarodlist.FirstOrDefault().Target2);
                                foreach (var da in tarodlist)//循环月份
                                {
                                    //月份实际完成值
                                    userItem.Add(da.Month.ToString(), da.Actual_completion_value + da.Actua1);
                                }
                                userJobject.Add(i.ToString(), userItem);
                                userItem = new JObject();
                                i++;
                            }
                        }
                    }
                }
            }
            return Content(JsonConvert.SerializeObject(userJobject));
        }

        #endregion

        #region----优秀班组评优汇总表
        public ActionResult Excellent(int year, int month)
        {
            JObject output1 = new JObject();
            JArray userItem = new JArray();
            var Appraising = db.Personnel_Quality_objectives.Where(c => c.Year == year && c.Month == month).ToList();
            var department = Appraising.Select(c => c.AssetDepartment).Distinct().ToList();
            foreach(var item_eng in department)
            {
                var dp_ge = Appraising.Where(c => c.AssetDepartment == item_eng).Select(c => c.DP_Group).Distinct().ToList();
                foreach(var ihte in dp_ge)
                {
                    var peoject = Appraising.Where(c => c.AssetDepartment == item_eng && c.DP_Group == ihte).Select(c => c.Project).Distinct().ToList();
                    var item1 = Appraising.Where(c => c.AssetDepartment == item_eng && c.DP_Group == ihte).ToList();
                    //ID
                    output1.Add("Id", item1.FirstOrDefault().Id);
                    //被考核部门
                    output1.Add("AssetDepartment", item1.FirstOrDefault().AssetDepartment);
                    //班组
                    output1.Add("DP_Group", item1.FirstOrDefault().DP_Group);
                    JArray merge = new JArray();
                    foreach (var item_peoject in peoject)
                    {
                        JObject output = new JObject();
                        var item = Appraising.Where(c => c.AssetDepartment == item_eng && c.DP_Group == ihte && c.Project == item_peoject).ToList();
                       
                        //项目
                        output.Add("Project", item.FirstOrDefault().Project);
                        //指标名称
                        output.Add("IndexName", item.FirstOrDefault().IndexName);
                        //目标值
                        output.Add("Target_value", item.FirstOrDefault().Target + item.FirstOrDefault().Target_value + item.FirstOrDefault().Target2);
                        //实际值
                        output.Add("Actual_completion_value", item.FirstOrDefault().Actual_completion_value + item.FirstOrDefault().Actua1);
                        JArray ikge = new JArray();
                        //考核部门
                        foreach (var it in item)
                        {

                            ikge.Add(it.DepartmentData);
                        }
                        output.Add("DepartmentData", ikge);
                        int su = 100;
                        var project = item.FirstOrDefault().Project;
                        var de = db.Personnel_Assessment_indicators.Where(c => c.indName == project).Select(c => c.Price).ToList();
                        if (item.FirstOrDefault().Target_value <= item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData != "人力资源部" && item.FirstOrDefault().DepartmentData != "行政后勤部")
                        {
                            int danx = 0;
                            output.Add("Adanx", danx);//单项得分
                            double dexfen = danx * de.Count();
                            output.Add("Adefen", dexfen);//得分小计
                        }
                        else if (item.FirstOrDefault().Target_value > item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData != "人力资源部" && item.FirstOrDefault().DepartmentData != "行政后勤部")
                        {
                            output.Add("Bdanx", su);//单项得分
                            double Bdefen = su * de.Count();
                            output.Add("Bdefen", Bdefen);//得分小计
                        }
                        else if (item.FirstOrDefault().Target_value == item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "人力资源部")
                        {
                            output.Add("Cdanx", su);
                            double Cdefen = su * de.Count();
                            output.Add("Cdefen", Cdefen);
                        }
                        else if (item.FirstOrDefault().Target_value < item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "人力资源部")
                        {
                            double rte = su - (item.FirstOrDefault().Actual_completion_value - item.FirstOrDefault().Target_value);//单项得分
                            output.Add("Ddanx", rte);//单项得分
                            double Ddefen = rte * de.Count();//得分小计
                            output.Add("Ddefen", Ddefen);//得分小计
                        }
                        else if (item.FirstOrDefault().Target_value > item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "人力资源部")
                        {
                            double tef = su + (item.FirstOrDefault().Target_value - item.FirstOrDefault().Actual_completion_value);//单项得分
                            output.Add("Edanx", tef);//单项得分
                            double Edefen = tef * de.Count();//得分小计
                            output.Add("Edefen", Edefen);//得分小计
                        }
                        else if (item.FirstOrDefault().Target_value == item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "行政后勤部")
                        {
                            output.Add("Fdanx", su);//单项得分
                            double Fdefen = su * de.Count();//得分小计
                            output.Add("Fdefen", Fdefen);//得分小计
                        }
                        else if (item.FirstOrDefault().Target_value < item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "行政后勤部")
                        {
                            double dt = su + (item.FirstOrDefault().Actual_completion_value - item.FirstOrDefault().Target_value);//单项得分
                            output.Add("Gdanx", dt);//单项得分
                            double Gdefen = dt * de.Count();//得分小计
                            output.Add("Gdefen", Gdefen);  //得分小计                                    
                        }
                        else if (item.FirstOrDefault().Target_value > item.FirstOrDefault().Actual_completion_value && item.FirstOrDefault().DepartmentData == "行政后勤部")
                        {
                            double sde = su - (item.FirstOrDefault().Target_value - item.FirstOrDefault().Actual_completion_value);//单项得分
                            output.Add("Hdanx", sde);//单项得分
                            double Hdefen = sde * de.Count();//得分小计
                            output.Add("Hdefen", Hdefen); //得分小计 
                        }
                        merge.Add(output);
                        output = new JObject();
                    }
                    output1.Add("merge", merge);
                    merge = new JArray();
                    userItem.Add(output1);
                    output1 = new JObject();
                }                                  
            }
            return Content(JsonConvert.SerializeObject(userItem));
        }

        #endregion


        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            if (personnel_Quality_objectives == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Quality_objectives);
        }

        #region---添加数据
        public ActionResult Create()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Leave", act = "Index" });
            }
            return View();
        }

        [HttpPost]

        public ActionResult Create(Personnel_Quality_objectives personnel_Quality_objectives)
        {
            if (personnel_Quality_objectives != null)
            {
                if (db.Personnel_Quality_objectives.Count(c => c.DepartmentData == personnel_Quality_objectives.DepartmentData && c.DP_Group == personnel_Quality_objectives.DP_Group && c.Project == personnel_Quality_objectives.Project && c.Year == personnel_Quality_objectives.Year && c.Month == personnel_Quality_objectives.Month) > 0)
                {
                    return Content("已有重复数据，请重新输入数据！");
                }
                personnel_Quality_objectives.CreateDate = DateTime.Now;
                personnel_Quality_objectives.Creator = ((Users)Session["user"]).UserName;
                db.Personnel_Quality_objectives.Add(personnel_Quality_objectives);
                db.SaveChanges();
                return Content("true");
            }
            return Content("新增出错，请确认数据是否规范！");
        }
        #endregion

        #region----批量添加数据
        public ActionResult Batch_InputStaff()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Quality_objectives", act = "Batch_InputStaff" });
            }
            return View();
        }

        [HttpPost]
        public ActionResult Batch_InputStaff(List<Personnel_Quality_objectives> inputList)
        {
            string repeat = null;
            foreach (var item in inputList)
            {
                if (db.Personnel_Quality_objectives.Count(c => c.DepartmentData == item.DepartmentData && c.AssetDepartment == item.AssetDepartment && c.DP_Group == c.DP_Group && c.Project == item.Project && c.IndexName == item.IndexName) != 0)
                    repeat = repeat + item.AssetDepartment + item.DP_Group + item.Project + item.IndexName + item.DepartmentData + ",";
            }
            if (!string.IsNullOrEmpty(repeat))
            {
                return Content(repeat + "已经有相同的数据，请重新输入");
            }
            if (ModelState.IsValid)
            {
                db.Personnel_Quality_objectives.AddRange(inputList);
                db.SaveChangesAsync();
                return Content("true");
            }
            return Content("false");
        }
        #endregion

        #region-----修改方法
        public ActionResult Edit(Personnel_Quality_objectives personnel_Quality_objectives)
        {
            if (personnel_Quality_objectives != null)
            {
                personnel_Quality_objectives.ModifyTime = DateTime.Now;
                personnel_Quality_objectives.ModifyName = ((Users)Session["User"]).UserName;
                db.Entry(personnel_Quality_objectives).State = EntityState.Modified;
                db.SaveChangesAsync();
                return Content("true");
            }
            return Content("修改出错，请确认数据是否正确");
        }
        #endregion

        #region---删除方法
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            if (personnel_Quality_objectives == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Quality_objectives);
        }

        // POST: Personnel_Quality_objectives/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            db.Personnel_Quality_objectives.Remove(personnel_Quality_objectives);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
