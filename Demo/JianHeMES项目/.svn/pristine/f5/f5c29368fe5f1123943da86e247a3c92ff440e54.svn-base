@{
    ViewBag.Title = "外箱库位号修改";
}
@*<script src="~/Scripts/vue.js"></script>*@
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<link href="~/Content/styleFile/packaging/stockStyle.css?v="+Math.random() rel="stylesheet" />
<script src="~/Scripts/axios.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>

<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            <div v-show="screenSize>=768">
                <h2 class="text-center">@ViewBag.Title</h2>
                <a href="/Packagings/board"><el-button size="small">产值看板</el-button></a>
                @*<a href="/Packagings/inputPackaging"><el-button size="small">录入包装箱基本信息</el-button></a>
                    <a href="/Packagings/insidePrint"><el-button size="small">内箱标签打印</el-button></a>
                    <a href="/Packagings/insideConfirm"><el-button size="small">内箱装箱确认</el-button></a>
                    <a href="/Packagings/outsideBinningPrint"><el-button size="small">外箱(重新)装箱和标签打印</el-button></a>
                    <a href="/Packagings/outsideConfirm"><el-button size="small">外箱装箱确认</el-button></a>*@
                <a href="/Packagings/inStockConfirm"><el-button size="small">外箱入库确认</el-button></a>
                @*<a href="/Packagings/PingZhioutStockConfirm"><el-button size="small">品质外箱入库确认</el-button></a>*@
                <a href="/Packagings/stockNumEdit"><el-button size="small" type="primary" plain disabled style="cursor:default">外箱库位号修改</el-button></a>
                <a href="/Packagings/outStockConfirm"><el-button size="small">外箱出库确认</el-button></a>
            </div>
            <div v-show="screenSize<768">
                <h3>@ViewBag.Title</h3>
                <el-dropdown placement="bottom">
                    <el-button size="medium ">
                        更多菜单<i class="el-icon-arrow-down el-icon--right"></i>
                    </el-button>
                    <el-dropdown-menu slot="dropdown">
                        <a href="/Packagings/board"><el-dropdown-item>产值看板</el-dropdown-item></a>
                        @*<a href="/Packagings/inputPackaging"><el-dropdown-item>录入包装箱基本信息</el-dropdown-item></a>
                            <a href="/Packagings/insidePrint"><el-dropdown-item>内箱标签打印</el-dropdown-item></a>
                            <a href="/Packagings/insideConfirm"><el-dropdown-item>内箱装箱确认</el-dropdown-item></a>
                            <a href="/Packagings/outsideBinningPrint"><el-dropdown-item>外箱(重新)装箱和标签打印</el-dropdown-item></a>
                            <a href="/Packagings/outsideConfirm"><el-dropdown-item>外箱装箱确认</el-dropdown-item></a>*@
                        <a href="/Packagings/inStockConfirm"><el-dropdown-item>外箱入库确认</el-dropdown-item></a>
                        @*<a href="/Packagings/PingZhioutStockConfirm"><el-dropdown-item>品质外箱入库确认</el-dropdown-item></a>*@
                        <div href="/Packagings/stockNumEdit"><el-dropdown-item disabled>外箱库位号修改</el-dropdown-item></div>
                        <a href="/Packagings/outStockConfirm"><el-dropdown-item>外箱出库确认</el-dropdown-item></a>
                    </el-dropdown-menu>
                </el-dropdown>
            </div>
        </el-header>
        <el-main v-loading="loading">
            <el-row>
                <div class="inputframe">
                    <span>订单号：</span>
                    <el-select v-model="selectVal" v-bind:disabled="barcodeList.length>0" placeholder="输入内容可查询" filterable clearable size="medium">
                        <el-option v-for="item in selectOptions"
                                   :key="item.value"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                </div>
                <div class="inputframe">
                    <span>条码号：</span>
                    <el-input placeholder="请输入条码号"
                              v-model.trim="barcode"
                              style="text-align:right;display:inline-block;"
                              v-on:keyup.enter.native="barScan($event)"
                              size="medium"
                              clearable>
                    </el-input>
                </div>
                <div class="divframe" style="height:auto;min-height:0;max-height:100px;border:0;text-align:right;">
                    <div v-for="(item,index) in barcodeList" class="listbarcode">
                        {{item}}
                        <el-button @@click.native.prevent="deleteRow(index)"
                                   type="text"
                                   size="mini"
                                   style="margin:0;padding:0;">
                            <i class="el-icon-error"></i>
                        </el-button>
                    </div>
                    <div>
                        <el-button v-on:click="clearList" size="mini" round>重置搜索清单</el-button>
                        <el-button v-on:click="barGetListData" size="mini" round>查找库存</el-button>
                    </div>
                </div>
                <div class="inputframe">
                    <span style="font-size:13px">新库位号:</span>
                    <el-input placeholder="请输入新库位号"
                              v-model.trim="storageNum"
                              style="text-align:right;display:inline-block;"
                              size="medium"
                              clearable>
                    </el-input>
                </div>
                <div class="inputframe" style="position:relative;">
                    <p>完成件数：{{completeInfo.completeNum}}</p>
                    <p>未完成件数：{{completeInfo.uncompleteNum}}</p>
                    <p>完成率：{{completeInfo.complete}}</p>
                    <el-button size="medium" @@click="confirmCheck" style="position:absolute;left:60px;top:5px;">修改库位号</el-button>
                </div>
            </el-row>
            <el-row style="text-align:center;margin-top:5px;">
                <div class="lineblock" v-for="item in boxList">
                    <div class="inputframe" style="text-align:left;padding-left:14px">
                        <el-checkbox v-model="item.status" border size="mini">外箱标签</el-checkbox>
                        <span style="font-size:13px" v-show="item.status==true&&storageNum!=''">(新库位号:{{storageNum}})</span>
                    </div>
                    <div class="divframe">
                        <div class="outsidebar">{{item.outherNum}}</div>
                        <div class="outsidebox">
                            <span v-for="n in item.module" class="boxspan">{{n}}</span>
                        </div>
                    </div>
                    <div class="inputframe numcount">
                        <span style="left:13px;">库位号:{{item.warehounum}}</span>
                        <span style="right:13px;">数量:{{item.module.length}}</span>
                    </div>
                </div>
            </el-row>
        </el-main>
    </el-container>
</div>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            selectOptions: [],
            selectVal: '',
            screenSize: document.body.clientWidth,
            loading: false,
            completeInfo: {},
            boxList: [],
            storageNum: "",
            barcode: "",
            barcodeList:[]
        },
        //computed: {
        //    filterList: function () {
        //        let thisList = this.boxList, bar = this.barcode.toUpperCase(), returnList = [];
        //        //console.log(JSON.parse(JSON.stringify(thisList)));
        //        for (let i in thisList) {
        //            if (thisList[i].outherNum.indexOf(bar) >= 0) {
        //                returnList.push(thisList[i]);
        //            };
        //        };
        //        return returnList;
        //    }
        //},
        created: function () {
            axios.post('/Packagings/GetOrderList').then(rer => {
                this.selectOptions = rer.data;
            }).catch(err => {
                console.warn("获取选择列表失败")
            });
            window.onresize = function () {
                app.screenSize = document.body.clientWidth;
            };
        },
        mounted: function () {
            let localOrder = localStorage.getItem('Order');
            if (localOrder != null) {
                this.selectVal = localOrder;
            };
        },
        methods: {
            //确认按钮
            confirmCheck: function () {
                if (this.selectVal == "") {
                    this.$notify({
                        title: '警告',
                        message: '请选择订单号！',
                        type: 'warning'
                    });
                    return;
                };
                if (Object.keys(this.boxList).length == 0) {
                    this.$notify({
                        title: '警告',
                        message: '此订单没有可修改库位号的外箱标签！',
                        type: 'warning'
                    });
                    return;
                };
                //if (this.storageNum == "") {
                //    this.$notify({
                //        title: '警告',
                //        message: '新库位号不能为空！',
                //        type: 'warning'
                //    });
                //    return;
                //};
                let postdata = this.boxList, checkData = [], oknum = 0;
                for (let i in postdata) {
                    if (postdata[i].status == true) {
                        checkData.push(postdata[i].outherNum);
                        oknum++;
                    };
                };
                if (oknum == 0) {
                    this.$notify({
                        title: '警告',
                        message: '没有选择外箱标签！',
                    });
                    return;
                };
                axios.post('/Packagings/StockNumEdit', {
                    ordernum: this.selectVal,
                    warehouNum: this.storageNum,
                    outherboxbarcode: checkData,
                }).then(res => {
                    //console.log(res.data);
                    this.$alert("修改库位号成功", {
                        confirmButtonText: '确定',
                        closeOnClickModal: true,
                        closeOnPressEscape: true,
                        dangerouslyUseHTMLString: true,
                        type: "success",
                    });
                    this.barcode = "";
                    this.getListData();
                }).catch(err => {
                    console.warn("获取信息失败")
                });
            },
            //获取待确认清单
            getListData: function () {
                this.boxList = [];
                this.storageNum = "";
                if (this.selectVal != "") {
                    this.loading = true;
                    axios.post('/Packagings/DisplayWarehouseEdit', { ordernum: this.selectVal }).then(res => {
                        //console.log(res.data);
                        this.boxList = res.data;
                        this.loading = false;
                    }).catch(err => {
                        console.warn("获取选择列表失败")
                        this.loading = false;
                    });
                };
            },
            barScan: function (event) {
                let v = event.target.value, listData = this.barcodeList;
                if (v == "") {
                    return;
                };
                //检查重复
                for (let i in listData) {
                    if (listData[i] == v) {
                        this.$message({
                            showClose: true,
                            message: '已有重复条码！',
                            type: 'warning'
                        });
                        return;
                    };
                };
                //检查长度
                if (listData.length > 0) {
                    if (listData[0].length != v.length) {
                        this.$message({
                            showClose: true,
                            message: '此条码类型与已输入的条码类型不一致！',
                            type: 'warning'
                        });
                        return;
                    };
                };
                listData.push(v);
                this.barcode = "";
            },
            //条码获取待确认清单
            barGetListData: function () {
                let listData = this.barcodeList;
                if (listData.length > 0) {
                    this.boxList = [];
                    this.storageNum = "";
                    this.loading = true;
                    axios.post('/Packagings/DisplayWarehouseEditFromBarcode', { barcodeList: listData }).then(res => {
                        console.log(res.data);
                        this.boxList = res.data;
                        this.loading = false;
                    }).catch(err => {
                        console.warn("获取选择列表失败")
                        this.loading = false;
                    });
                } else {
                    this.$message({
                        showClose: true,
                        message: '没有需要查找的条码清单',
                    });
                };
            },
            //删除行
            deleteRow: function (i) {
                this.barcodeList.splice(i, 1);
            },
            clearList: function () {
                this.barcodeList = [];
            },
            //获取完成信息
            getcompleteInfo: function () {
                if (this.selectVal != "") {
                    axios.post('/Packagings/GetcompleteInfo', {
                        ordernum: this.selectVal
                    }).then(res => {
                        //console.log(res.data);
                        this.completeInfo = {
                            completeNum: res.data.completeNum,
                            uncompleteNum: res.data.uncompleteNum,
                            complete: res.data.complete,
                        };
                    }).catch(err => {
                        console.warn("获取信息失败")
                    });
                };
            },
        },
        watch: {
            //订单号
            selectVal: function (v) {
                localStorage.setItem('Order', v);
                this.getcompleteInfo();
                this.getListData();
            },
            barcodeList: function (v) {
                if (v.length == 0) {
                    this.getListData();
                };
            }
        },
    });
</script>