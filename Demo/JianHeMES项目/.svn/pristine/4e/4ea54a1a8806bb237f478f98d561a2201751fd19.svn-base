@{
    ViewBag.Title = "工段工序参数录入";
}
@* css放置处 *@
@section cssStyle {
    <style>
        #app {
            padding: 15px 20px;
            width: 1359px;
        }

        .ptitle {
            font-size: 22px;
        }

        .eltable {
            margin: 15px 0;
        }

        .addbtn {
            width: 100%;
            color: #677385;
            background-color: rgba(239, 242, 247, 1);
        }

            .addbtn.is-plain:hover {
                background: rgba(236, 245, 255, 1);
                border-color: rgba(64, 158, 255, 1);
                color: #409EFF;
            }

        .el-input__inner {
            text-align: center;
            height: 35px !important;
        }

        .cbtn {
            text-decoration: underline;
            padding: 6px;
            margin: 0 !important;
        }

            .cbtn.info {
                color: #555;
            }

        .el-table th {
            padding: 12px 0;
        }

        .el-table--border .zero-padding td, .el-table--border .zero-padding td:first-child {
            padding: 5px;
        }

        .zero-padding .el-input__inner {
            border-color: #2bcfaa;
        }

        .el-date-editor.el-input, .el-date-editor.el-input__inner {
            width: 100%;
        }
    </style>
}
<el-row id="app" v-cloak>
    <p class="ptitle">@ViewBag.Title</p>
    <el-table :data="tableList"
              class="eltable"
              max-height="600"
              row-class-name="zero-padding"
              ref="filterTable"
              size="small"
              @*stripe*@
              border>
        <el-table-column prop="Department"
                         label="部门"
                         :filters="filterObj.Department"
                         :filter-method="filterHandler"
                         sortable
                         width="100">
            <template slot-scope="scope">
                <input-edit datatype="string"
                            v-on:input="scope.row.Department = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                            :nametext="scope.row.Department"
                            :isedit="scope.row.edit"></input-edit>
            </template>
        </el-table-column>
        <el-table-column prop="Group"
                         label="班组"
                         :filters="filterObj.Group"
                         :filter-method="filterHandler"
                         sortable
                         width="100">
            <template slot-scope="scope">
                <input-edit datatype="string"
                            v-on:input="scope.row.Group = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                            :nametext="scope.row.Group"
                            :isedit="scope.row.edit"></input-edit>
            </template>
        </el-table-column>
        <el-table-column prop="Section"
                         label="工段"
                         sortable
                         width="100">
            <template slot-scope="scope">
                <input-edit datatype="string"
                            v-on:input="scope.row.Section = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                            :nametext="scope.row.Section"
                            :isedit="scope.row.edit"></input-edit>
            </template>
        </el-table-column>
        <el-table-column prop="Process"
                         label="工序"
                         sortable
                         width="100">
            <template slot-scope="scope">
                <input-edit datatype="string"
                            v-on:input="scope.row.Process = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                            :nametext="scope.row.Process"
                            :isedit="scope.row.edit"></input-edit>
            </template>
        </el-table-column>
        <el-table-column label="效率">
            <el-table-column prop="XTable"
                             label="表名"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.XTable = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.XTable"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.XTable}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="XDerparment"
                             label="部门"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.XDerparment = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.XDerparment"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.XDerparment}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="XFinsh"
                             label="完成"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.XFinsh = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.XFinsh"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.XFinsh}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="XFinshTime"
                             label="完成时间"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.XFinshTime = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.XFinshTime"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.XFinshTime}}</div>
                </template>
            </el-table-column>
        </el-table-column>
        <el-table-column label="品质">
            <el-table-column prop="PTable"
                             label="表名"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.PTable = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.PTable"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.PTable}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="PDerparment"
                             label="部门"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.PDerparment = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.PDerparment"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.PDerparment}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="PFinsh"
                             label="完成"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.PFinsh = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.PFinsh"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.PFinsh}}</div>
                </template>
            </el-table-column>
            <el-table-column prop="PFinshTime"
                             label="完成时间"
                             width="100">
                <template slot-scope="scope">
                    <input-edit v-if="isAdmin"
                                datatype="string"
                                v-on:input="scope.row.PFinshTime = $event.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, '')"
                                :nametext="scope.row.PFinshTime"
                                :isedit="scope.row.edit"></input-edit>
                    <div v-else>{{scope.row.PFinshTime}}</div>
                </template>
            </el-table-column>
        </el-table-column>
        <el-table-column label="操作"
                         width="100">
            <template slot-scope="scope">
                <div v-if="scope.row.edit">
                    <el-button @@click="saveClick(scope.row)" class="cbtn green" type="text">保存</el-button>
                    <el-button @@click="cancelClick(scope.row)" class="cbtn info" type="text">取消</el-button>
                </div>
                <div v-else>
                    <el-button @@click="editClick(scope.row)" class="cbtn blue" type="text">编辑</el-button>
                    <el-button @@click="deleteClick(scope.row,scope.$index)" class="cbtn red" type="text">删除</el-button>
                </div>
            </template>
        </el-table-column>
    </el-table>
    <el-button @@click="addrow" class="addbtn" plain>增加一行</el-button>
</el-row>
@* 分部页放置处 *@
@section renderPage {
    @RenderPage("~/Views/Warehouse_Material/_wareEdit.cshtml")
}
@* js放置处 *@
@section jsScript {
    <script src="~/Scripts/filterMethod/tableFilter.js"></script>
    <script>
        const app = {
            data: function () {
                return {
                    initialData: {},
                    tableList: [],
                    filterObj: {
                        //具体的变量列表
                        Department: [],
                        Group: [],
                    }
                }
            },
            mixins: [tableFilterMixin],
            created: function () {
                this.DisplayPlanSectionParameter();
            },
            methods: {
                DisplayPlanSectionParameter() {
                    this.mainLoading = true;
                    axios.post("/Plans/DisplayPlanSectionParameter").then(res => {
                        res.data.map(o => { o.edit = false });
                        this.tableList = res.data;
                        this.mainLoading = false;
                    }).catch(err => {
                        console.warn(err);
                        this.mainLoading = false;
                    });
                },
                //检查编辑状态
                checkEditStatus() {
                    for (let i of this.tableList) {
                        if (i.edit) {
                            return true;
                        };
                    };
                    return false;
                },
                //启动编辑
                editClick(row) {
                    if (this.checkEditStatus()) {
                        this.$message.warning('存在正在编辑的行');
                        return
                    };
                    this.initialData = {};
                    this.initialData = { ...row };
                    row.edit = true;
                },
                //取消编辑
                cancelClick(row) {
                    if (row.Xid === 0 && row.Pid === 0) {
                        this.tableList.pop();
                    } else {
                        let item = row, ini = this.initialData;
                        for (let i in ini) {
                            item[i] = ini[i];
                        };
                        this.initialData = {};
                    };
                },
                //保存编辑
                saveClick(row) {
                    if (!row.Section || !row.Process) {
                        this.$message.warning('工段工序不能为空');
                        return;
                    };
                    if (row.Xid === 0 && row.Pid === 0) {
                        this.addPost(row);
                    } else {
                        this.editPost(row);
                    };
                },
                //删除
                deleteClick(row, index) {
                    this.$confirm(`工段‘${row.Section}’，工序‘${row.Process}’`, '确认删除', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'error',
                        center: true,
                    }).then(() => {
                        axios.post('/Plans/DeletePlanSectionParameter', {
                            xid: row.Xid,
                            pid: row.Pid,
                        }).then(res => {
                            if (res.data == '删除成功') {
                                this.$message.success('删除成功');
                                this.tableList.splice(index, 1);
                            } else {
                                this.$message.error(res.data);
                            };
                        }).catch(err => {
                            this.$message.error('保存出错');
                            console.warn("post失败")
                        });
                    }).catch(() => {
                    });
                },
                //增加行
                addrow() {
                    if (this.checkEditStatus()) {
                        this.$message.warning('请先保存编辑数据');
                        return
                    };
                    let newrow = {
                        Xid: 0,
                        Pid: 0,
                        Department: '',
                        Group: '',
                        Section: '',
                        Process: '',
                        XTable: '',
                        XDerparment: '',
                        XFinsh: '',
                        XFinshTime: '',
                        PTable: '',
                        PDerparment: '',
                        PFinsh: '',
                        PFinshTime: '',
                        edit: false
                    };
                    this.initialData = {};
                    this.initialData = { ...newrow };
                    newrow.edit = true;
                    this.tableList.push(newrow);
                    this.$nextTick(() => {
                        let tableScrollDiv = document.getElementsByClassName('el-table__body-wrapper')[0];
                        tableScrollDiv.scrollTop = tableScrollDiv.scrollTopMax;
                    });
                },
                //新增post
                addPost(row) {
                    axios.post('/Plans/AddPlanSectionParameter', {
                        Department: row.Department,
                        Group: row.Group,
                        seaction: row.Section,
                        process: row.Process,
                        XTable: row.XTable,
                        XDerparment: row.XDerparment,
                        XFinsh: row.XFinsh,
                        XFinshTime: row.XFinshTime,
                        PTable: row.PTable,
                        PDerparment: row.PDerparment,
                        PFinsh: row.PFinsh,
                        PFinshTime: row.PFinshTime,
                    }).then(res => {
                        if (res.data.Xid != null || res.data.Pid != null) {
                            this.$message.success(res.data.mes);
                            row.Xid = res.data.Xid;
                            row.Pid = res.data.Pid;
                            row.Department = res.data.Department;
                            row.Group = res.data.Group;
                            row.Section = res.data.Section;
                            row.Process = res.data.Process;
                            row.XTable = res.data.XTable;
                            row.XDerparment = res.data.XDerparment;
                            row.XFinsh = res.data.XFinsh;
                            row.XFinshTime = res.data.XFinshTime;
                            row.PTable = res.data.PTable;
                            row.PDerparment = res.data.PDerparment;
                            row.PFinsh = res.data.PFinsh;
                            row.PFinshTime = res.data.PFinshTime;
                            row.edit = false;
                            this.initialData = {};
                        } else {
                            this.$message.error(res.data.mes);
                        };
                    }).catch(err => {
                        this.$message.error('保存出错');
                        console.warn("post失败")
                    });
                },
                //编辑post
                editPost(row) {
                    axios.post('/Plans/UpdatePlanSectionParameter', {
                        xid: row.Xid,
                        pid: row.Pid,
                        newDepartment: row.Department,
                        newGroup: row.Group,
                        newSection: row.Section,
                        newProcess: row.Process,
                        XTable: row.XTable,
                        XDerparment: row.XDerparment,
                        XFinsh: row.XFinsh,
                        XFinshTime: row.XFinshTime,
                        PTable: row.PTable,
                        PDerparment: row.PDerparment,
                        PFinsh: row.PFinsh,
                        PFinshTime: row.PFinshTime,
                    }).then(res => {
                        if (res.data == '修改成功') {
                            this.$message.success('修改成功');
                            row.edit = false;
                            this.initialData = {};
                        } else {
                            this.$message.error(res.data);
                        };
                    }).catch(err => {
                        this.$message.error('保存出错');
                        console.warn("post失败")
                    });
                },
            },
            watch: {
                //监听表的数据
                tableList(v) {
                    try {
                        if (v != '') {
                            let rtArr = this.filterMethod(v);
                            this.$refs.filterTable.clearFilter();
                            for (let i in this.filterObj) {
                                this.$set(this.filterObj, i, rtArr[i]);
                            };
                        };
                    } catch (err) {
                        console.log('筛选错误')
                    }
                }
            }
        };
    </script>
}

