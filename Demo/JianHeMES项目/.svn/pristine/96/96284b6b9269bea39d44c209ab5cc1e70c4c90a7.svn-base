@{
    ViewBag.Title = "手机端部门班组扣分录入";
}
@* css放置处 *@
@section cssStyle {
    <link href="~/Content/vxe.css" rel="stylesheet" />
    <style>
        #app {
            padding: 10px 10px 0 10px;
            font-family: '微软雅黑';
        }

        .title {
            font-weight: 400;
            font-size: 18px;
        }

        .form-box {
            width: 100%;
            padding: 10px 0 0 0;
        }

        .form_button_box {
            width: 100%;
            padding: 10px 0 0 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .el-form-item {
            margin-bottom: 4px;
        }

        .check-person {
            display: inline-flex;
            align-items: flex-start;
            flex-direction: column;
        }
        /*        卡片*/
        .el-card {
            margin-bottom: 8px;
        }

        .el-card__header, .el-card__body {
            padding: 8px 20px;
            font-size: 12px;
        }

            .el-card__header span {
                font-size: 14px;
                margin-right: 10px;
            }

        .points {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .img-list {
            display: flex;
            align-items: flex-start;
        }

        .el-message-box {
            width: 250px;
        }
        /*    表单*/
        .check-list {
            display: flex;
            align-items: center;
        }

        .el-checkbox, .el-checkbox__input {
            padding: 4px 0 0 0;
            display: flex;
            align-items: flex-start;
            white-space: normal;
            word-break: break-all;
        }

        .icon-margin {
            margin-right: 2px;
        }

        .item-box {
            padding-bottom: 8px;
            display: flex;
            align-items: center;
        }

        .img-upload {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
        }

        .el-image-viewer__close {
            color: #fff;
        }

        .option-box {
            width: 100%;
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
            align-items: flex-start;
        }

        .row-pointsDeducted {
            color: red;
            font-size: 16px;
        }

        .el-upload--picture-card {
            width: 80px;
            height: 80px;
            line-height: 80px;
        }

        .el-upload-list--picture-card .el-upload-list__item {
            width: 80px;
            height: 80px;
        }

        .el-dialog__body {
            padding: 0 20px;
        }

        .icon-style {
            font-size: 18px;
            padding: 3px;
        }

        /*        弹出确认信息*/
        .comfirm-form {
            display: flex;
            align-items: center;
            padding: 10px 0;
        }

            .comfirm-form .comfirm-form-item {
                color: navy;
                font-size: 16px;
                margin-right: 16px;
            }

        .comfirm-form-item span {
            color: #8a8a8a;
        }

        .pointsDeducted_item {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
    </style>
}

<div id="app">
    <div class="title">
        部门班组扣分录入
    </div>

    @*表单*@
    <div class="form-box">
        <el-form :inline="true" :model="formInfo" label-position="right" label-width="100px">
            <el-form-item label="检查类型：">
                <el-select size="small" v-model="formInfo.Check_Type"
                           placeholder="请选择..">
                    <el-option label="日检" value="日检"></el-option>
                    <el-option label="周检" value="周检"></el-option>
                    <el-option label="巡检" value="巡检"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="检查时间：">
                <el-date-picker size="small" type="date" value-format='yyyy-MM-dd' placeholder="请选择.." v-model="formInfo.Date"></el-date-picker>
            </el-form-item>
            <el-form-item label="部门：">
                <el-select size="small" v-model="formInfo.Department" placeholder="请选择部门">
                    <el-option v-for="item in department_options"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="位置：">
                <el-select size="small" v-model="formInfo.Position" placeholder="请选择位置">
                    <el-option v-for="item in position_options"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="区域号：">
                <el-select size="small" v-model="formInfo.District" placeholder="请选择区域号">
                    <el-option v-for="item in district_options"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            @*<el-form-item label="责任人：">
                    <el-input size="small" v-model="formInfo.ResponsiblePerson" placeholder="请输入" style="width:150px;"></el-input>
                </el-form-item>*@
            <el-form-item label="检查人：">
                <div class="check-person">
                    <el-input v-for="(item,index) in check_person_list" :key="item.id" size="small" v-model="item.name" placeholder="请输入" style="width:120px;">
                        <i slot="suffix" class="el-input__icon el-icon-delete" @@click="deleteCheckPerson(item.id)"></i>
                    </el-input>
                </div>
                <el-button size="small" type="primary" @@click="addCheckPerson">添加检查人</el-button>
            </el-form-item>
            <el-form-item label="7S扣分项：">
                <el-button size="small" type="primary" icon="el-icon-plus" plain @@click="onAddPointsType">添加</el-button>
            </el-form-item>
            @*7S扣分项*@
            <div v-if="recordList.length!=0">
                <el-card class="box-card" v-for="(item,index) in recordList" :key="index">
                    <div slot="header" class="clearfix">
                        <span>{{item.PointsDeducted_Type}}</span>
                        <span>-{{item.PointsDeducted}}分</span>
                        <el-button size="small" style="float: right; padding: 3px 0;color:red;" type="text" @@click="onDeletePointsType(index)">删除</el-button>
                    </div>
                    <div>限期整改时间：{{formatTime(item.RectificationTime)}}</div>
                    <div v-if="item.ProblemDescription!=''">问题描述：{{item.ProblemDescription}}</div>
                    <div class="img-list">
                        <div style="width:50px;">扣分项：</div>
                        <div class="points">
                            <div v-for="(points,index) in item.PointsDeducted_Item" :key="index">{{index+1}}.{{points}}</div>
                        </div>
                    </div>
                    <div class="img-list">
                        <div style="width:50px;">改善前：</div>
                        <div style="flex:1;">
                            <el-image v-for="(url,index) in item.BeforeImprovement"
                                      :key="index" style="width:50px;height:50px;margin:2px;"
                                      fit="cover"
                                      :preview-src-list="item.BeforeImprovement"
                                      :src="url">
                            </el-image>
                        </div>
                    </div>
                    <div class="img-list" v-if="item.AfterImprovement.length!=0">
                        <div style="width:50px;">改善后：</div>
                        <div style="flex:1;">
                            <el-image v-for="(url,index) in item.AfterImprovement"
                                      :key="index" style="width:50px;height:50px;margin:2px;"
                                      fit="cover"
                                      :preview-src-list="item.AfterImprovement"
                                      :src="url">
                            </el-image>
                        </div>
                    </div>
                </el-card>
            </div>
            @*底部*@
            <div class="form_button_box">
                <el-button size="small" type="primary" @@click="onSubmit">提交信息</el-button>
                <el-button size="small" @@click="onReset">清空</el-button>
            </div>
        </el-form>

        <!--弹出扣分类型-->
        <el-dialog title="添加7S扣分项" v-bind:visible.sync="dialogPoint" width="90%" v-bind:close-on-click-modal="false" v-bind:destroy-on-close="true">
            <el-form :inline="true" :model="record" label-position="left">
                <div class="item-box">
                    <span><i class="el-icon-star-on icon-margin"></i>扣分类型：</span>
                    <el-select size="small" v-model="record.PointsDeducted_Type" placeholder="请选择.." style="width:90px" @@change="onChangeType">
                        <el-option v-for="item in points_type_options"
                                   :key="item.value"
                                   :label="item.label"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                    <span>（-{{getGarde(record.PointsDeducted_Type)}}分/个）</span>
                </div>
                <div class="item-box">
                    <span><i class="el-icon-star-on icon-margin"></i>扣分参考标准：</span>
                </div>
                <el-checkbox-group v-model="record.PointsDeducted_Item" @@change="onSelectItem">
                    <div class="check-list" v-for="item in reference_standard_options">
                        <el-checkbox :label="item.value" :key="item.value" @@change="onShowCount(item.value)">{{item.value}}<span style="margin-left:2px;">{{item.count<2?'':'x'+item.count}}</span></el-checkbox>
                        <span v-show="item.count>0" @@click.stop="onAddItem(item.value)"><i class="el-icon-circle-plus-outline icon-style"></i></span>
                    </div>
                </el-checkbox-group>
                <div class="item-box" v-if="formInfo.Check_Type!='日检'">
                    <span><i class="el-icon-star-on icon-margin"></i>扣分：</span>
                    <span v-if="record.PointsDeducted!=''" style="color:red;">-{{record.PointsDeducted}}</span>
                    @*<el-input size="small" disabled class-name="row-pointsDeducted" v-model="record.PointsDeducted" style="width:120px"></el-input>*@
                </div>
                <div class="item-box">
                    <span><i class="el-icon-star-on icon-margin"></i>问题描述：</span>
                    <el-input type="textarea"
                              autosize
                              placeholder="请输入..."
                              v-model="record.ProblemDescription" style="width:200px">
                    </el-input>
                </div>
                <div class="item-box">
                    <span><i class="el-icon-star-on icon-margin"></i>改善前图片：</span>
                    <el-button size="mini" type="primary" v-on:click="addImg('改善前')">添加照片</el-button>
                </div>
                <div class="img-upload">
                    <div class="el-upload-list__item-thumbnail">
                        <el-image v-for="(url,index) in record.BeforeImprovement"
                                  :key="index" style="width:70px;height:70px;margin:2px"
                                  fit="cover"
                                  :preview-src-list="record.BeforeImprovement"
                                  :src="url">
                        </el-image>

                    </div>
                </div>
                <div class="item-box" v-if="formInfo.Check_Type=='日检'">
                    <span><i class="el-icon-star-on icon-margin"></i>改善后图片：</span>
                    <el-button size="mini" type="primary" v-on:click="addImg('改善后')">添加照片</el-button>
                </div>
                <div class="img-upload" v-if="formInfo.Check_Type=='日检'">
                    <div class="el-upload-list__item-thumbnail">
                        <el-image v-for="(url,index) in record.AfterImprovement"
                                  :key="index" style="width:70px;height:70px;margin:2px"
                                  fit="cover"
                                  :preview-src-list="record.AfterImprovement"
                                  :src="url">
                        </el-image>
                    </div>
                </div>
                <div class="item-box" v-if="formInfo.Check_Type!='日检'">
                    <span><i class="el-icon-star-on icon-margin"></i>限期整改时间：</span>
                    <el-date-picker size="small" v-model="record.RectificationTime"
                                    type="date"
                                    style="width:130px;"
                                    placeholder="请选择..">
                    </el-date-picker>
                </div>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button size="small" @@click="onCancelPoints">取 消</el-button>
                <el-button size="small" type="primary" @@click="onAddPoints">添加</el-button>
            </span>
        </el-dialog>

        <!--上传照片-->
        <el-dialog v-bind:visible.sync="dialogVisible" width="80%">
            <el-upload action="/KPI/ImageUpload"
                       list-type="picture-card"
                       multiple
                       :file-list="fileList"
                       :auto-upload="false"
                       :on-change="selectFile"
                       :on-preview="handlePictureCardPreview"
                       :on-remove="handleRemove">
                <i class="el-icon-plus"></i>
            </el-upload>
            <span slot="footer" class="dialog-footer">
                <el-button size="small" @@click="onCancel">取 消</el-button>
                <el-button size="small" type="primary" @@click="uploadFile">上传图片</el-button>
            </span>
        </el-dialog>
        <el-dialog :visible.sync="showVisible" width="80%">
            <img width="100%" :src="dialogImageUrl" alt="">
        </el-dialog>
        @*重复提示*@
        <el-dialog :visible.sync="dialogRepeat"
                   width="80%">
            <span>{{formInfo.Department}}该区域{{formInfo.District}}，在{{formatTime(formInfo.Date)}}这一日期，已存在<span style="color:red">{{tip}}</span>等记录重复，是否还要继续上传？</span>
            <span slot="footer" class="dialog-footer">
                <el-button size="small" @@click="onCancelConfirm">取 消</el-button>
                <el-button size="small" type="primary" @@click="onConfirm">继续上传</el-button>
            </span>
        </el-dialog>
    </div>

</div>
@* 分部页放置处 *@
@section renderPage {
}
@* js放置处 *@
@section jsScript {
    <script src="https://cdn.jsdelivr.net/npm/xe-utils"></script>
    <script>
        const app = {
            data: function () {
                return {
                    //检查人动态添加、删除
                    index: 1,
                    check_person_list: [
                        { id: 0, name: '' }
                    ],
                    //下拉选项
                    department_options: [],
                    district_options: [],
                    position_options: [],
                    points_type_options: [],
                    reference_standard_options: [],
                    //上传图片
                    dialogImageUrl: '',
                    showVisible: false,
                    dialogVisible: false, //控制图片上传弹框
                    fileList: [],
                    files: [],           //存储选中的照片
                    filename: [],
                    uploadType: '',     //图片位置（改善前、改善后）
                    uploadRow: '',      //选中图片所在行
                    uploadIndex: '',     //选中行
                    //弹出扣分类型
                    dialogPoint: false,
                    //提示重复
                    dialogRepeat: false,
                    tip: '',
                    //提交筛选
                    formInfo: {
                        Check_Type: '',  //检查类型
                        Date: '',   //检查日期
                        Department: '',      //部门
                        Position: '',   // 位置
                        District: '',     //区域
                        //ResponsiblePerson: '',      //责任人
                        Check_Person: '',      //检查人
                    },
                    //7s扣分类型
                    record: {
                        PointsDeducted: '',
                        PointsDeducted_Item: [],
                        PointsDeducted_Type: '',
                        BeforeImprovement: [],
                        AfterImprovement: [],
                        ProblemDescription: '',
                        RectificationTime: ''
                    },
                    recordList: []
                }
            },
            created: function () {
                this.onGetDepartmentData();
                this.onGetPointsType();
            },
            mounted: function () {

            },
            watch: {
                'formInfo.Department': {
                    handler(val) {
                        if (val != '') {
                            this.formInfo.Position = '';
                            this.formInfo.District = '';
                            this.onGetPosition();
                        }
                    },
                    deep: true
                },
                'formInfo.Position': {
                    handler(val) {
                        if (val != '') {
                            this.formInfo.District = '';
                            this.onGetDistrictData();
                        }
                    },
                    deep: true
                }
            },
            //函数方法
            methods: {
                //获取初始化下拉数据
                onGetDepartmentData() {
                    axios.post('/KPI/GetDepartmentList').then(res => {
                        res.data.shift();
                        this.department_options = res.data;
                    })
                },
                onGetDistrictData() {
                    axios.post('/KPI/GetDistrictList', { department: this.formInfo.Department, position: this.formInfo.Position }).then(res => {
                        res.data.shift();
                        this.district_options = res.data;
                    })
                },
                onGetPosition() {
                    axios.post('/KPI/GetPositionList', { department: this.formInfo.Department }).then(res => {
                        res.data.shift();
                        this.position_options = res.data;
                    })
                },
                onGetPointsType() {
                    axios.post('/KPI/GetPointsType').then(res => {
                        this.points_type_options = res.data;
                    })
                },
                onGetReferenceStandard() {
                    axios.post('/KPI/GetReferenceStandard', { pointsType: this.record.PointsDeducted_Type }).then(res => {
                        //console.log(res.data)
                        this.reference_standard_options = res.data;
                    })
                },
                //检查人
                addCheckPerson() {
                    this.check_person_list.push({
                        id: this.index,
                        name: ''
                    });
                    this.index += 1;
                    //console.log(this.check_person_list);
                },
                deleteCheckPerson(val) {
                    //console.log(val);
                    let arr = this.check_person_list;
                    let newArr = [];
                    for (let i = 0; i < arr.length; i++) {
                        let j = arr[i];
                        if (j.id != val) {
                            newArr.push(j);
                        }
                    }
                    this.check_person_list = newArr;
                    //console.log(this.check_person_list);
                },
                onTipCheck() {
                    let arr = [];
                    this.check_person_list.map(item => {
                        if (item.name != '') {
                            arr.push(item.name);
                        }
                    })
                    if (arr.length == 0) {
                        this.$message.warning('请填写至少一个检查人！');
                        return false;
                    } else {
                        this.formInfo.Check_Person = arr.toString();
                        return true;
                    }
                },
                //提示
                onTip() {
                    if (this.formInfo.Check_Type == '') {
                        this.$message.warning('请选择检查类型!')
                        return false;
                    } else if (this.formInfo.Date == '') {
                        this.$message.warning('请选择检查日期！');
                        return false;
                    } else if (this.formInfo.Department == '') {
                        this.$message.warning('请选择部门！');
                        return false;
                    }
                    else if (this.formInfo.Position == '') {
                        this.$message.warning('请选择位置!')
                        return false;
                    } else if (this.formInfo.District == '') {
                        this.$message.warning('请选择区域号!')
                        return false;
                    }
                    else if (this.onTipCheck()) {
                        return true;
                    }
                },
                onPointsTip() {
                    if (this.record.PointsDeducted_Type == '') {
                        this.$message.warning('请选择类型！');
                        return false;
                    } else if (this.record.PointsDeducted_Item.length == 0) {
                        this.$message.warning('请选择扣分参考标准！');
                        return false;
                    } else if (this.record.BeforeImprovement.length == 0) {
                        this.$message.warning('请上传改善前图片！');
                        return false;
                    } else if (this.record.AfterImprovement.length == 0 && this.formInfo.check_Type == '日检') {
                        this.$message.warning('请上传改善后图片！');
                        return false;
                    } else if (this.record.RectificationTime == '' && this.formInfo.check_Type != '日检') {
                        this.$message.warning('请选择限期整改时间！');
                        return false;
                    } else { return true; }
                },
                //扣分类型切换
                onChangeType() {
                    this.record.PointsDeducted_Item = [];
                    this.record.PointsDeducted = '';
                    this.onGetReferenceStandard();
                },
                //添加7s扣分类型
                onAddPointsType() {
                    if (this.onTip()) {
                        this.dialogPoint = true;
                        //console.log(this.formInfo);
                    }
                },
                //分数
                getGarde(val) {
                    switch (val) {
                        case '整理':
                            return 0.5;
                            break;
                        case '整顿':
                            return 0.5;
                            break;
                        case '清洁':
                            return 0.5;
                            break;
                        case '清扫':
                            return 0.5;
                            break;
                        case '安全':
                            return 1;
                            break;
                        case '节约':
                            return 1;
                            break;
                        case '素养':
                            return 1;
                            break;
                    }
                },
                //扣分计算
                onSelectItem() {
                    if (this.formInfo.Check_Type != '日检' && this.formInfo.Check_Type != '') {
                        //console.log(rowIndex);
                        let grade_item = this.getGarde(this.record.PointsDeducted_Type);
                        let count = 0;
                        this.reference_standard_options.map(item => {
                            count += item.count;
                        })
                        let grade = grade_item * count;
                        this.record.PointsDeducted = grade;
                    }
                },
                onShowCount(val) {
                    //console.log(val)
                    let arr = [];
                    let option = this.reference_standard_options;
                    option.map(item => {
                        arr.push(item.value);
                    })
                    let index = arr.indexOf(val);
                    if (this.record.PointsDeducted_Item.indexOf(val) > -1) {
                        this.reference_standard_options[index].count += 1;
                    } else {
                        this.reference_standard_options[index].count = 0;
                    }
                },
                onAddItem(val) {
                    let arr = [];
                    let option = this.reference_standard_options;
                    option.map(item => {
                        arr.push(item.value);
                    })
                    let index = arr.indexOf(val);
                    this.reference_standard_options[index].count += 1;
                    if (this.formInfo.Check_Type != '日检' && this.formInfo.Check_Type != '') {
                        //console.log(rowIndex);
                        let count = 0;
                        this.reference_standard_options.map(item => {
                            count += item.count;
                        })
                        let grade_item = this.getGarde(this.record.PointsDeducted_Type);
                        let grade = grade_item * count;
                        this.record.PointsDeducted = grade;
                    }
                },
                //添加图片
                addImg(val) {
                    if (this.record.PointsDeducted_Type == '') {
                        this.$message.warning('请选择类型！');
                    } else {
                        //console.log(val);
                        this.dialogVisible = true;
                        this.uploadType = val;
                        this.files = fileList = [];
                        this.filename = [];
                    }
                },
                //选取文件方法
                selectFile(file) {
                    this.files.push(file.raw);
                    this.filename.push(file.name);
                },
                //移除临时图片
                handleRemove(file) {
                    //console.log(file, fileList);
                    for (let i in this.files) {
                        if (this.files[i].uid == file.uid) {
                            this.files.splice(i, 1)
                        }
                    }
                    for (let i in this.filename) {
                        if (this.filename[i] == file.name) {
                            this.filename.splice(i, 1)
                        }
                    }
                },
                //查看临时图片
                handlePictureCardPreview(file) {
                    this.dialogImageUrl = file.url;
                    this.showVisible = true;
                },
                //取消上传
                onCancel() {
                    this.files = this.fileList = this.filename = [];
                    this.dialogVisible = false;
                },
                //确认上传图片
                uploadFile() {
                    this.$loading({
                        lock: true,
                        text: '上传ing...',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    let date = this.formatTime(this.formInfo.Date);
                    //console.log(this.formInfo, 5555);
                    let fd = new FormData();
                    fd.append('department', this.formInfo.Department)
                    fd.append('position', this.formInfo.Position)
                    fd.append('check_date', date)
                    fd.append('check_Type', this.formInfo.Check_Type)
                    fd.append('district', this.formInfo.District)
                    fd.append('pointsDeducted_Type', this.record.PointsDeducted_Type)
                    fd.append('uploadType', this.uploadType)
                    let param = {
                        'department': this.formInfo.Department,
                        'position': this.formInfo.Position,
                        'check_date': date,
                        'check_Type': this.formInfo.Check_Type,
                        'district': this.formInfo.District,
                        'pointsDeducted_Type': this.record.PointsDeducted_Type,
                        'uploadType': this.uploadType
                    }
                    //console.log(param, 9999999);
                    this.filename.forEach(file => { fd.append("pictureFile", file); })
                    j = 0;
                    this.files.forEach(item => { fd.append("UploadFile_Ingredients" + j, item); j++; })
                    axios.post('/KPI/ImageUpload', fd).then(res => {
                        //console.log(res)
                        if (res.data == 'True') {
                            this.$message.success('图片上传成功！');
                            this.dialogVisible = false;
                            this.onGetImg(param);
                            this.files = this.fileList = this.filename = [];
                            this.$loading().close();
                        } else {
                            this.$message.error('图片上传失败');
                            this.dialogVisible = false;
                            this.$loading().close();
                        }
                    })
                },
                //获取图片
                onGetImg(param) {
                    axios.post('/KPI/QueryImage', param).then(res => {
                        //console.log(res.data,88888888)
                        if (param.uploadType == '改善前') {
                            this.record.BeforeImprovement = res.data;
                        }
                        if (param.uploadType == '改善后') {
                            this.record.AfterImprovement = res.data;
                        }
                    })
                },
                //删除图片
                onDelete(url, row, rowIndex, val) {
                    //console.log(this.files, 1212);
                    //console.log(this.filename, 5656);
                    //console.log(row.BeforeImprovement, 5656);
                    //console.log(url,000);
                    if (val == 1) {
                        this.uploadType = '改善前';
                    }
                    if (val == 2) {
                        this.uploadType = '改善后';
                    }
                    this.$confirm('确认删除该图片？')
                        .then(_ => {
                            this.uploadIndex = rowIndex;
                            let param = {
                                'path': url,
                                'department': this.formInfo.Department,
                                'position': this.formInfo.Position,
                                'check_date': this.formInfo.Date,
                                'check_Type': this.formInfo.Check_Type,
                                'district': this.formInfo.District,
                                'pointsDeducted_Type': row.PointsDeducted_Type,
                                'uploadType': this.uploadType
                            }
                            this.$loading({
                                lock: true,
                                text: '删除ing...',
                                spinner: 'el-icon-loading',
                                background: 'rgba(0, 0, 0, 0.7)'
                            });
                            axios.post('/KPI/DeleteImg', param).then(res => {
                                //console.log(res)
                                if (res.data = "删除成功") {
                                    for (var k in param) {
                                        if (k == 'path') {
                                            delete param[k];
                                        }
                                    }
                                    this.onGetImg(param)
                                    this.$loading().close();
                                }
                            })
                        }).catch(_ => {
                            this.$loading().close();
                        }
                        );
                },
                //格式化数据
                formatTime(time) {
                    //console.log(time)
                    let date = new Date(time);
                    return XEUtils.toDateString(date, 'yyyy-MM-dd')
                },
                //取消添加7s扣分类型
                onCancelPoints() {
                    this.dialogPoint = false;
                    if (this.record.BeforeImprovement.length != 0 || this.record.AfterImprovement.length != 0) {
                        let param = {
                            department: this.formInfo.Department,
                            position: this.formInfo.Position,
                            check_date: this.formInfo.Date,
                            check_Type: this.formInfo.Check_Type,
                            district: this.formInfo.District,
                            pointsDeducted_Type: this.record.PointsDeducted_Type
                        }
                        axios.post('/KPI/KPI_7S_DeleteImage', param).then(res => {
                            //console.log(res)
                            if (res.data == '删除成功') {
                            }
                        })
                    }
                    this.record = {
                        PointsDeducted: '',
                        PointsDeducted_Item: [],
                        PointsDeducted_Type: '',
                        BeforeImprovement: [],
                        AfterImprovement: [],
                        ProblemDescription: '',
                        RectificationTime: ''
                    };
                    this.reference_standard_options = [];
                },
                //获取扣分条数
                getCount(val, rowItem) {
                    //console.log(val)
                    //console.log(rowItem)
                    for (let i in rowItem) {
                        if (rowItem[i].value == val) {
                            return rowItem[i].count
                        }
                    }
                },
                //添加7s扣分类型
                onAddPoints() {
                    if (this.onPointsTip()) {
                        let PointsDeducted_Item = this.record.PointsDeducted_Item
                        for (let i in PointsDeducted_Item) {
                            this.reference_standard_options.map(item => {
                                if (PointsDeducted_Item[i] == item.value) {
                                    if (item.count > 1) {
                                    PointsDeducted_Item[i] = PointsDeducted_Item[i]+' x'+item.count
                                    }
                                }
                            })
                        }
                        //console.log(this.record.PointsDeducted_Item);
                        this.recordList.push(this.record);
                        this.dialogPoint = false;
                        this.record = {
                            PointsDeducted: '',
                            PointsDeducted_Item: [],
                            PointsDeducted_Type: '',
                            BeforeImprovement: [],
                            AfterImprovement: [],
                            ProblemDescription: '',
                            RectificationTime: ''
                        };
                        this.reference_standard_options = [];
                    }
                },
                //删除7s扣分表
                onDeletePointsType(index) {
                    //console.log(index);
                    let type = this.recordList[index].PointsDeducted_Type;
                    //console.log(type);
                    this.$confirm('确认删除当前记录？').then(_ => {
                        this.recordList.splice(index, 1);
                        let param = {
                            department: this.formInfo.Department,
                            position: this.formInfo.Position,
                            check_date: this.formInfo.Date,
                            check_Type: this.formInfo.Check_Type,
                            district: this.formInfo.District,
                            pointsDeducted_Type: type
                        }
                        axios.post('/KPI/KPI_7S_DeleteImage', param).then(res => {
                            //console.log(res)
                            if (res.data == '删除成功') {
                                this.$message.success('删除成功!')
                            }
                        })

                    }).catch();
                },
                //重复记录提示取消上传
                onCancelConfirm() {
                    this.dialogRepeat = false;
                },
                onConfirm() {
                    this.dialogRepeat = false;
                    this.onSubmitRecord();
                },
                //取消当前信息
                onReset() {
                    this.$confirm('确认清空当前信息？').then(_ => {
                        if (this.recordList.length != 0) {
                            for (let i = 0; i < this.recordList.length; i++) {
                                //console.log(this.recordList[i].PointsDeducted_Type, 123456)
                                axios.post('/KPI/KPI_7S_DeleteImage', {
                                    department: this.formInfo.Department,
                                    position: this.formInfo.Position,
                                    check_date: this.formInfo.Date,
                                    check_Type: this.formInfo.Check_Type,
                                    district: this.formInfo.District,
                                    pointsDeducted_Type: this.recordList[i].PointsDeducted_Type
                                }).then(res => {
                                    //console.log(res)
                                    //if (res.data == '删除成功') {
                                    //    this.formInfo = {
                                    //        Check_Type: '',  //检查类型
                                    //        Date: '',   //检查日期
                                    //        Department: '',      //部门
                                    //        Position: '',   // 位置
                                    //        District: '',     //区域
                                    //        //ResponsiblePerson: '',      //责任人
                                    //        Check_Person: ''
                                    //    };
                                    //    this.recordList = [];
                                    //}
                                })
                            }
                        }
                        this.formInfo = {
                            Check_Type: '',  //检查类型
                            Date: '',   //检查日期
                            Department: '',      //部门
                            Position: '',   // 位置
                            District: '',     //区域
                            //ResponsiblePerson: '',      //责任人
                            Check_Person: ''
                        };
                        this.recordList = [];
                        this.index = 1;
                        this.check_person_list = [
                            { id: 0, name: '' }
                        ];
                    }).catch();
                },
                //提交表单前检查重复
                onSubmit() {
                    if (this.onTip()) {
                        if (this.recordList.length == 0) {
                            this.$message.warning('请添加至少一条7s扣分项!')
                        } else {
                            axios.post('/KPI/Check_Record', { record: this.recordList, formInfo: this.formInfo }).then(res => {
                                //console.log(res.data, 111111111);
                                if (res.data.length == 0) {
                                    this.onSubmitRecord();
                                } else {
                                    this.tip = res.data.toString();
                                    this.dialogRepeat = true;
                                }
                            })
                        }
                    }
                },
                //上传记录
                onSubmitRecord() {
                    this.$loading({
                        lock: true,
                        text: '提交ing...',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    let submitData = this.recordList;
                    for (let i = 0; i < submitData.length; i++) {
                        let PointsDeducted_Item = submitData[i].PointsDeducted_Item;
                        let str = PointsDeducted_Item.join("|");
                        submitData[i].PointsDeducted_Item = str;
                    }
                    let newd = JSON.parse(JSON.stringify(submitData, ['PointsDeducted_Type', 'PointsDeducted_Item', 'ProblemDescription', 'RectificationTime', 'PointsDeducted']));
                    //console.log('newd', newd);
                    axios.post('/KPI/RecordInput', { record: newd, formInfo: this.formInfo }).then(res => {
                        if (res.data == '保存成功！') {
                            this.$message.success('保存成功！');
                            this.formInfo = {
                                Check_Type: '',  //检查类型
                                Date: '',   //检查日期
                                Department: '',      //部门
                                Position: '',   // 位置
                                District: '',     //区域
                                //ResponsiblePerson: '',      //责任人
                                Check_Person: ''
                            };
                            this.recordList = [];
                            this.index = 1;
                            this.check_person_list = [
                                { id: 0, name: '' }
                            ];
                            this.$loading().close();
                        } else {
                            this.$loading().close();
                            this.$message.error('保存失败！');
                        }
                    })
                }
            }
        };
    </script>
}