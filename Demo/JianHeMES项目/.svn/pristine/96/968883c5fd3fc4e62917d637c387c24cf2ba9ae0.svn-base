using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;

namespace JianHeMES.Controllers
{
    public class Process_CapacityController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        private CommonalityController comm = new CommonalityController();
        private CommonController com = new CommonController();

        #region 页面
        //工序产能首页
        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "Index" });
            }
            return View();
        }
        //工序产能二级页
        public ActionResult Index2()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "Index2" });
            }
            return View();
        }

        //工序产能首页（旧）
        public ActionResult Index3()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "Index3" });
            }
            return View();
        }

        //工序产能首页（操作）
        public ActionResult Index4()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "Index4" });
            }
            return View();
        }
        //工序产能详细页
        public ActionResult Detail()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "Detail" });
            }
            return View();
        }
        //标准产能
        public ActionResult StandardCapacity()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "StandardCapacity" });
            }
            return View();
        }
        //工序平衡卡
        public ActionResult ProcessBalanceCard()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "ProcessBalanceCard" });
            }
            return View();
        }
        #endregion

        #region 临时类，用于总表JSON文件内容
        public class Temp2
        {
            public string Type { get; set; }
            public string PCB { get; set; }
            public string Plafrom { get; set; }
            public string Seaction { get; set; }
            public string ExaminamMessage { get; set; }
            public string Name { get; set; }
            public string Name2 { get; set; }
            public int PersonNum { get; set; }
            public int PersonNum2 { get; set; }
            public int PersonNum3 { get; set; }
            public int PersonNum4 { get; set; }
            public decimal StandardOutput { get; set; }
            public decimal StandardOutput2 { get; set; }
            public decimal StandardOutput3 { get; set; }
            public decimal StandardOutput4 { get; set; }
            public decimal ModuleNeed { get; set; }
        }

        public class TempSmt
        {
            public string Type { get; set; }
            public string PCB { get; set; }
            public string Plafrom { get; set; }
            public string Section { get; set; }
            public string ProcessDescription { get; set; }
            public decimal ModuleNeed { get; set; }
            public int PersonNum { get; set; }
            public decimal CapacityPerHour { get; set; }

        }

        public class TempCapacity
        {
            public string Type { get; set; }
            public string PCB { get; set; }
            public string Plafrom { get; set; }
            public int Id { get; set; }
            public string Name { get; set; }
            public double SingleLampWorkingHours { get; set; }
            public int PCBASingleLampNumber { get; set; }
            public int StandardNumber { get; set; }
            public decimal StandardCapacity { get; set; }
            public decimal ModuleNeedNum { get; set; }
        }
        public class TempBurn
        {
            public string Type { get; set; }
            public string PCB { get; set; }
            public string Plafrom { get; set; }
            public int Id { get; set; }
            public string BurinOneProcessName { get; set; }
            public int BurninOneSuctionStandardTotal { get; set; }
            public decimal BurinOneStabdardOutputPerHour { get; set; }
            public string BurinTwoProcessName { get; set; }
            public int BurinTwoSuctionStandardTotal { get; set; }
            public decimal BurinTwoStabdardOutputPerHour { get; set; }

            public decimal ModuleNeedNum { get; set; }
        }

        public class TempBlance
        {
            public string Type { get; set; }
            public string PCB { get; set; }
            public string Plafrom { get; set; }
            public string Section { get; set; }
            public string SerialNumber { get; set; }
            public int Id { get; set; }
            public string Name { get; set; }
            public int StandardTotal { get; set; }
            public decimal StandardCapacity { get; set; }
            public decimal ModuleNeedNum { get; set; }
            public decimal StandardHourlyOutputPerCapita { get; set; }
            public bool Pdf { get; set; }
            public bool Jpg { get; set; }
            public int ScrewMachineNum { get; set; }
            public int DispensMachineNum { get; set; }
            public decimal BalanceRate { get; set; }
            public decimal Bottleneck { get; set; }


        }
        #endregion

        #region 总表

        /// <summary>
        /// 总表,上传手输数据
        /// </summary>
        /// 根据条件找到符合的总表数据,循环,将前端需要的数据传出,根据平台,类型,PCB板找到贴片表的数据,平衡表的数据,及各工段的数据
        /// <param name="protype">类型</param>
        /// <param name="proplatform">平台</param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult TotalProcess_Capacity(string protype, string proplatform)
        {
            #region 参数筛选数值
            var total = db.Process_Capacity_Total.ToList();//没有筛选值
            if (!string.IsNullOrEmpty(proplatform))//如果有平台值
            {
                total = total.Where(c => c.Platform.Contains(proplatform)).ToList();
            }
            if (!string.IsNullOrEmpty(protype))//如果有类型值
            {
                total = total.Where(c => c.Type.Contains(protype)).ToList();
            }
            var idtolist = total.OrderByDescending(c => c.Id).Select(c => c.Id).ToList();//根据id排序，得到ID值
            #endregion
            #region 取值
            //SMT
            var SmtList = db.Pick_And_Place.Select(c => new TempSmt { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, Section = c.Section, ProcessDescription = c.ProcessDescription, ModuleNeed = c.ModuleNeedNum2, PersonNum = c.PersonNum, CapacityPerHour = c.CapacityPerHour }).ToList();
            //插件
            var PluginList = db.Process_Capacity_Plugin.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, PCBASingleLampNumber = c.PCBASingleLampNumber, StandardCapacity = c.PluginStandardCapacity, Name = c.Name, ModuleNeedNum = c.ModuleNeedNum2, SingleLampWorkingHours = c.SingleLampWorkingHours, StandardNumber = c.PluginStandardNumber, Id = c.Id });
            //平衡卡
            var Balance = db.ProcessBalance.Select(c => new TempBlance { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.StandardOutput, StandardTotal = c.StandardTotal, StandardHourlyOutputPerCapita = c.StandardHourlyOutputPerCapita, Id = c.Id, ModuleNeedNum = c.ModuleNeedNum2, Name = c.Title, Section = c.Section, SerialNumber = c.SerialNumber, ScrewMachineNum = c.ScrewMachineNum, BalanceRate = c.BalanceRate, Bottleneck = c.Bottleneck, DispensMachineNum = c.DispensMachineNum });
            ////三防
            //var ThreeProfList = db.Process_Capacity_ThreeProf.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.ThreeProfStabdardOutput, Name = c.ThreeProfProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.ThreeProfStandardTotal, Id = c.Id });
            //喷墨
            var InkjetList = db.Process_Capacity_Inkjet.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.InkjetStabdardOutputPerHour, Name = c.InkjetProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.InkjetSuctionStandardTotal, Id = c.Id });
            //灌胶
            var GlueList = db.Process_Capacity_Glue.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.GlueStabdardOutput, Name = c.GlueProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.GlueStandardTotal, Id = c.Id });
            //气密
            var AirtightList = db.Process_Capacity_Airtight.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.AirtightStabdardOutput, Name = c.AirtightProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.AirtightStandardTotal, Id = c.Id });
            //老化
            var BurnList = db.Process_Capacity_Burin.Select(c => new TempBurn { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, BurinOneProcessName = c.BurinOneProcessName, BurinOneStabdardOutputPerHour = c.BurinOneStabdardOutputPerHour, BurninOneSuctionStandardTotal = c.BurninOneSuctionStandardTotal, ModuleNeedNum = c.ModuleNeedNum2, Id = c.Id, BurinTwoProcessName = c.BurinTwoProcessName, BurinTwoStabdardOutputPerHour = c.BurinTwoStabdardOutputPerHour, BurinTwoSuctionStandardTotal = c.BurinTwoSuctionStandardTotal });

            #endregion
            JArray jarray = new JArray();

            foreach (var id in idtolist)
            {
                JObject result = new JObject();
                var info = db.Process_Capacity_Total.Find(id);
                var item = info.Type;
                result.Add("id", info.Id);//id
                result.Add("Type", info.Type);//类型
                var platform = info.Platform;
                var PCB = info.ProductPCBnumber;
                result.Add("Platform", platform);//平台
                result.Add("PCB", PCB);//PCB板
                result.Add("TotalEdit", false);//前端用
                result.Add("editNum", 0);//前端用

                #region ic面贴装 灯面贴装
                result.Add("SMTEidt", false);//前端用
                var TempSmtvalue = SmtList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据平台，类型，PCB板号找到贴片信息

                var aa = SMTvalue(TempSmtvalue);
                result.Add("SMTExaminanMessage", "审核通过");//默认审核都通过，这个判断暂时没用
                result.Add("icProductName", aa.Name);//IC面名字
                result.Add("icMaxStandardTotal", aa.PersonNum);//ic面最大产能标配人数
                result.Add("icMaxStandardOutput", aa.StandardOutput);//ic面最大标配产能
                result.Add("icMinStandardTotal", aa.PersonNum2);//IC面最小产能标配人数
                result.Add("icMinStandardOutput", aa.StandardOutput2);//ic面最小标配产能
                result.Add("LightProductName", aa.Name2);//灯面名字
                result.Add("LightMaxStandardTotal", aa.PersonNum3);//灯面最大标配人数
                result.Add("LightMaxStandardOutput", aa.StandardOutput3);//灯面最大标配产能
                result.Add("LightMinStandardTotal", aa.PersonNum4);//灯面最小标配人数
                result.Add("LightMinStandardOutput", aa.StandardOutput4);//灯面最小标配产能
                result.Add("SMTmoduleneed", aa.ModuleNeed);//贴片模组需求

                //SMT是否有图片或PDF
                if (IsHavingIMG(id, "SMT", "SMT"))//是否有图片
                    result.Add("SMTjpg", true);
                else
                    result.Add("SMTjpg", false);

                if (IsHavingPDF(id, "SMT", "SMT"))//是否有PDF文档
                    result.Add("SMTpdf", true);
                else
                    result.Add("SMTpdf", false);
                #endregion

                #region 插件
                var plugin = PluginList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据平台，PCB板,类型查找插件数据
                if (plugin.Count == 0)//如果找不到数据
                {
                    result.Add("PluginDevice", null);
                }
                else
                {
                    JArray array = new JArray();
                    foreach (var pluginitem in plugin)
                    {
                        JObject pluginjobject = new JObject();
                        pluginjobject.Add("PluginEidt", false);//前端用
                        pluginjobject.Add("PluginDeviceID", pluginitem.Id);//id
                        pluginjobject.Add("PluginDeviceName", pluginitem.Name); //插件工序名
                        pluginjobject.Add("SingleLampWorkingHours", pluginitem.SingleLampWorkingHours);//插件机台固定标准单灯工时
                        pluginjobject.Add("PCBASingleLampNumber", pluginitem.PCBASingleLampNumber);//插件PCBA单灯数
                        pluginjobject.Add("PluginStandardNumber", pluginitem.StandardNumber);//插件标配人数
                        pluginjobject.Add("PluginStandardCapacity", pluginitem.StandardCapacity);//插件产能标准
                        pluginjobject.Add("PluginModuleNeed", pluginitem.ModuleNeedNum);//插件产能标准
                        if (IsHavingPDF(id, "插件", pluginitem.Name))//是否有pdf
                            pluginjobject.Add("PluginPdf", true);
                        else
                            pluginjobject.Add("PluginPdf", false);
                        if (IsHavingIMG(id, "插件", pluginitem.Name))//是否有jpg
                            pluginjobject.Add("PluginJpg", true);
                        else
                            pluginjobject.Add("PluginJpg", false);
                        array.Add(pluginjobject);//将单行的插件数据放到一个Jarray中
                    }
                    result.Add("PluginDevice", array);
                }
                #endregion

                #region 后焊
                var AfterWeldProcessName = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "后焊").ToList();//根据平台，类型，pcb板查找后焊数据
                if (AfterWeldProcessName.Count == 0)//如果数据为空
                {
                    result.Add("AfterWeld", null);
                }
                else
                {
                    var AfterWeldInfo = BlanceModule(AfterWeldProcessName);//调用通用json模板 
                    JArray AfterWeld = new JArray();
                    foreach (var AfterWelditem in AfterWeldInfo)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("AfterWeldEidt", false);//前端用
                        jObject.Add("AfterWeldExaminanMessage", "审核通过");
                        jObject.Add("AfterWeldID", AfterWelditem.Id);//id
                        jObject.Add("AfterWeldProcessName", AfterWelditem.Name);//后焊工序描述
                        jObject.Add("AfterWeldStandardTotal", AfterWelditem.StandardTotal);//后焊标配人数
                        jObject.Add("AfterWeldStandardOutput", AfterWelditem.StandardCapacity);//后焊标配产能
                        jObject.Add("AfterModuleNeed", AfterWelditem.ModuleNeedNum);//后面模组需求
                        jObject.Add("AfterWeldStandardHourlyOutputPerCapita", AfterWelditem.StandardHourlyOutputPerCapita);//后焊标准人均时产能
                        jObject.Add("AfterWeldPdf", AfterWelditem.Pdf);//后焊pdf
                        jObject.Add("AfterWeldImg", AfterWelditem.Jpg);//后焊JPG

                        AfterWeld.Add(jObject);
                    }


                    result.Add("AfterWeld", AfterWeld);
                }
                #endregion

                #region 三防
                var threeprof = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "三防").ToList();//根据平台，PCB板，类型查找三防数据
                if (threeprof.Count == 0)//如果数据为空
                {
                    result.Add("ThreeProf", null);
                }
                else
                {
                    var threeprofInfo = BlanceModule(threeprof);//调用通用json模板 
                    JArray Three = new JArray();
                    foreach (var threeprofitem in threeprofInfo)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("ThreeProfEidt", false);//前端用
                        jObject.Add("ThreeProfExaminanMessage", "审核通过");
                        jObject.Add("ThreeProfID", threeprofitem.Id);//id
                        jObject.Add("ThreeProfProcessName", threeprofitem.Name);//后焊工序描述
                        jObject.Add("ThreeProfStandardTotal", threeprofitem.StandardTotal);//后焊标配人数
                        jObject.Add("ThreeProfStabdardOutput", threeprofitem.StandardCapacity);//后焊标配产能
                        jObject.Add("ThreeProfNeed", threeprofitem.ModuleNeedNum);//后面模组需求
                        //jObject.Add("AfterWeldStandardHourlyOutputPerCapita", threeprofitem.StandardHourlyOutputPerCapita);//后焊标准人均时产能
                        jObject.Add("ThreeProfPdf", threeprofitem.Pdf);//后焊pdf
                        jObject.Add("ThreeProfJpg", threeprofitem.Jpg);//后焊JPG

                        Three.Add(jObject);
                    }
                    result.Add("ThreeProf", Three);
                }
                #endregion

                #region 打底壳
                var BottomCasProcessName = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "打底壳").ToList();//根据平台，PCB板，平台查找打底壳数据
                if (BottomCasProcessName.Count == 0)//如果没有数据
                {
                    result.Add("BottomCas", null);
                }
                else
                {
                    JArray BottomCas = new JArray();
                    var BottomCasinfo = BlanceModule(BottomCasProcessName);//调用通用模板
                    foreach (var message in BottomCasinfo)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("BottomCasEidt", false);//前端用
                        jObject.Add("BottomCasModuleNeed", message.ModuleNeedNum);//打底壳模组需求
                        jObject.Add("BottomCasID", message.Id);//id
                        jObject.Add("BottomCasExaminanMessage", "审核通过");
                        jObject.Add("BottomCasProcessName", message.Name);//打底壳工序描述
                        jObject.Add("BottomCasStandardTotal", message.StandardTotal);//打底壳标配人数
                        jObject.Add("BottomCasStandardOutput", message.StandardCapacity);//打底壳标配产能
                        jObject.Add("BottomCasStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);//打底壳标配人均产能
                        jObject.Add("BottomCasDispensMachineNum", message.DispensMachineNum);//打底壳点胶机数量
                        jObject.Add("BottomCasScrewMachineNum", message.ScrewMachineNum);//打底壳螺丝机数量

                        jObject.Add("BottomCasPdf", message.Pdf);//打底壳PDF

                        jObject.Add("BottomCasImg", message.Jpg);//打底壳JPG
                        // }
                        BottomCas.Add(jObject);
                    }
                    result.Add("BottomCas", BottomCas);
                }
                #endregion

                #region 装磁吸
                var magnetic = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "装磁吸安装板").ToList();//根据类型，Pbc板，平台查找装磁吸信息
                if (magnetic.Count == 0)//如果没有数据
                {
                    result.Add("Magnetic", null);

                }
                else
                {
                    JArray magneticJarry = new JArray();
                    var mafneticinfo = BlanceModule(magnetic);//调用通用json文件
                    foreach (var ProcessName in mafneticinfo)
                    {
                        JObject jObject = new JObject();

                        jObject.Add("MagneticEidt", false);//前端用
                        jObject.Add("MagneticID", ProcessName.Id);//id
                        jObject.Add("MagneticExaminanMessage", "审核通过");
                        jObject.Add("MagneticModuleNeed", ProcessName.ModuleNeedNum);//装磁吸模组需求数量
                        jObject.Add("MagneticProcessName", ProcessName.Name);//装磁吸工序描述
                        jObject.Add("MagneticStandardTotal", ProcessName.StandardTotal);//装磁吸标准人数
                        jObject.Add("MagneticStabdardOutput", ProcessName.StandardCapacity);//装磁吸标配产能
                        jObject.Add("MagneticStandardHourlyOutputPerCapita", ProcessName.StandardHourlyOutputPerCapita);//装磁吸人均时产能
                        jObject.Add("MagneticPdf", ProcessName.Pdf);//装磁吸pdf
                        jObject.Add("MagneticImg", ProcessName.Jpg);//装磁吸jpg

                        magneticJarry.Add(jObject);

                    }
                    result.Add("Magnetic", magneticJarry);
                }

                #endregion

                #region 喷墨
                var inkjet = InkjetList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据平台,PCB板,类型查找喷墨数据
                if (inkjet.Count == 0)//如果没有数据
                {
                    result.Add("Inkjet", null);

                }
                else
                {
                    JArray array = new JArray();
                    foreach (var inkjetitem in inkjet)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("InkjetEidt", false);//前端用
                        jObject.Add("InkjetID", inkjetitem.Id);//id
                        jObject.Add("InkjetProcessName", inkjetitem.Name);//喷墨工序
                        jObject.Add("InkjetSuctionStandardTotal", inkjetitem.StandardNumber);//喷墨配置人数
                        jObject.Add("InkjetStabdardOutputPerHour", inkjetitem.StandardCapacity);//喷墨每小时产能
                        jObject.Add("InkjetModuleNeed", inkjetitem.ModuleNeedNum);//模组需求数量
                        if (IsHavingPDF(id, "喷墨", inkjetitem.Name))//喷墨pdf
                            jObject.Add("InkjetPdf", true);
                        else
                            jObject.Add("InkjetPdf", false);
                        if (IsHavingIMG(id, "喷墨", inkjetitem.Name))//喷墨jpg
                            jObject.Add("InkjetJpg", true);
                        else
                            jObject.Add("InkjetJpg", false);
                        array.Add(jObject);
                    }
                    result.Add("Inkjet", array);
                }
                #endregion

                #region 灌胶
                var glue = GlueList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据平台,类型,PCB板查找灌胶数据
                if (glue.Count == 0)//如果没有数据
                {
                    result.Add("Glue", null);

                }
                else
                {
                    JArray array = new JArray();
                    foreach (var glueitem in glue)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("GlueEidt", false);//前端用
                        jObject.Add("GlueID", glueitem.Id);//id
                        jObject.Add("GlueProcessName", glueitem.Name);//灌胶工序描述
                        jObject.Add("GlueStandardTotal", glueitem.StandardNumber);//灌胶标准总人数
                        jObject.Add("GlueStabdardOutput", glueitem.StandardCapacity);//灌胶标准产量
                        jObject.Add("GlueModuleNeed", glueitem.ModuleNeedNum);//模组需求数量
                        if (IsHavingPDF(id, "灌胶", glueitem.Name))//灌胶pdf
                            jObject.Add("GluePdf", true);
                        else
                            jObject.Add("GluePdf", false);
                        if (IsHavingIMG(id, "灌胶", glueitem.Name))//灌胶jpg
                            jObject.Add("GlueJpg", true);
                        else
                            jObject.Add("GlueJpg", false);
                        array.Add(jObject);
                    }
                    result.Add("Glue", array);
                }
                #endregion

                #region 气密
                var airtight = AirtightList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据平台,类型,PCB板查找气密数据
                if (airtight.Count == 0)//如果没有数据
                {
                    result.Add("Airtight", null);

                }
                else
                {
                    JArray array = new JArray();
                    foreach (var airtightitem in airtight)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("AirtightEidt", false);//前端用
                        jObject.Add("AirtightID", airtightitem.Id);
                        jObject.Add("AirtightProcessName", airtightitem.Name);//气密工序描述
                        jObject.Add("AirtightStandardTotal", airtightitem.StandardNumber);//气密标准总人数
                        jObject.Add("AirtightStabdardOutput", airtightitem.StandardCapacity);//气密标准产量
                        jObject.Add("AirtightModuleNeed", airtightitem.ModuleNeedNum);//模组需求数量
                        if (IsHavingPDF(id, "气密", airtightitem.Name))//气密pdf
                            jObject.Add("AirtightPdf", true);
                        else
                            jObject.Add("AirtightPdf", false);
                        if (IsHavingIMG(id, "气密", airtightitem.Name))//气密jpg
                            jObject.Add("AirtightJpg", true);
                        else
                            jObject.Add("AirtightJpg", false);
                        array.Add(jObject);
                    }
                    result.Add("Airtight", array);
                }

                #endregion

                #region 锁面罩
                var LockTheMaskProcessName = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "锁面罩").ToList();//根据平台,类型,PCB板查找锁面罩数据
                if (LockTheMaskProcessName.Count() == 0)//如果没有数据
                {
                    result.Add("LockTheMask", null);
                }
                else
                {

                    JArray LockTheMask = new JArray();
                    var Lockinfo = BlanceModule(LockTheMaskProcessName);//调用通用模板
                    foreach (var ProcessName in Lockinfo)
                    {
                        JObject jObject = new JObject();

                        jObject.Add("LockTheMaskEdit", false);//前端用
                        jObject.Add("LockTheMaskModuleNeed", ProcessName.ModuleNeedNum);//模组需求数量
                        jObject.Add("LockTheMaskID", ProcessName.Id);//id
                        jObject.Add("LockTheMaskExaminanMessage", "审核通过");
                        jObject.Add("LockTheMaskProcessName", ProcessName.Name);//锁面罩工序描述
                        jObject.Add("LockTheMaskStandardTotal", ProcessName.StandardTotal);//锁面罩标配人数
                        jObject.Add("LockTheMaskStandardOutput", ProcessName.StandardCapacity);//锁面罩标配产能
                        jObject.Add("LockTheMaskStandardHourlyOutputPerCapita", ProcessName.StandardHourlyOutputPerCapita);//锁面罩人均时产能
                        jObject.Add("LockTheMaskScrewMachineNum", ProcessName.ScrewMachineNum);//锁面罩螺丝机数量

                        jObject.Add("LockTheMaskPdf", ProcessName.Pdf);//锁面罩pdf

                        jObject.Add("LockTheMaskImg", ProcessName.Jpg);//锁面罩jpg

                        //}
                        LockTheMask.Add(jObject);
                    }
                    result.Add("LockTheMask", LockTheMask);
                }
                #endregion

                #region 模组装配
                var ModuleProcessName = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "模组装配").ToList();//根据类型,平台,PCB板查找模组装配数量
                if (ModuleProcessName.Count == 0)//如果没有数据
                {
                    result.Add("Module", null);
                }
                else
                {
                    JArray Module = new JArray();
                    var Moduleinfo = BlanceModule(ModuleProcessName);//调用通用json模板
                    foreach (var message in Moduleinfo)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("ModuleEidt", false);//前端用
                        jObject.Add("ModuleNeed", message.ModuleNeedNum);//模组需求数量
                        jObject.Add("ModuleID", message.Id);//id
                        jObject.Add("ModuleExaminanMessage", "审核通过");
                        jObject.Add("ModuleProcessName", message.Name);//模组装配工序描述
                        jObject.Add("ModuleStandardTotal", message.StandardTotal);//模组装配标配人数
                        jObject.Add("ModuleBalanceRate", message.BalanceRate + "%");//模组装配平衡率
                        jObject.Add("ModuleBottleneck", message.Bottleneck);//模组装配瓶颈
                        jObject.Add("ModuleStandardOutput", message.StandardCapacity);//模组装配标配产能
                        jObject.Add("ModuleStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);//模组装配人均时产能

                        jObject.Add("ModulePdf", message.Pdf);//模组装配pdf

                        jObject.Add("ModuleImg", message.Jpg);//模组装配jpg

                        Module.Add(jObject);
                    }
                    result.Add("Module", Module);
                }
                #endregion

                #region 老化
                var burnin = BurnList.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform).ToList();//根据类型,PCB板,平台查找老化数据
                if (burnin.Count == 0)//如果没有数据
                {
                    result.Add("Burin", null);

                }
                else
                {
                    JArray array = new JArray();
                    foreach (var burninitem in burnin)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("BurinEidt", false);//前端用
                        jObject.Add("BurinID", burninitem.Id);
                        jObject.Add("BurinOneProcessName", burninitem.BurinOneProcessName);//老化工序描述1
                        jObject.Add("BurninOneSuctionStandardTotal", burninitem.BurninOneSuctionStandardTotal);//老化1标配人数
                        jObject.Add("BurinOneStabdardOutputPerHour", burninitem.BurinOneStabdardOutputPerHour);//老化1每小时产能
                        jObject.Add("BurinTwoProcessName", burninitem.BurinTwoProcessName);//老化2工序描述
                        jObject.Add("BurinTwoSuctionStandardTotal", burninitem.BurinTwoSuctionStandardTotal);//老化2标配人数
                        jObject.Add("BurinTwoStabdardOutputPerHour", burninitem.BurinTwoStabdardOutputPerHour);//老化2每小时标准产能
                        jObject.Add("BurinModuleNeed", burninitem.ModuleNeedNum);//模组需求数量
                        if (IsHavingPDF(id, burninitem.BurinOneProcessName, burninitem.BurinOneProcessName))//老化1是否有pdf
                            jObject.Add("BurinOnePdf", true);
                        else
                            jObject.Add("BurinOnePdf", false);
                        if (IsHavingIMG(id, burninitem.BurinTwoProcessName, burninitem.BurinTwoProcessName))//老化2是否有pdf
                            jObject.Add("BurinTwoPdf", true);
                        else
                            jObject.Add("BurinTwoPdf", false);
                        array.Add(jObject);
                    }
                    result.Add("Burin", array);
                }

                #endregion

                #region 包装
                var PackingProcessName = Balance.Where(c => c.Type == item && c.PCB == PCB && c.Plafrom == platform && c.Section == "包装").ToList();//根据类型,PCB板,平台查找包装数据
                if (PackingProcessName.Count == 0)//如果没有数据
                {
                    result.Add("Packing", null);
                }
                else
                {
                    JArray Packing = new JArray();
                    var Packinginfo = BlanceModule(PackingProcessName);
                    foreach (var message in Packinginfo)
                    {
                        JObject jObject = new JObject();
                        jObject.Add("PackingEidt", false);//前端用
                        jObject.Add("PackingModuleNeed", message.ModuleNeedNum);//模组需求数量
                        jObject.Add("PackingID", message.Id);//id
                        jObject.Add("PackingExaminanMessage", "审核通过");
                        jObject.Add("PackingProcessName", message.Name);//包装工序描述
                        jObject.Add("PackingStandardTotal", message.StandardTotal);//包装标配人数
                        jObject.Add("PackingStandardOutput", message.StandardCapacity);//包装标配产能
                        jObject.Add("PackingPdf", message.Pdf);//包装pdf
                        jObject.Add("PackingImg", message.Jpg);//包装jpg
                        //}
                        Packing.Add(jObject);
                    }
                    result.Add("Packing", Packing);
                }
                #endregion
                jarray.Add(result);
            }
            return Content(JsonConvert.SerializeObject(jarray));
        }

        /// <summary>
        /// 贴片显示json模板
        /// </summary>
        /// 用于两个总表的贴片工段里,返传给前端的通用json模板
        /// <param name="iccount">数据</param>
        /// <returns></returns>
        public Temp2 SMTvalue(List<TempSmt> iccount)
        {
            Temp2 result = new Temp2();
            if (iccount.Count != 0)//如果传过来的数据不为空
            {
                //已选择跳过,数据传回"/"
                if (iccount.FirstOrDefault().Section == "/")
                {
                    result.ExaminamMessage = "审核通过";
                    result.Seaction = "/";
                    result.Name = "/";
                    result.Name2 = "/";
                }
                else
                {

                    var moduleneed = iccount.FirstOrDefault().ModuleNeed;//查找贴片数据第一个模组需求数(一个贴片表有14条数据代表14条线,一个贴片表只有一个模组需求量)
                    result.ModuleNeed = moduleneed;
                    //文件中没有IC面贴装
                    if (iccount.Where(c => c.ProcessDescription == "IC面贴装").Count() == 0)//查找14条数据中的工序描述有没有含有IC面贴装,如果没有,则其中关于IC面最大最小的产能和人数都不传值,默认是0
                    {
                        result.ExaminamMessage = "审核通过";
                        result.Seaction = iccount.FirstOrDefault().Section;
                        result.Name = "IC面贴装";
                    }
                    else//如果含有IC面贴装
                    {
                        var icMaxStandardTotal = iccount.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.PersonNum);//在IC面贴装中找最大的标配人数
                        var icMaxStandardOutput = iccount.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.CapacityPerHour);//在IC面贴装中找最大的标配产能
                        var icMinStandardTotal = iccount.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.PersonNum);//在IC面贴装中找最小的标配人数
                        var icMinStandardOutput = iccount.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.CapacityPerHour);//在IC面贴装中找最小的标配产能
                        result.ExaminamMessage = "审核通过";
                        result.Seaction = iccount.FirstOrDefault().Section;
                        result.Name = "IC面贴装";
                        result.PersonNum = icMaxStandardTotal;
                        result.StandardOutput = icMaxStandardOutput;
                        result.PersonNum2 = icMinStandardTotal;
                        result.StandardOutput2 = icMinStandardOutput;

                    }// result.Add("LimtProductName", true);
                    if (iccount.Where(c => c.ProcessDescription == "灯面贴装").Count() == 0)//查找14条数据中的工序描述有没有含有灯面面贴装,如果没有,则其中关于灯面最大最小的产能和人数都不传值,默认是0
                    {
                        result.ExaminamMessage = "审核通过";
                        result.Seaction = iccount.FirstOrDefault().Section;
                        result.Name2 = "灯面贴装";
                    }
                    else
                    {
                        var LightMaxStandardTotal = iccount.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.PersonNum);//在灯面贴装中招最大的标配人数
                        var LightMaxStandardOutput = iccount.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.CapacityPerHour);//在灯面贴装中招最大的标配产能
                        var LightMinStandardTotal = iccount.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.PersonNum);//在灯面贴装中招最小的标配人数
                        var LightMinStandardOutput = iccount.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.CapacityPerHour);//在灯面贴装中招最小的标配产能
                        result.ExaminamMessage = "审核通过";
                        result.Seaction = iccount.FirstOrDefault().Section;
                        result.Name2 = "灯面贴装";
                        result.PersonNum3 = LightMaxStandardTotal;
                        result.StandardOutput3 = LightMaxStandardOutput;
                        result.PersonNum4 = LightMinStandardTotal;
                        result.StandardOutput4 = LightMinStandardOutput;


                    }
                }
            }
            return result;
        }

        /// <summary>
        /// 平衡卡显示json模板
        /// </summary>
        /// <param name="blancevalue">传过来的平衡卡临时class 数据</param>
        /// <returns></returns>
        public List<TempBlance> BlanceModule(List<TempBlance> blancevalue)
        {
            List<TempBlance> result = new List<TempBlance>();
            var title = blancevalue.Select(c => c.Name).Distinct().ToList();//查找某个平台,型号,PCB板,工段中有几个工序描述,blancevalue已经是筛选好平台,型号,PCB板,工段

            foreach (var ProcessName in title)
            {
                TempBlance item = new TempBlance();
                var message = blancevalue.OrderByDescending(c => c.SerialNumber).Where(c => c.Name == ProcessName).FirstOrDefault();//查找某个平台,型号,PCB板,工段,工序描述中的版本号,按版本号排序,找到版本号最后的数据

                item.ModuleNeedNum = message.ModuleNeedNum;//模组需求量
                item.Id = message.Id;
                item.Name = message.Name;//工序描述
                item.StandardTotal = message.StandardTotal;//标配人数
                item.StandardCapacity = message.StandardCapacity;//标配产能
                item.StandardHourlyOutputPerCapita = message.StandardHourlyOutputPerCapita;//人均时产能
                item.ScrewMachineNum = message.ScrewMachineNum;//螺丝机数量
                item.Bottleneck = message.Bottleneck;//瓶颈
                item.BalanceRate = message.BalanceRate;//平衡数
                item.DispensMachineNum = message.DispensMachineNum;//点胶机数量

                if (IsHavingPDF(message.Id, message.Section, ProcessName))//是否有pdf
                    item.Pdf = true;
                else
                    item.Pdf = false;
                if (IsHavingIMG(message.Id, message.Section, ProcessName))//是否有jpg
                    item.Jpg = true;
                else
                    item.Jpg = false;
                result.Add(item);
            }
            return result;
        }

        /// <summary>
        /// 总表,纯看
        /// </summary>
        /// <param name="type">类型(现在没有,筛选有前端筛选)</param>
        /// <returns></returns>
        public ActionResult TotalProcess_CapacityOnlyRead(string type)
        {
            var totalList = db.Process_Capacity_Total.ToList();//查找所有平台,PCB板,类型
            JArray result = new JArray();
            #region 取值
            //smt
            var smttemp = db.Pick_And_Place.Select(c => new TempSmt { Section = c.Section, ModuleNeed = c.ModuleNeedNum2, PersonNum = c.PersonNum, CapacityPerHour = c.CapacityPerHour, Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, ProcessDescription = c.ProcessDescription }).ToList();
            //插件
            var PluginList = db.Process_Capacity_Plugin.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, PCBASingleLampNumber = c.PCBASingleLampNumber, StandardCapacity = c.PluginStandardCapacity, Name = c.Name, ModuleNeedNum = c.ModuleNeedNum2, SingleLampWorkingHours = c.SingleLampWorkingHours, StandardNumber = c.PluginStandardNumber, Id = c.Id });
            //平衡卡
            var Balance = db.ProcessBalance.Select(c => new TempBlance { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.StandardOutput, StandardTotal = c.StandardTotal, StandardHourlyOutputPerCapita = c.StandardHourlyOutputPerCapita, Id = c.Id, ModuleNeedNum = c.ModuleNeedNum2, Name = c.Title, Section = c.Section, SerialNumber = c.SerialNumber, ScrewMachineNum = c.ScrewMachineNum, BalanceRate = c.BalanceRate, Bottleneck = c.Bottleneck, DispensMachineNum = c.DispensMachineNum });
            //三防
            //var ThreeProfList = db.Process_Capacity_ThreeProf.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.ThreeProfStabdardOutput, Name = c.ThreeProfProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.ThreeProfStandardTotal, Id = c.Id });
            //喷墨
            var InkjetList = db.Process_Capacity_Inkjet.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.InkjetStabdardOutputPerHour, Name = c.InkjetProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.InkjetSuctionStandardTotal, Id = c.Id });
            //灌胶
            var GlueList = db.Process_Capacity_Glue.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.GlueStabdardOutput, Name = c.GlueProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.GlueStandardTotal, Id = c.Id });
            //气密
            var AirtightList = db.Process_Capacity_Airtight.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.AirtightStabdardOutput, Name = c.AirtightProcessName, ModuleNeedNum = c.ModuleNeedNum2, StandardNumber = c.AirtightStandardTotal, Id = c.Id });
            //老化
            var BurnList = db.Process_Capacity_Burin.Select(c => new TempBurn { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, BurinOneProcessName = c.BurinOneProcessName, BurinOneStabdardOutputPerHour = c.BurinOneStabdardOutputPerHour, BurninOneSuctionStandardTotal = c.BurninOneSuctionStandardTotal, ModuleNeedNum = c.ModuleNeedNum2, Id = c.Id, BurinTwoProcessName = c.BurinTwoProcessName, BurinTwoStabdardOutputPerHour = c.BurinTwoStabdardOutputPerHour, BurinTwoSuctionStandardTotal = c.BurinTwoSuctionStandardTotal });
            #endregion
            foreach (var totalitem in totalList)
            {
                JObject total = new JObject();
                var Platform = totalitem.Platform;
                var Type = totalitem.Type;
                var ProductPCBnumber = totalitem.ProductPCBnumber;
                decimal modeleNeedHoure = 0;
                int totalperson = 0;
                int smttotal = 0;
                decimal smtmodele = 0;
                int moduletotal = 0;
                decimal moduleneedhoure = 0;
                int packtotal = 0;
                decimal paackmodule = 0;
                JArray content = new JArray();
                //平台
                total.Add("Platform", Platform);
                //型号
                total.Add("Type", Type);
                //PCB
                total.Add("ProductPCBnumber", ProductPCBnumber);

                //箱体组装的标准产能,如果没有则传0
                var packStandardOutput = db.ProcessBalance.Count(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配") == 0 ? 0 : db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配").Min(c => c.StandardOutput);


                #region SMT
                JArray SMT = new JArray();
                //贴片
                JObject pick = new JObject();
                var jobcontinfo = smttemp.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber).Select(c => new TempSmt { Section = c.Section, ModuleNeed = c.ModuleNeed, PersonNum = c.PersonNum, CapacityPerHour = c.CapacityPerHour, ProcessDescription = c.ProcessDescription }).ToList();//根据平台,类型,PCB板查找贴片数据
                var ss = SMTvalue(jobcontinfo);//调用通用模板数据

                if (ss.Seaction != "/")//是否跳过,跳过就不赋值
                {

                    content.Add(Indexitemjobject("IC最大", ss.PersonNum, ss.StandardOutput, ss.ModuleNeed, packStandardOutput));//通用模板
                    content.Add(Indexitemjobject("IC最小", ss.PersonNum2, ss.StandardOutput2, ss.ModuleNeed, packStandardOutput));//通用模板
                    content.Add(Indexitemjobject("灯面最大", ss.PersonNum3, ss.StandardOutput3, ss.ModuleNeed, packStandardOutput));//通用模板
                    content.Add(Indexitemjobject("灯面最小", ss.PersonNum4, ss.StandardOutput4, ss.ModuleNeed, packStandardOutput));//通用模板
                    //总人数
                    totalperson = totalperson + (ss.PersonNum > ss.PersonNum2 ? ss.PersonNum2 : ss.PersonNum);
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (ss.StandardOutput < ss.StandardOutput2 ? (ss.StandardOutput == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput / ss.PersonNum / ss.ModuleNeed)) : (ss.PersonNum2 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput2 / ss.PersonNum2 / ss.ModuleNeed)));
                    //总人数
                    totalperson = totalperson + (ss.PersonNum3 > ss.PersonNum4 ? ss.PersonNum4 : ss.PersonNum3);
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (ss.StandardOutput3 < ss.StandardOutput4 ? (ss.StandardOutput3 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput3 / ss.PersonNum3 / ss.ModuleNeed)) : (ss.PersonNum4 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput4 / ss.PersonNum4 / ss.ModuleNeed)));
                    //SMT总人数
                    smttotal = smttotal + (ss.PersonNum > ss.PersonNum2 ? ss.PersonNum2 : ss.PersonNum);
                    smttotal = smttotal + (ss.PersonNum3 > ss.PersonNum4 ? ss.PersonNum4 : ss.PersonNum3);
                    //SMT单人生产模组需要总工时
                    smtmodele = smtmodele + (ss.StandardOutput < ss.StandardOutput2 ? (ss.StandardOutput == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput / ss.PersonNum / ss.ModuleNeed)) : (ss.PersonNum2 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput2 / ss.PersonNum2 / ss.ModuleNeed)));

                    smtmodele = smtmodele + (ss.StandardOutput3 < ss.StandardOutput4 ? (ss.StandardOutput3 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput3 / ss.PersonNum3 / ss.ModuleNeed)) : (ss.PersonNum4 == 0 || ss.ModuleNeed == 0 ? 0 : 1 / (ss.StandardOutput4 / ss.PersonNum4 / ss.ModuleNeed)));
                }
                pick.Add("name", "贴片");
                pick.Add("content", content);
                content = new JArray();
                //插件
                var plug = PluginList.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber).ToList();
                foreach (var plugitem in plug)
                {
                    content.Add(Indexitemjobject(plugitem.Name, plugitem.StandardNumber, plugitem.StandardCapacity, plugitem.ModuleNeedNum, packStandardOutput));
                    //总人数
                    totalperson = totalperson + plugitem.StandardNumber;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (plugitem.StandardNumber == 0 || plugitem.ModuleNeedNum == 0 ? 0 : 1 / (plugitem.StandardCapacity / plugitem.StandardNumber / plugitem.ModuleNeedNum));
                    //SMT总人数
                    smttotal = smttotal + plugitem.StandardNumber;
                    //SMT单人生产模组需要总工时
                    smtmodele = smtmodele + (plugitem.StandardNumber == 0 || plugitem.ModuleNeedNum == 0 ? 0 : 1 / (plugitem.StandardCapacity / plugitem.StandardNumber / plugitem.ModuleNeedNum));
                }
                JObject plugjobject = new JObject();
                plugjobject.Add("name", "插件");
                plugjobject.Add("content", content);
                content = new JArray();
                //后焊
                var weld = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "后焊").ToList();
                var weldvalue = BlanceModule(weld);
                foreach (var newweld in weldvalue)
                {
                    content.Add(Indexitemjobject(newweld.Name, newweld.StandardTotal, newweld.StandardCapacity, newweld.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newweld.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newweld.StandardTotal == 0 || newweld.ModuleNeedNum == 0 ? 0 : 1 / (newweld.StandardCapacity / newweld.StandardTotal / newweld.ModuleNeedNum));
                    //SMT总人数
                    smttotal = smttotal + newweld.StandardTotal;
                    //SMT单人生产模组需要总工时
                    smtmodele = smtmodele + (newweld.StandardTotal == 0 || newweld.ModuleNeedNum == 0 ? 0 : 1 / (newweld.StandardCapacity / newweld.StandardTotal / newweld.ModuleNeedNum));
                }
                JObject weldjobject = new JObject();
                weldjobject.Add("name", "后焊");
                weldjobject.Add("content", content);
                content = new JArray();
                SMT.Add(pick);//贴片
                SMT.Add(plugjobject);//插件
                SMT.Add(weldjobject);//后焊
                total.Add("SMT", SMT);//总表纯看大模块 SMT
                #endregion

                #region 模块
                JArray modlue = new JArray();
                //三防 
                var threeProf = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber&&c.Section=="三防").ToList();
                foreach (var item in threeProf)
                {
                    content.Add(Indexitemjobject(item.Name, item.StandardTotal, item.StandardCapacity, item.ModuleNeedNum, packStandardOutput));
                    //总人数
                    totalperson = totalperson + item.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (item.StandardTotal == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardTotal / item.ModuleNeedNum));

                    //模块总人数
                    moduletotal = moduletotal + item.StandardTotal;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (item.StandardTotal == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardTotal / item.ModuleNeedNum));

                }
                JObject threeProfjobject = new JObject();
                threeProfjobject.Add("name", "三防");
                threeProfjobject.Add("content", content);
                content = new JArray();
                //打底壳
                var pan = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "打底壳").ToList();
                var panvalue = BlanceModule(pan);
                foreach (var newSerialNumber in panvalue)
                {
                    ////最新一版本
                    //var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "打底壳" && c.Title == item).FirstOrDefault();

                    content.Add(Indexitemjobject(newSerialNumber.Name, newSerialNumber.StandardTotal, newSerialNumber.StandardCapacity, newSerialNumber.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newSerialNumber.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));

                    //模块总人数
                    moduletotal = moduletotal + newSerialNumber.StandardTotal;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                }
                JObject panjobject = new JObject();
                panjobject.Add("name", "打底壳");
                panjobject.Add("content", content);
                content = new JArray();

                //装磁吸安装板
                var Magnetic = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "装磁吸安装板").ToList();
                var Magneticvalue = BlanceModule(Magnetic);
                foreach (var newSerialNumber in Magnetic)
                {
                    content.Add(Indexitemjobject(newSerialNumber.Name, newSerialNumber.StandardTotal, newSerialNumber.StandardCapacity, newSerialNumber.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newSerialNumber.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                    //模块总人数
                    moduletotal = moduletotal + newSerialNumber.StandardTotal;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                }
                JObject Magneticjobject = new JObject();
                Magneticjobject.Add("name", "装磁吸安装板");
                Magneticjobject.Add("content", content);
                content = new JArray();

                //喷墨
                var Inkjet = InkjetList.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber).ToList();
                foreach (var item in Inkjet)
                {
                    content.Add(Indexitemjobject(item.Name, item.StandardNumber, item.StandardCapacity, item.ModuleNeedNum, packStandardOutput));
                    //总人数
                    totalperson = totalperson + item.StandardNumber;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                    //模块总人数
                    moduletotal = moduletotal + item.StandardNumber;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                }

                JObject Inkjetjobject = new JObject();
                Inkjetjobject.Add("name", "喷墨");
                Inkjetjobject.Add("content", content);
                content = new JArray();
                //灌胶
                var glue = GlueList.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber).ToList();
                foreach (var item in glue)
                {
                    content.Add(Indexitemjobject(item.Name, item.StandardNumber, item.StandardCapacity, item.ModuleNeedNum, packStandardOutput));
                    //总人数
                    totalperson = totalperson + item.StandardNumber;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                    //模块总人数
                    moduletotal = moduletotal + item.StandardNumber;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                }

                JObject gluejobject = new JObject();
                gluejobject.Add("name", "灌胶");
                gluejobject.Add("content", content);
                content = new JArray();
                //气密
                var airtight = AirtightList.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber).ToList();
                foreach (var item in airtight)
                {
                    content.Add(Indexitemjobject(item.Name, item.StandardNumber, item.StandardCapacity, item.ModuleNeedNum, packStandardOutput));
                    //总人数
                    totalperson = totalperson + item.StandardNumber;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                    //模块总人数
                    moduletotal = moduletotal + item.StandardNumber;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (item.StandardNumber == 0 || item.ModuleNeedNum == 0 ? 0 : 1 / (item.StandardCapacity / item.StandardNumber / item.ModuleNeedNum));
                }
                JObject airtightjobject = new JObject();
                airtightjobject.Add("name", "气密");
                airtightjobject.Add("content", content);
                content = new JArray();
                //锁面罩
                var mask = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "锁面罩").ToList();
                var maskvalue = BlanceModule(mask);
                foreach (var newSerialNumber in maskvalue)
                {

                    content.Add(Indexitemjobject(newSerialNumber.Name, newSerialNumber.StandardTotal, newSerialNumber.StandardCapacity, newSerialNumber.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newSerialNumber.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                    //模块总人数
                    moduletotal = moduletotal + newSerialNumber.StandardTotal;
                    //模块单人生产模组需要总工时
                    moduleneedhoure = moduleneedhoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                }
                JObject maskjobject = new JObject();
                maskjobject.Add("name", "锁面罩");
                maskjobject.Add("content", content);
                content = new JArray();

                modlue.Add(threeProfjobject);//三防
                modlue.Add(panjobject);//打底壳
                modlue.Add(Magneticjobject);//装磁吸
                modlue.Add(Inkjetjobject);//喷墨
                modlue.Add(gluejobject);//灌胶
                modlue.Add(airtightjobject);//气密
                modlue.Add(maskjobject);//锁面罩
                total.Add("module", modlue);//总表纯看 大模块 模块
                #endregion

                #region 组装
                JArray packing = new JArray();
                //模组装配
                var assembly = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "模组装配").ToList();
                var assemblyvalue = BlanceModule(assembly);
                foreach (var newSerialNumber in assemblyvalue)
                {

                    content.Add(Indexitemjobject(newSerialNumber.Name, newSerialNumber.StandardTotal, newSerialNumber.StandardCapacity, newSerialNumber.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newSerialNumber.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                    //组装总人数
                    packtotal = packtotal + newSerialNumber.StandardTotal;
                    //组装单人生产模组需要总工时
                    paackmodule = paackmodule + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                }
                JObject assemblyjobject = new JObject();
                assemblyjobject.Add("name", "模组装配");
                assemblyjobject.Add("content", content);
                content = new JArray();
                //老化
                var burn = db.Process_Capacity_Burin.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).FirstOrDefault();
                if (burn != null)
                {
                    content.Add(Indexitemjobject(burn.BurinOneProcessName, burn.BurninOneSuctionStandardTotal, burn.BurinOneStabdardOutputPerHour, burn.ModuleNeedNum2, packStandardOutput));
                    content.Add(Indexitemjobject(burn.BurinTwoProcessName, burn.BurinTwoSuctionStandardTotal, burn.BurinTwoStabdardOutputPerHour, burn.ModuleNeedNum2, packStandardOutput));
                    //总人数
                    totalperson = totalperson + burn.BurninOneSuctionStandardTotal + burn.BurinTwoSuctionStandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (burn.BurninOneSuctionStandardTotal == 0 || burn.ModuleNeedNum2 == 0 ? 0 : 1 / (burn.BurinOneStabdardOutputPerHour / burn.BurninOneSuctionStandardTotal / burn.ModuleNeedNum2)) + (burn.BurinTwoSuctionStandardTotal == 0 || burn.ModuleNeedNum2 == 0 ? 0 : 1 / (burn.BurinTwoStabdardOutputPerHour / burn.BurinTwoSuctionStandardTotal / burn.ModuleNeedNum2));

                    //组装总人数
                    packtotal = packtotal + burn.BurninOneSuctionStandardTotal + burn.BurinTwoSuctionStandardTotal;
                    //组装单人生产模组需要总工时
                    paackmodule = paackmodule + (burn.BurninOneSuctionStandardTotal == 0 || burn.ModuleNeedNum2 == 0 ? 0 : 1 / (burn.BurinOneStabdardOutputPerHour / burn.BurninOneSuctionStandardTotal / burn.ModuleNeedNum2)) + (burn.BurinTwoSuctionStandardTotal == 0 || burn.ModuleNeedNum2 == 0 ? 0 : 1 / (burn.BurinTwoStabdardOutputPerHour / burn.BurinTwoSuctionStandardTotal / burn.ModuleNeedNum2));
                }
                JObject burnjobject = new JObject();
                burnjobject.Add("name", "老化");
                burnjobject.Add("content", content);
                content = new JArray();
                //包装
                var pack = Balance.Where(c => c.Type == Type && c.Plafrom == Platform && c.PCB == ProductPCBnumber && c.Section == "包装").ToList();
                var packvalue = BlanceModule(pack);
                foreach (var newSerialNumber in packvalue)
                {
                    content.Add(Indexitemjobject(newSerialNumber.Name, newSerialNumber.StandardTotal, newSerialNumber.StandardCapacity, newSerialNumber.ModuleNeedNum, packStandardOutput));

                    //总人数
                    totalperson = totalperson + newSerialNumber.StandardTotal;
                    //单人生产模组需要总工时
                    modeleNeedHoure = modeleNeedHoure + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                    //组装总人数
                    packtotal = packtotal + newSerialNumber.StandardTotal;
                    //组装单人生产模组需要总工时
                    paackmodule = paackmodule + (newSerialNumber.StandardTotal == 0 || newSerialNumber.ModuleNeedNum == 0 ? 0 : 1 / (newSerialNumber.StandardCapacity / newSerialNumber.StandardTotal / newSerialNumber.ModuleNeedNum));
                }
                JObject packjobject = new JObject();
                packjobject.Add("name", "包装");
                packjobject.Add("content", content);
                packing.Add(assemblyjobject);//模组装配
                packing.Add(burnjobject);//老化
                packing.Add(packjobject);//包装
                total.Add("packing", packing);//总表大块 模组
                #endregion

                #region 三表汇总
                //单人生产每模组需求总工时
                total.Add("modeleNeedHoure", Math.Round(modeleNeedHoure, 2));
                //SMT单人生产每模组需求总工时
                total.Add("SMTmodeleNeedHoure", Math.Round(smtmodele, 2));
                //模组单人生产每模组需求总工时
                total.Add("ModulemodeleNeedHoure", Math.Round(moduleneedhoure, 2));
                //组装单人生产每模组需求总工时
                total.Add("PackagemodeleNeedHoure", Math.Round(paackmodule, 2));
                //总人数
                total.Add("totalperson", totalperson);
                //SMT总人数
                total.Add("SMTtotalperson", smttotal);
                // 模组总人数
                total.Add("Moduletotalperson", moduletotal);
                //组装总人数
                total.Add("Packagetotalperson", packtotal);
                //每小时产能（模组/h）
                total.Add("capacityperhour", modeleNeedHoure == 0 ? 0 : Math.Round(totalperson / modeleNeedHoure, 2));
                //SMT每小时产能（模组/h）
                total.Add("SMTcapacityperhour", smtmodele == 0 ? 0 : Math.Round(smttotal / smtmodele, 2));
                //模组每小时产能（模组/h）
                total.Add("Modulecapacityperhour", moduleneedhoure == 0 ? 0 : Math.Round(moduletotal / moduleneedhoure, 2));
                //包装每小时产能（模组/h）
                total.Add("Packagecapacityperhour", paackmodule == 0 ? 0 : Math.Round(packtotal / paackmodule, 2));
                #endregion

                result.Add(total);
            }
            return Content(JsonConvert.SerializeObject(result));
        }


        //index2 子级通用模板
        public JObject Indexitemjobject(string section, int StandardTotal, decimal StandardOutput, decimal modelNeedNum, decimal packStandardOutput)
        {
            JObject result = new JObject();
            if (section == "/")//是否跳过,跳过则传回/
            {
                result.Add("seaction", section);
                //标配人数
                result.Add("StandardTotal", "/");
                //标砖产能
                result.Add("StandardOutput", "/");
                //平衡
                result.Add("BalanceRate", "/");
                return result;
            }
            result.Add("seaction", section);
            //标配人数
            result.Add("StandardTotal", StandardTotal);
            //标砖产能
            result.Add("StandardOutput", StandardOutput);
            //平衡率计算 模组装配的标准产能/标准产能 * 模组需求
            decimal BalanceRate = StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / StandardOutput * modelNeedNum, 2);
            result.Add("BalanceRate", BalanceRate);
            return result;
        }

        //详细分析表
        public ActionResult Detailed(string Type, string ProductPCBnumber, string Platform)
        {
            JArray result = new JArray();
            var smt = db.Pick_And_Place.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();
            //箱体组装的标准产能
            var packStandardOutput = db.ProcessBalance.Count(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配") == 0 ? 0 : db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配").Min(c => c.StandardOutput);

            //SMT
            if (smt.Count != 0)//如果有贴片信息
            {
                if (smt.FirstOrDefault().Section == "/")//如果是跳过
                {
                    result.Add(DetailedItem("ic面贴装", 0, 0, 0, 0, true));//调用json通用模板
                    result.Add(DetailedItem("灯面贴装", 0, 0, 0, 0, true));//调用json通用模板
                }
                else
                {
                    var moduleNeed = smt.FirstOrDefault().ModuleNeedNum2;//贴片模组需求数
                    if (smt.Count(c => c.ProcessDescription == "IC面贴装") != 0)//如果贴片信息中含有IC面贴装数据,没有则不赋值
                    {
                        var icMaxStandardTotal = smt.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.PersonNum);//IC面贴装最大标配人数
                        var icMaxStandardOutput = smt.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.CapacityPerHour);//IC面贴装最大标准产能
                        var icMinStandardTotal = smt.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.PersonNum);//ic面最小标配人数
                        var icMinStandardOutput = smt.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.CapacityPerHour);//IC面最小标准产能
                        result.Add(DetailedItem("IC最大", icMaxStandardTotal, icMaxStandardOutput, moduleNeed, packStandardOutput, false));//调用通用模板
                        result.Add(DetailedItem("IC最小", icMinStandardTotal, icMinStandardOutput, moduleNeed, packStandardOutput, false));//调用通用模板
                    }
                    if (smt.Count(c => c.ProcessDescription == "灯面贴装") != 0)
                    {
                        var lineMaxStandardTotal = smt.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.PersonNum);//灯面最大标配人数
                        var lineMaxStandardOutput = smt.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.CapacityPerHour);//灯面最大标准产能
                        var lineMinStandardTotal = smt.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.PersonNum);//灯面最小标配人数
                        var lineMinStandardOutput = smt.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.CapacityPerHour);//灯面最小标准产能
                        result.Add(DetailedItem("灯面最大", lineMaxStandardTotal, lineMaxStandardOutput, moduleNeed, packStandardOutput, false));//调用通用模板
                        result.Add(DetailedItem("灯面最小", lineMinStandardTotal, lineMinStandardOutput, moduleNeed, packStandardOutput, false));//调用通用模板
                    }

                }
            }
            //插件 
            var plug = db.Process_Capacity_Plugin.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();//根据类型,PCB板,平台查找插件数据
            foreach (var item in plug)//循环得到的数据
            {
                if (item.Name == "/")//如果是跳过,传0
                {
                    result.Add(DetailedItem("插件", 0, 0, 0, 0, true));
                    break;
                }
                else//否则传值
                {
                    result.Add(DetailedItem(item.Name, item.PluginStandardNumber, item.PluginStandardCapacity, item.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //后焊
            var weld = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "后焊").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找后焊数据
            foreach (var item in weld)
            {
                if (item == "/")//如果跳过传0
                {
                    result.Add(DetailedItem("后焊", 0, 0, 0, 0, true));
                    break;
                }
                //最新一版本,只有 上传excel 文件的工段才需要分版本
                var newweld = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "后焊" && c.Title == item).FirstOrDefault();
                //调用模板 
                result.Add(DetailedItem(newweld.Title, newweld.StandardTotal, newweld.StandardOutput, newweld.ModuleNeedNum2, packStandardOutput, false));
            }
            //三防
            var threeProf = db.Process_Capacity_ThreeProf.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();//根据类型,PCB板,平台查找三防数据
            foreach (var item in threeProf)
            {
                if (item.ThreeProfProcessName == "/")//如果跳过
                    result.Add(DetailedItem("三防", 0, 0, 0, 0, true));
                else//调用模板
                {
                    result.Add(DetailedItem(item.ThreeProfProcessName, item.ThreeProfStandardTotal, item.ThreeProfStabdardOutput, item.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //打底壳
            var pan = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "打底壳").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找打底壳数据
            foreach (var item in pan)
            {
                if (item == "/")//如果跳过
                    result.Add(DetailedItem("打底壳", 0, 0, 0, 0, true));
                else
                {
                    //最新一版本只有 上传excel 文件的工段才需要分版本
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "打底壳" && c.Title == item).FirstOrDefault();
                    //调用模板
                    result.Add(DetailedItem(newSerialNumber.Title, newSerialNumber.StandardTotal, newSerialNumber.StandardOutput, newSerialNumber.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //装磁吸安装板
            var Magnetic = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "装磁吸安装板").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找装磁吸数据
            foreach (var item in Magnetic)
            {
                if (item == "/")//如果跳过 
                    result.Add(DetailedItem("装磁吸安装板", 0, 0, 0, 0, true));
                else
                {
                    //最新一版本 上传excel 文件的工段才需要分版本
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "装磁吸安装板" && c.Title == item).FirstOrDefault();
                    //调用模板
                    result.Add(DetailedItem(newSerialNumber.Title, newSerialNumber.StandardTotal, newSerialNumber.StandardOutput, newSerialNumber.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //喷墨
            var Inkjet = db.Process_Capacity_Inkjet.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据类型,PCB板,平台查找喷墨数据
            foreach (var item in Inkjet)
            {
                if (item.InkjetProcessName == "/")//如果跳过
                    result.Add(DetailedItem("喷墨", 0, 0, 0, 0, true));
                else//调用模板
                {
                    result.Add(DetailedItem(item.InkjetProcessName, item.InkjetSuctionStandardTotal, item.InkjetStabdardOutputPerHour, item.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //灌胶
            var glue = db.Process_Capacity_Glue.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据类型,PCB板,平台查找灌胶数据
            foreach (var item in glue)
            {
                if (item.GlueProcessName == "/")//如果跳过 
                    result.Add(DetailedItem("灌胶", 0, 0, 0, 0, true));
                else//调用模板
                {
                    result.Add(DetailedItem(item.GlueProcessName, item.GlueStandardTotal, item.GlueStabdardOutput, item.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //气密
            var airtight = db.Process_Capacity_Airtight.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据类型,PCB板,平台查找气密数据
            foreach (var item in airtight)
            {
                if (item.AirtightProcessName == "/")//如果跳过 
                    result.Add(DetailedItem("气密", 0, 0, 0, 0, true));
                else//调用模板
                {
                    result.Add(DetailedItem(item.AirtightProcessName, item.AirtightStandardTotal, item.AirtightStabdardOutput, item.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //锁面罩
            var mask = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "锁面罩").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找锁面罩数据
            foreach (var item in mask)
            {
                if (item == "/")//如果跳过 
                    result.Add(DetailedItem("锁面罩", 0, 0, 0, 0, true));
                else
                {
                    //最新一版本 上传excel 文件的工段才需要分版本
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "锁面罩" && c.Title == item).FirstOrDefault();
                    //调用模板
                    result.Add(DetailedItem(newSerialNumber.Title, newSerialNumber.StandardTotal, newSerialNumber.StandardOutput, newSerialNumber.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //模组装配
            var assembly = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找模组装配数据
            foreach (var item in assembly)
            {
                if (item == "/")//如果跳过 
                    result.Add(DetailedItem("模组装配", 0, 0, 0, 0, true));
                else
                {
                    //最新一版本 上传excel 文件的工段才需要分版本
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "模组装配" && c.Title == item).FirstOrDefault();
                    //调用模板
                    result.Add(DetailedItem(newSerialNumber.Title, newSerialNumber.StandardTotal, newSerialNumber.StandardOutput, newSerialNumber.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //老化
            var burn = db.Process_Capacity_Burin.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).FirstOrDefault();//根据类型,PCB板,平台查找老化数据
            if (burn != null)
            {
                if (burn.BurinOneProcessName == "/")//老化1如果跳过 
                {
                    result.Add(DetailedItem("拼屏", 0, 0, 0, 0, true));
                }
                else//调用模板
                {
                    result.Add(DetailedItem(burn.BurinOneProcessName, burn.BurninOneSuctionStandardTotal, burn.BurinOneStabdardOutputPerHour, burn.ModuleNeedNum2, packStandardOutput, false));
                }
                if (burn.BurinTwoProcessName == "/")//老化2如果跳过 
                {
                    result.Add(DetailedItem("拆屏", 0, 0, 0, 0, true));
                }
                else//调用模板
                {
                    result.Add(DetailedItem(burn.BurinTwoProcessName, burn.BurinTwoSuctionStandardTotal, burn.BurinTwoStabdardOutputPerHour, burn.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            //包装
            var pack = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "包装").Select(c => c.Title).Distinct().ToList();//根据类型,PCB板,平台查找包装数据
            foreach (var item in pack)
            {
                if (item == "/")//如果跳过 
                    result.Add(DetailedItem("包装", 0, 0, 0, 0, true));
                else
                {
                    //最新一版本 上传excel 文件的工段才需要分版本
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "包装" && c.Title == item).FirstOrDefault();
                    //调用模板
                    result.Add(DetailedItem(newSerialNumber.Title, newSerialNumber.StandardTotal, newSerialNumber.StandardOutput, newSerialNumber.ModuleNeedNum2, packStandardOutput, false));
                }
            }
            return Content(JsonConvert.SerializeObject(result));
        }
        //详细分析表 子级通用模板
        public JObject DetailedItem(string name, int StandardTotal, decimal StandardOutput, decimal modelNeedNum, decimal packStandardOutput, bool skip)
        {
            JObject result = new JObject();
            if (skip)// 是跳过,传/
            {
                //描述
                result.Add("name", name);
                //标准人数
                result.Add("StandardTotal", "/");
                //标准产能
                result.Add("StandardOutput", "/");
                //人均产能
                result.Add("StandardOutputForOne", "/");
                //模组需求
                result.Add("ModelNeed", "/");
                //转换模组人均产能
                result.Add("ModelNeedForOne", "/");
                //单人每模组运算时间 
                result.Add("ModelNeedTimeForOne", "/");
                //平衡率
                result.Add("BalanceRate", "/");

                return result;
            }
            //描述
            result.Add("name", name);
            //标准人数
            result.Add("StandardTotal", StandardTotal);
            //标准产能
            result.Add("StandardOutput", StandardOutput);
            //人均产能=标准产能/标准人数
            var StandardOutputForOne = StandardTotal == 0 ? 0 : StandardOutput / StandardTotal;
            result.Add("StandardOutputForOne", Math.Round(StandardOutputForOne, 2));
            //模组需求
            result.Add("ModelNeed", modelNeedNum);
            //转换模组人均产能=人均产能/模组需求
            var ModelNeedForOne = modelNeedNum == 0 ? 0 : StandardOutputForOne / modelNeedNum;
            result.Add("ModelNeedForOne", Math.Round(ModelNeedForOne, 2));
            //单人每模组运算时间 =1/转换模组人均产能
            result.Add("ModelNeedTimeForOne", ModelNeedForOne == 0 ? 0 : 1 / ModelNeedForOne);
            //平衡率=箱体标准产能/标准产能*模组需求
            decimal BalanceRate = StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / StandardOutput * modelNeedNum, 2);
            result.Add("BalanceRate", BalanceRate);

            return result;
        }

        /// <summary>
        /// 柱状图数据json
        /// </summary>
        /// <param name="Type">类型</param>
        /// <param name="ProductPCBnumber">PCB板</param>
        /// <param name="Platform">平台</param>
        /// <returns></returns>
        public ActionResult Icon(string Type, string ProductPCBnumber, string Platform)
        {
            JArray result = new JArray();
            JObject total = new JObject();
            var smt = db.Pick_And_Place.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();//查找符合筛选条件的贴片数据
            //箱体组装的标准产能
            var packStandardOutput = db.ProcessBalance.Count(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配") == 0 ? 0 : db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配").Min(c => c.StandardOutput);

            //SMT
            if (smt.Count != 0)//贴片数据查找不为0,没有数据则跳过
            {
                if (smt.FirstOrDefault().Section == "/")//是否跳过,跳过平衡率显示0
                {
                    total.Add("name", "贴装");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    var moduleNeed = smt.FirstOrDefault().ModuleNeedNum2;//模组需求
                    if (smt.Count(c => c.ProcessDescription == "IC面贴装") != 0)//判断贴片数据是否含有IC面贴装数据,如果没有则不传回数据
                    {
                        var icMaxStandardOutput = smt.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.CapacityPerHour);//IC面贴装最大标准产能
                        var icMinStandardOutput = smt.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.CapacityPerHour);//IC面贴装最小标准产能
                        decimal icmaxBalanceRate = icMaxStandardOutput == 0 ? 0 : Math.Round(packStandardOutput / icMaxStandardOutput * moduleNeed, 2);//IC面贴装最大平衡率
                        decimal icminBalanceRate = icMinStandardOutput == 0 ? 0 : Math.Round(packStandardOutput / icMinStandardOutput * moduleNeed, 2);//IC面贴装最小平衡率
                        total.Add("name", "IC最大");
                        total.Add("BalanceRate", icmaxBalanceRate);
                        result.Add(total);
                        total = new JObject();

                        total.Add("name", "IC最小");
                        total.Add("BalanceRate", icminBalanceRate);
                        result.Add(total);
                        total = new JObject();
                    }
                    if (smt.Count(c => c.ProcessDescription == "灯面贴装") != 0)//判断贴片数据是否含有灯面贴装数据,如果没有则不传回数据
                    {
                        var lineMaxStandardOutput = smt.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.CapacityPerHour);//灯面贴装最大标准产能
                        var lineMinStandardOutput = smt.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.CapacityPerHour);//灯面贴装最小标准产能

                        decimal linemaxBalanceRate = lineMaxStandardOutput == 0 ? 0 : Math.Round(packStandardOutput / lineMaxStandardOutput * moduleNeed, 2);//灯面最大平衡率
                        decimal lineminBalanceRate = lineMinStandardOutput == 0 ? 0 : Math.Round(packStandardOutput / lineMinStandardOutput * moduleNeed, 2);//灯面最小平衡率
                        total.Add("name", "灯面最大");
                        total.Add("BalanceRate", linemaxBalanceRate);
                        result.Add(total);
                        total = new JObject();

                        total.Add("name", "灯面最小");
                        total.Add("BalanceRate", lineminBalanceRate);
                        result.Add(total);
                        total = new JObject();
                    }

                }
            }
            //插件 
            var plug = db.Process_Capacity_Plugin.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();//根据平台,类型PCB板查找插件数据
            foreach (var item in plug)
            {
                if (item.Name == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "插件");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal plugBalanceRate = item.PluginStandardCapacity == 0 ? 0 : Math.Round(packStandardOutput / item.PluginStandardCapacity * item.ModuleNeedNum2, 2);//计算插件平衡率

                    total.Add("name", item.Name);
                    total.Add("BalanceRate", plugBalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //后焊
            var weld = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "后焊").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找后焊数据
            foreach (var item in weld)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "后焊");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newweld = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "后焊" && c.Title == item).FirstOrDefault();

                    decimal BalanceRate = newweld.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newweld.StandardOutput * newweld.ModuleNeedNum2, 2);//计算后焊平衡率

                    total.Add("name", newweld.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //三防
            var threeProf = db.Process_Capacity_ThreeProf.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform).ToList();//根据平台,类型PCB板查找三防数据
            foreach (var item in threeProf)
            {
                if (item.ThreeProfProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "三防");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = item.ThreeProfStabdardOutput == 0 ? 0 : Math.Round(packStandardOutput / item.ThreeProfStabdardOutput * item.ModuleNeedNum2, 2);//计算三防平衡率

                    total.Add("name", item.ThreeProfProcessName);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //打底壳
            var pan = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "打底壳").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找打底壳数据
            foreach (var item in pan)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "打底壳");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "打底壳" && c.Title == item).FirstOrDefault();

                    decimal BalanceRate = newSerialNumber.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newSerialNumber.StandardOutput * newSerialNumber.ModuleNeedNum2, 2);//计算打底壳平衡率

                    total.Add("name", newSerialNumber.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //装磁吸安装板
            var Magnetic = db.ProcessBalance.Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "装磁吸安装板").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找装磁吸数据
            foreach (var item in Magnetic)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "装磁吸安装板");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "装磁吸安装板" && c.Title == item).FirstOrDefault();

                    decimal BalanceRate = newSerialNumber.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newSerialNumber.StandardOutput * newSerialNumber.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", newSerialNumber.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //喷墨
            var Inkjet = db.Process_Capacity_Inkjet.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据平台,类型PCB板查找喷墨数据
            foreach (var item in Inkjet)
            {
                if (item.InkjetProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "喷墨");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = item.InkjetStabdardOutputPerHour == 0 ? 0 : Math.Round(packStandardOutput / item.InkjetStabdardOutputPerHour * item.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", item.InkjetProcessName);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //灌胶
            var glue = db.Process_Capacity_Glue.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据平台,类型PCB板查找灌胶数据
            foreach (var item in glue)
            {
                if (item.GlueProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "灌胶");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = item.GlueStabdardOutput == 0 ? 0 : Math.Round(packStandardOutput / item.GlueStabdardOutput * item.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", item.GlueProcessName);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //气密
            var airtight = db.Process_Capacity_Airtight.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).ToList();//根据平台,类型PCB板查找气密数据
            foreach (var item in airtight)
            {
                if (item.AirtightProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "气密");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = item.AirtightStabdardOutput == 0 ? 0 : Math.Round(packStandardOutput / item.AirtightStabdardOutput * item.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", item.AirtightProcessName);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //锁面罩
            var mask = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "锁面罩").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找锁面罩数据
            foreach (var item in mask)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "锁面罩");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "锁面罩" && c.Title == item).FirstOrDefault();

                    decimal BalanceRate = newSerialNumber.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newSerialNumber.StandardOutput * newSerialNumber.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", newSerialNumber.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //模组装配
            var assembly = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "模组装配").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找模组装配数据
            foreach (var item in assembly)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "模组装配");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "模组装配" && c.Title == item).FirstOrDefault();
                    decimal BalanceRate = newSerialNumber.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newSerialNumber.StandardOutput * newSerialNumber.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", newSerialNumber.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            //老化
            var burn = db.Process_Capacity_Burin.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber).FirstOrDefault();//根据平台,类型PCB板查找老化数据
            if (burn != null)
            {
                if (burn.BurinOneProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "拼屏");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = burn.BurinOneStabdardOutputPerHour == 0 ? 0 : Math.Round(packStandardOutput / burn.BurinOneStabdardOutputPerHour * burn.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", "拼屏");
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();


                }
                if (burn.BurinTwoProcessName == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "拆屏");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    decimal BalanceRate = burn.BurinTwoStabdardOutputPerHour == 0 ? 0 : Math.Round(packStandardOutput / burn.BurinTwoStabdardOutputPerHour * burn.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", "拆屏");
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();

                }
            }
            //包装
            var pack = db.ProcessBalance.Where(c => c.Type == Type && c.Platform == Platform && c.ProductPCBnumber == ProductPCBnumber && c.Section == "包装").Select(c => c.Title).Distinct().ToList();//根据平台,类型PCB板查找包装数据
            foreach (var item in pack)
            {
                if (item == "/")//如果是跳过,平衡率为0
                {
                    total.Add("name", "包装");
                    total.Add("BalanceRate", 0);
                    result.Add(total);
                    total = new JObject();
                }
                else
                {
                    //最新一版本 上传excel表格的工段都有版本之分
                    var newSerialNumber = db.ProcessBalance.OrderByDescending(c => c.SerialNumber).Where(c => c.Type == Type && c.ProductPCBnumber == ProductPCBnumber && c.Platform == Platform && c.Section == "包装" && c.Title == item).FirstOrDefault();
                    decimal BalanceRate = newSerialNumber.StandardOutput == 0 ? 0 : Math.Round(packStandardOutput / newSerialNumber.StandardOutput * newSerialNumber.ModuleNeedNum2, 2);//计算平衡率

                    total.Add("name", newSerialNumber.Title);
                    total.Add("BalanceRate", BalanceRate);
                    result.Add(total);
                    total = new JObject();
                }
            }
            return Content(JsonConvert.SerializeObject(result));
        }
        //平台下拉列表(待定不要)
        //public ActionResult PlatfromList()
        //{
        //    var orders = db.Process_Capacity_Total.Select(m => m.Platform).Distinct().ToList();    //获取平台清单
        //    JArray result = new JArray();
        //    foreach (var item in orders)
        //    {
        //        JObject List = new JObject();
        //        List.Add("value", item);

        //        result.Add(List);
        //    }
        //    return Content(JsonConvert.SerializeObject(result));
        //}
        //型号下拉列表
        public ActionResult TypeList()
        {
            var orders = db.Process_Capacity_Total.Select(m => m.Type).Distinct().ToList();    //获取型号清单
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //总表输入平台显示型号列表(待定不要)
        //public ActionResult DisplayTypeFromPlatfrom(string platfrom)
        //{
        //    var typeList = new List<string>();
        //    if (string.IsNullOrEmpty(platfrom))
        //    {
        //        typeList = db.Process_Capacity_Total.Select(m => m.Type).Distinct().ToList();
        //    }
        //    else
        //    {
        //        typeList = db.Process_Capacity_Total.Where(c => c.Platform == platfrom).Select(c => c.Type).Distinct().ToList();
        //    }
        //    JArray result = new JArray();
        //    foreach (var item in typeList)
        //    {
        //        JObject List = new JObject();
        //        List.Add("value", item);

        //        result.Add(List);
        //    }
        //    return Content(JsonConvert.SerializeObject(result));
        //}

        //总表输入型号显示平台列表
        public ActionResult DisplayPlatfromFromType(string type)
        {
            var platfromList = new List<string>();
            if (string.IsNullOrEmpty(type))//如果传过来的类型为空,则查找总表所有的平台
            {
                platfromList = db.Process_Capacity_Total.Select(m => m.Platform).Distinct().ToList();

            }
            else//根据选择的类型查找对应的平台
            {
                platfromList = db.Process_Capacity_Total.Where(c => c.Type.Contains(type)).Select(c => c.Platform).Distinct().ToList();
            }
            JArray result = new JArray();
            foreach (var item in platfromList)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        /// <summary>
        /// 审核未审核列表(暂时没用)
        /// </summary>
        /// <param name="statu">状态选择(审核,或未审核)</param>
        /// <returns></returns>
        public ActionResult DisplayStatuMessage(string statu)
        {
            JArray result = new JArray();
            #region 查找最后一个版本的集合
            List<Pick_And_Place> pcik = com.GetNewNumberPickInfo().Where(c => c.FileName != "/").ToList();//获取最后一个版本的贴片表集合,剔除掉跳过的不分
            List<ProcessBalance> balances = com.GetNewNumberBalanceInfo().Where(c => c.Title != "/").ToList(); //获取最后一个版本的平衡表集合,剔除条跳过不分
            #endregion
            switch (statu)
            {
                case "未审核":
                    var pickNotExaminan = pcik.Where(c => c.ExaminanTime == null && string.IsNullOrEmpty(c.ExaminanPeople)).ToList();//查找未审核的贴片数据
                    var blanceNotExaminan = balances.Where(c => c.ExaminanTime == null && string.IsNullOrEmpty(c.ExaminanPeople)).ToList();//查找未审核的平衡表数据
                    result = DisplayStatuMessageResult(pickNotExaminan, blanceNotExaminan); //通用模板,将数据整理返回出去
                    break;
                case "审核未通过":
                    var pickExaminanNotPass = pcik.Where(c => c.ExaminanTime != null && c.IsPassExaminan == false).ToList();//查找审核未通过的贴片数据
                    var blanceExaminanNotPass = balances.Where(c => c.ExaminanTime != null && c.IsPassExaminan == false).ToList();//查找审核未通过的平衡表数据
                    result = DisplayStatuMessageResult(pickExaminanNotPass, blanceExaminanNotPass);
                    break;
                case "审核通过":
                    var pickExaminanPass = pcik.Where(c => c.ExaminanTime != null && c.IsPassExaminan == true).ToList();//查找审核通过的贴片数据
                    var blanceExaminanPass = balances.Where(c => c.ExaminanTime != null && c.IsPassExaminan == true).ToList();//查找审核通过的平衡表数据
                    result = DisplayStatuMessageResult(pickExaminanPass, blanceExaminanPass);
                    break;
                case "未批准":
                    var pickNotApprover = pcik.Where(c => c.ApproverTime == null && string.IsNullOrEmpty(c.ApproverPeople)).ToList();//查找未批准的贴片数据
                    var blanceNotApprover = balances.Where(c => c.ApproverTime == null && string.IsNullOrEmpty(c.ApproverPeople)).ToList();//查找未批准的平衡表数据
                    result = DisplayStatuMessageResult(pickNotApprover, blanceNotApprover);
                    break;
                case "批准未通过":
                    var pickApproverNotPass = pcik.Where(c => c.ApproverTime != null && c.IsPassApprover == false).ToList();//查找批准未通过的贴片数据
                    var blanceApproverNotPass = balances.Where(c => c.ApproverTime != null && c.IsPassApprover == false).ToList();//查找批准未通过的平衡表数据
                    result = DisplayStatuMessageResult(pickApproverNotPass, blanceApproverNotPass);
                    break;
                case "批准通过":
                    var pickApproverPass = pcik.Where(c => c.ApproverTime != null && c.IsPassApprover == true).ToList();//查找批准通过的贴片数据
                    var blanceApproverPass = balances.Where(c => c.ApproverTime != null && c.IsPassApprover == true).ToList();//查找未审核的平衡表数据
                    result = DisplayStatuMessageResult(pickApproverPass, blanceApproverPass);
                    break;

            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //审核列表 子级通用模板
        public JArray DisplayStatuMessageResult(List<Pick_And_Place> pickanplan, List<ProcessBalance> processes)
        {
            JArray result = new JArray();
            var groupby = pickanplan.GroupBy(c => new { c.Type, c.Platform, c.ProductPCBnumber }).ToList();//对贴片数据进行分组
            var grouby2 = processes.GroupBy(c => new { c.Type, c.Platform, c.ProductPCBnumber }).ToList();//对平衡表数据进行分组
            foreach (var item in groupby)//循环贴片分组
            {
                JObject info = new JObject();
                var id = db.Process_Capacity_Total.Where(c => c.Type == item.Key.Type && c.Platform == item.Key.Platform && c.ProductPCBnumber == item.Key.ProductPCBnumber).Select(c => c.Id).FirstOrDefault();//获得每个分组对应的id 
                info.Add("id", id);
                info.Add("Type", item.Key.Type);
                info.Add("Platform", item.Key.Platform);
                info.Add("ProductPCBnumber", item.Key.ProductPCBnumber);
                info.Add("Section", "SMT");
                info.Add("Title", "贴装产能一览表");
                result.Add(info);
            }
            foreach (var item in grouby2)//循环平衡表分组
            {
                var message = processes.Where(c => c.Type == item.Key.Type && c.ProductPCBnumber == item.Key.ProductPCBnumber && c.Platform == item.Key.Platform).ToList();//获得每个分组的信息
                var groubymessage = message.GroupBy(c => new { c.Section, c.Title }).ToList();//根据上一个得到的信息,在根据工段和工序描述分组

                foreach (var section in groubymessage)//循环分组
                {
                    JObject info = new JObject();
                    var id = db.Process_Capacity_Total.Where(c => c.Type == item.Key.Type && c.Platform == item.Key.Platform && c.ProductPCBnumber == item.Key.ProductPCBnumber).Select(c => c.Id).FirstOrDefault();//找到每个分组的id
                    info.Add("id", id);
                    info.Add("Type", item.Key.Type);
                    info.Add("Platform", item.Key.Platform);
                    info.Add("ProductPCBnumber", item.Key.ProductPCBnumber);
                    info.Add("Section", section.Key.Section);
                    info.Add("Title", section.Key.Title);
                    result.Add(info);
                }
            }
            return result;
        }
        
       
        //public void SetModuleNeed(int id, string name, bool ismodule, decimal smtmodeulneed, decimal injekmodeulneed, decimal aftermodeulneed, decimal threemodeulneed, decimal bootnmodeulneed, decimal magneticmodeulneed, decimal pluginmodeulneed, decimal gluemodeulneed, decimal airtightmodeulneed, decimal lockmodeulneed, decimal modeulneed, decimal burnmodeulneed, decimal packmodeulneed)
        //{
        //    var blance = db.ProcessBalance.Find(id);//读取值
        //    //填写工序描述
        //    blance.ProcessDescription = name;
        //    if (ismodule)//如果是上传模组装配.则需要填写模组需求数
        //    {
        //        //填入模组号
        //        blance.SMTModuleNeedNum = smtmodeulneed;//贴片模组
        //        blance.PluginModuleNeedNum = pluginmodeulneed;//插件模组
        //        blance.AfterModuleNeedNum = aftermodeulneed;//后焊模组
        //        blance.ThreeModuleNeedNum = threemodeulneed;//三防模组
        //        blance.BottnModuleNeedNum = bootnmodeulneed;//打底壳模组
        //        blance.MagneticModuleNeedNum = magneticmodeulneed;//装磁吸模组
        //        blance.InjekModuleNeedNum = injekmodeulneed;//喷墨模组
        //        blance.GuleModuleNeedNum = gluemodeulneed;//灌胶模组
        //        blance.AfterModuleNeedNum = aftermodeulneed;//气密模组
        //        blance.LockMasModuleNeedNum = lockmodeulneed;//锁面罩模组
        //        blance.ModuleNeedNum2 = modeulneed;//模组装配模组
        //        blance.BuriInModuleNeedNum = burnmodeulneed;//老化模组
        //        blance.PackModuleNeedNum = packmodeulneed;//包装模组
        //    }
        //    db.Entry(blance).State = EntityState.Modified;
        //    db.SaveChanges();
        //}
        /// <summary>
        /// 显示不同模组的每小时产能
        /// </summary>
        /// <returns></returns>
        public ActionResult GetInfoByModule()
        {
            JArray totalresult = new JArray();
            var total = db.Process_Capacity_Total.ToList();//找到所有的平台,型号,PCB板 
            #region 取值
            //SMT
            var SmtList = db.Pick_And_Place.Select(c => new TempSmt { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, PersonNum = c.PersonNum, CapacityPerHour = c.CapacityPerHour }).ToList();
            //插件
            var PluginList = db.Process_Capacity_Plugin.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.PluginStandardCapacity, StandardNumber = c.PluginStandardNumber });
            //平衡卡
            var Balance = db.ProcessBalance.Select(c => new TempBlance { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.StandardOutput, StandardTotal = c.StandardTotal, Section = c.Section, SerialNumber = c.SerialNumber, Name = c.Title });
            //三防
            var ThreeProfList = db.Process_Capacity_ThreeProf.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.ThreeProfStabdardOutput, StandardNumber = c.ThreeProfStandardTotal });
            //喷墨
            var InkjetList = db.Process_Capacity_Inkjet.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.InkjetStabdardOutputPerHour, StandardNumber = c.InkjetSuctionStandardTotal });
            //灌胶
            var GlueList = db.Process_Capacity_Glue.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.GlueStabdardOutput, StandardNumber = c.GlueStandardTotal });
            //气密
            var AirtightList = db.Process_Capacity_Airtight.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.AirtightStabdardOutput, StandardNumber = c.AirtightStandardTotal });
            //老化
            var BurnList = db.Process_Capacity_Burin.Select(c => new TempBurn { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, BurinOneStabdardOutputPerHour = c.BurinOneStabdardOutputPerHour, BurninOneSuctionStandardTotal = c.BurninOneSuctionStandardTotal, BurinTwoStabdardOutputPerHour = c.BurinTwoStabdardOutputPerHour, BurinTwoSuctionStandardTotal = c.BurinTwoSuctionStandardTotal });
            #endregion
            foreach (var item in total)
            {
                JObject result = new JObject();
                JArray list = new JArray();
                result.Add("platfrom", item.Platform);//平台
                result.Add("type", item.Type);//型号
                result.Add("PCB", item.ProductPCBnumber);//pcb板
                result.Add("ModuleUnits", 1);//模组单位
                #region 取值所需人数计算,需要拿到改平台的所有工段的标准人数
                //smt
                var smt = SmtList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.CapacityPerHour, c.PersonNum }).ToList();
                //插件
                var plugin = PluginList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //后焊
                var aftertotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "后焊").ToList();
                var after = GetNewSerinum(aftertotal);
                //三防
                var threetotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "三防").ToList();
                var three = GetNewSerinum(threetotal);
                //打底壳
                var bottontotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "打底壳").ToList();
                var botton = GetNewSerinum(bottontotal);
                //装磁吸
                var magnetitotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "装磁吸板").ToList();
                var magneti = GetNewSerinum(magnetitotal);
                //喷墨
                var Inkjet = InkjetList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //灌胶
                var glue = GlueList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //气密
                var airtight = AirtightList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //锁面罩
                var lockmastotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "锁面罩").ToList();
                var lockmas = GetNewSerinum(lockmastotal);
                //模组装配
                var moduletotal = db.ProcessBalance.Where(c => c.Section == "模组装配" && c.Type == item.Type && c.Platform == item.Platform && c.ProductPCBnumber == item.ProductPCBnumber).ToList();
                var module = new List<ProcessBalance>();
                var title = moduletotal.Select(c => c.Title).Distinct();//查找数据里面excel文件的文件名,文件名相同归为是同一份文件的不同版本
                foreach (var titleitem in title)//循环文件名
                {
                    var temp = moduletotal.Where(c => c.Title == titleitem).Max(c => c.SerialNumber);//根据文件名,找到该版本的最大版本号
                    var resultitem = moduletotal.Where(c => c.Title == titleitem && c.SerialNumber == temp).FirstOrDefault();//根据文件名和版本号,找到最后一个版本的数据信息
                    module.Add(resultitem);//返回数据信息
                }
                //老化
                var burnin = BurnList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).ToList();
                //包装
                var packingtotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "包装").ToList();
                var packing = GetNewSerinum(packingtotal);
                #endregion
                JArray content = new JArray();
                foreach (var moduleitem in module)//循环模组装配
                {
                    JObject jobjectitem = new JObject();
                    list.Add(moduleitem.ProcessDescription);
                    jobjectitem.Add("moduleName", moduleitem.ProcessDescription);//模组名称
                    var totalpersonNum = 0;//总人数
                    decimal totalWarkHours = 0m;
                    #region 循环各个工段的数据,拿到人数集合,和各个工段的单人模组需求总时(1/(标准产能/人数/模组需求))
                    //smt
                    smt.ForEach(c => { totalpersonNum = totalpersonNum + c.PersonNum; totalWarkHours = totalWarkHours + (c.PersonNum==0|| moduleitem.SMTModuleNeedNum==0?0:(1 / (c.CapacityPerHour / c.PersonNum / moduleitem.SMTModuleNeedNum))); });
                    //插件
                    plugin.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardNumber; totalWarkHours = totalWarkHours + (c.StandardNumber == 0 || moduleitem.PluginModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.PluginModuleNeedNum))); });
                    //后焊
                    after.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.AfterModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.AfterModuleNeedNum))); });
                    //三放
                    three.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.ThreeModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.ThreeModuleNeedNum))); });
                    //打底壳
                    botton.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.BottnModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.BottnModuleNeedNum))); });
                    //装磁吸
                    magneti.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.MagneticModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.MagneticModuleNeedNum))); });
                    //喷墨
                    Inkjet.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardNumber; totalWarkHours = totalWarkHours + (c.StandardNumber == 0 || moduleitem.InjekModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.InjekModuleNeedNum))); });
                    //灌胶
                    glue.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardNumber; totalWarkHours = totalWarkHours + (c.StandardNumber == 0 || moduleitem.GuleModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.GuleModuleNeedNum))); });
                    //气密
                    airtight.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardNumber; totalWarkHours = totalWarkHours + (c.StandardNumber == 0 || moduleitem.AirtightModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.AirtightModuleNeedNum))); });
                    //锁面罩
                    lockmas.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.LockMasModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.LockMasModuleNeedNum))); });
                    //模组装配
                    totalpersonNum = totalpersonNum + moduleitem.StandardTotal;
                    totalWarkHours = totalWarkHours + (moduleitem.StandardTotal == 0 || moduleitem.ModuleNeedNum2 == 0 ? 0 : (1 / (moduleitem.StandardOutput / moduleitem.StandardTotal / moduleitem.ModuleNeedNum2)));
                    //老化
                    burnin.ForEach(c => { totalpersonNum = totalpersonNum + c.BurninOneSuctionStandardTotal; totalWarkHours = totalWarkHours + (c.BurninOneSuctionStandardTotal == 0 || moduleitem.BuriInModuleNeedNum == 0 ? 0 : (1 / (c.BurinOneStabdardOutputPerHour / c.BurninOneSuctionStandardTotal / moduleitem.BuriInModuleNeedNum))); totalpersonNum = totalpersonNum + c.BurinTwoSuctionStandardTotal; totalWarkHours = totalWarkHours + (c.BurinTwoSuctionStandardTotal == 0 || moduleitem.BuriInModuleNeedNum == 0 ? 0 : (1 / (c.BurinTwoStabdardOutputPerHour / c.BurinTwoSuctionStandardTotal / moduleitem.BuriInModuleNeedNum))); });
                    //包装
                    packing.ForEach(c => { totalpersonNum = totalpersonNum + c.StandardTotal; totalWarkHours = totalWarkHours + (c.StandardTotal == 0 || moduleitem.PackModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.PackModuleNeedNum))); });
                    #endregion
                    jobjectitem.Add("person", totalpersonNum);//所需人数
                    jobjectitem.Add("processingFee", "");//加工费用
                    jobjectitem.Add("capacityPerHour", totalWarkHours==0?0: Math.Round(totalpersonNum / totalWarkHours, 2));//每小时产能
                    content.Add(jobjectitem);
                }
                result.Add("conten", content);
                result.Add("list", list);
                totalresult.Add(result);
            }

            return Content(JsonConvert.SerializeObject(totalresult));
        }

        /// <summary>
        /// 找到平衡表的最后一个版本的集合
        /// </summary>
        /// <param name="value">平衡表集合</param>
        /// 根据传过来的平衡表数据,根据文件名进行分组,循环文件名,根据文件名找到最大的版本号,根据文件名和版本号,找到最后一个版本的数据信息,保存数据信息,最后传出去
        /// <returns></returns>
        public List<TempBlance> GetNewSerinum(List<TempBlance> value)
        {
            List<TempBlance> result = new List<TempBlance>();
            var serinum = value.Select(c => c.Name).Distinct();//查找数据里面excel文件的文件名,文件名相同归为是同一份文件的不同版本
            foreach (var item in serinum)//循环文件名
            {
                var temp = value.Where(c => c.Name == item).Max(c => c.SerialNumber);//根据文件名,找到该版本的最大版本号
                var resultitem = value.Where(c => c.Name == item && c.SerialNumber == temp).FirstOrDefault();//根据文件名和版本号,找到最后一个版本的数据信息
                result.Add(resultitem);//返回数据信息
            }
            return result;
        }

        /// <summary>
        /// 找到各个大块的每小时产能,SMT,模块,模组,老化,包装
        /// </summary>
        /// <returns></returns>
        public ActionResult GetCapacity()
        {
            JArray totalresult = new JArray();
            var total = db.Process_Capacity_Total.ToList();//找到所有的平台,型号,PCB板 
            #region 取值
            //SMT
            var SmtList = db.Pick_And_Place.Select(c => new TempSmt { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, PersonNum = c.PersonNum, CapacityPerHour = c.CapacityPerHour }).ToList();
            //插件
            var PluginList = db.Process_Capacity_Plugin.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.PluginStandardCapacity, StandardNumber = c.PluginStandardNumber });
            //平衡卡
            var Balance = db.ProcessBalance.Select(c => new TempBlance { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.StandardOutput, StandardTotal = c.StandardTotal, Section = c.Section, SerialNumber = c.SerialNumber, Name = c.Title });
            //三防
            var ThreeProfList = db.Process_Capacity_ThreeProf.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.ThreeProfStabdardOutput, StandardNumber = c.ThreeProfStandardTotal });
            //喷墨
            var InkjetList = db.Process_Capacity_Inkjet.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.InkjetStabdardOutputPerHour, StandardNumber = c.InkjetSuctionStandardTotal });
            //灌胶
            var GlueList = db.Process_Capacity_Glue.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.GlueStabdardOutput, StandardNumber = c.GlueStandardTotal });
            //气密
            var AirtightList = db.Process_Capacity_Airtight.Select(c => new TempCapacity { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, StandardCapacity = c.AirtightStabdardOutput, StandardNumber = c.AirtightStandardTotal });
            //老化
            var BurnList = db.Process_Capacity_Burin.Select(c => new TempBurn { Type = c.Type, PCB = c.ProductPCBnumber, Plafrom = c.Platform, BurinOneStabdardOutputPerHour = c.BurinOneStabdardOutputPerHour, BurninOneSuctionStandardTotal = c.BurninOneSuctionStandardTotal, BurinTwoStabdardOutputPerHour = c.BurinTwoStabdardOutputPerHour, BurinTwoSuctionStandardTotal = c.BurinTwoSuctionStandardTotal });
            #endregion
            foreach (var item in total)
            {
                JObject result = new JObject();
                JArray list = new JArray();
                result.Add("platfrom", item.Platform);//平台
                result.Add("type", item.Type);//型号
                result.Add("PCB", item.ProductPCBnumber);//pcb板
                //result.Add("ModuleUnits", 1);//模组单位
                #region 取值所需人数计算,需要拿到改平台的所有工段的标准人数
                //smt
                var smt = SmtList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.CapacityPerHour, c.PersonNum }).ToList();
                //插件
                var plugin = PluginList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //后焊
                var aftertotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "后焊").ToList();
                var after = GetNewSerinum(aftertotal);
                //三防
                var threetotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "三防").ToList();
                var three = GetNewSerinum(threetotal);
                //打底壳
                var bottontotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "打底壳").ToList();
                var botton = GetNewSerinum(bottontotal);
                //装磁吸
                var magnetitotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "装磁吸板").ToList();
                var magneti = GetNewSerinum(magnetitotal);
                //喷墨
                var Inkjet = InkjetList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //灌胶
                var glue = GlueList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //气密
                var airtight = AirtightList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).Select(c => new { c.StandardCapacity, c.StandardNumber }).ToList();
                //锁面罩
                var lockmastotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "锁面罩").ToList();
                var lockmas = GetNewSerinum(lockmastotal);
                //模组装配
                var moduletotal = db.ProcessBalance.Where(c => c.Section == "模组装配" && c.Type == item.Type && c.Platform == item.Platform && c.ProductPCBnumber == item.ProductPCBnumber).ToList();
                var module = new List<ProcessBalance>();
                var title = moduletotal.Select(c => c.Title).Distinct();//查找数据里面excel文件的文件名,文件名相同归为是同一份文件的不同版本
                foreach (var titleitem in title)//循环文件名
                {
                    var temp = moduletotal.Where(c => c.Title == titleitem).Max(c => c.SerialNumber);//根据文件名,找到该版本的最大版本号
                    var resultitem = moduletotal.Where(c => c.Title == titleitem && c.SerialNumber == temp).FirstOrDefault();//根据文件名和版本号,找到最后一个版本的数据信息
                    module.Add(resultitem);//返回数据信息
                }
                //老化
                var burnin = BurnList.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber).ToList();
                //包装
                var packingtotal = Balance.Where(c => c.Plafrom == item.Platform && c.Type == item.Type && c.PCB == item.ProductPCBnumber && c.Section == "包装").ToList();
                var packing = GetNewSerinum(packingtotal);
                #endregion
                JArray content = new JArray();
                foreach (var moduleitem in module)//循环模组装配
                {
                    JObject jobjectitem = new JObject();
                    list.Add( moduleitem.ProcessDescription);//模组名称
                    jobjectitem.Add("moduleName", moduleitem.ProcessDescription);//模组名称
                    var smttotalpersonNum = 0;//smt总人数
                    decimal smttotalWarkHours = 0m;
                    var mudulestotalpersonNum = 0;//总人数
                    decimal mudulestotalWarkHours = 0m;
                    var muduletotalpersonNum = 0;//总人数
                    decimal moduletotalWarkHours = 0m;
                    var burntotalpersonNum = 0;//总人数
                    decimal burntotalWarkHours = 0m;
                    var packtotalpersonNum = 0;//总人数
                    decimal packtotalWarkHours = 0m;
                    #region 循环各个工段的数据,拿到人数集合,和各个工段的单人模组需求总时(1/(标准产能/人数/模组需求))
                    //smt
                    smt.ForEach(c => { smttotalpersonNum = smttotalpersonNum + c.PersonNum; smttotalWarkHours = smttotalWarkHours + (c.PersonNum==0|| moduleitem.SMTModuleNeedNum==0?0:(1 / (c.CapacityPerHour / c.PersonNum / moduleitem.SMTModuleNeedNum))); });
                    //插件
                    plugin.ForEach(c => { smttotalpersonNum = smttotalpersonNum + c.StandardNumber; smttotalWarkHours = smttotalWarkHours + (c.StandardNumber == 0 || moduleitem.PluginModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.PluginModuleNeedNum))); });
                    //后焊
                    after.ForEach(c => { smttotalpersonNum = smttotalpersonNum + c.StandardTotal; smttotalWarkHours = smttotalWarkHours + (c.StandardTotal == 0 || moduleitem.AfterModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.AfterModuleNeedNum))); });
                    //三放
                    three.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardTotal; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardTotal == 0 || moduleitem.ThreeModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.ThreeModuleNeedNum))); });
                    //打底壳
                    botton.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardTotal; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardTotal == 0 || moduleitem.BottnModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.BottnModuleNeedNum))); });
                    //装磁吸
                    magneti.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardTotal; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardTotal == 0 || moduleitem.MagneticModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.MagneticModuleNeedNum))); });
                    //喷墨
                    Inkjet.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardNumber; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardNumber == 0 || moduleitem.InjekModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.InjekModuleNeedNum))); });
                    //灌胶
                    glue.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardNumber; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardNumber == 0 || moduleitem.GuleModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.GuleModuleNeedNum))); });
                    //气密
                    airtight.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardNumber; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardNumber == 0 || moduleitem.AirtightModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardNumber / moduleitem.AirtightModuleNeedNum))); });
                    //锁面罩
                    lockmas.ForEach(c => { mudulestotalpersonNum = mudulestotalpersonNum + c.StandardTotal; mudulestotalWarkHours = mudulestotalWarkHours + (c.StandardTotal == 0 || moduleitem.LockMasModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.LockMasModuleNeedNum))); });
                    //模组装配
                    muduletotalpersonNum = muduletotalpersonNum + moduleitem.StandardTotal;
                    moduletotalWarkHours = moduletotalWarkHours + (moduleitem.StandardTotal == 0 || moduleitem.ModuleNeedNum2 == 0 ? 0 : (1 / (moduleitem.StandardOutput / moduleitem.StandardTotal / moduleitem.ModuleNeedNum2)));
                    //老化
                    burnin.ForEach(c => { burntotalpersonNum = burntotalpersonNum + c.BurninOneSuctionStandardTotal; burntotalWarkHours = burntotalWarkHours + (c.BurninOneSuctionStandardTotal == 0 || moduleitem.BuriInModuleNeedNum == 0 ? 0 : (1 / (c.BurinOneStabdardOutputPerHour / c.BurninOneSuctionStandardTotal / moduleitem.BuriInModuleNeedNum))); burntotalpersonNum = burntotalpersonNum + c.BurinTwoSuctionStandardTotal; burntotalWarkHours = burntotalWarkHours + (c.BurinTwoSuctionStandardTotal == 0 || moduleitem.BuriInModuleNeedNum == 0 ? 0 : (1 / (c.BurinTwoStabdardOutputPerHour / c.BurinTwoSuctionStandardTotal / moduleitem.BuriInModuleNeedNum))); });
                    //包装
                    packing.ForEach(c => { packtotalpersonNum = packtotalpersonNum + c.StandardTotal; packtotalWarkHours = packtotalWarkHours + (c.StandardTotal == 0 || moduleitem.PackModuleNeedNum == 0 ? 0 : (1 / (c.StandardCapacity / c.StandardTotal / moduleitem.PackModuleNeedNum))); });
                    #endregion
                    jobjectitem.Add("smtcapacityPerHour", smttotalWarkHours==0?0:Math.Round(smttotalpersonNum / smttotalWarkHours, 2));//smt每小时产能
                    jobjectitem.Add("modulescapacityPerHour", mudulestotalWarkHours == 0 ? 0 : Math.Round(mudulestotalpersonNum / mudulestotalWarkHours, 2));//模块每小时产能
                    jobjectitem.Add("modulecapacityPerHour", moduletotalWarkHours == 0 ? 0 : Math.Round(muduletotalpersonNum / moduletotalWarkHours, 2));//模组每小时产能
                    jobjectitem.Add("burncapacityPerHour", burntotalWarkHours == 0 ? 0 : Math.Round(burntotalpersonNum / burntotalWarkHours, 2));//老化每小时产能
                    jobjectitem.Add("包装capacityPerHour", packtotalWarkHours == 0 ? 0 : Math.Round(packtotalpersonNum / packtotalWarkHours, 2));//包装每小时产能
                    content.Add(jobjectitem);
                }
                result.Add("conten", content);
                result.Add("List", list);//模组名称列表
                totalresult.Add(result);
            }

            return Content(JsonConvert.SerializeObject(totalresult));
        }
        #region 添加，修改，删除

        //添加总表
        public ActionResult AddTotalProcess_Capacity(string type, string pcbnumber, string platform)
        {
            if (Session["User"] == null)//判断是否有登录,没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            JObject value = new JObject();
            var count = db.Process_Capacity_Total.Count(c => c.Type == type && c.ProductPCBnumber == pcbnumber && c.Platform == platform);//根据前端传过来的平台,类型,PCB板查找总表中符合条件的数量
            if (count != 0)//如果查找的数量不为0,说明已有重复的数据,提示错误,返回前端
            {
                value.Add("message", "已有相同的型号平台和pcb编号");
                value.Add("content", null);
                return Content(JsonConvert.SerializeObject(value));
            }
            Process_Capacity_Total total = new Process_Capacity_Total() { Type = type, ProductPCBnumber = pcbnumber, Platform = platform };//创建新的工序总表对象,并把前端传过来的平台,类型,PCB板赋值进去
            total.Operator = ((Users)Session["User"]).UserName;//登录姓名
            total.OperateDT = DateTime.Now;//创建时间
            db.Process_Capacity_Total.Add(total);//往数据库创建数据
            db.SaveChanges();//数据库保存

            value.Add("message", "添加成功");

            #region 返回新建总表jobject
            JObject result = new JObject();
            var info = db.Process_Capacity_Total.Where(c => c.Type == type && c.ProductPCBnumber == pcbnumber && c.Platform == platform).FirstOrDefault();//找到刚刚新增的数据
            result.Add("id", info.Id);
            result.Add("Type", type);
            result.Add("Platform", platform);
            result.Add("PCB", pcbnumber);
            //ic面贴装 //灯面贴装
            result.Add("icProductName", null);
            result.Add("icMaxStandardTotal", null);
            result.Add("icMaxStandardOutput", null);
            result.Add("icMinStandardTotal", null);
            result.Add("icMinStandardOutput", null);
            result.Add("LightProductName", null);
            result.Add("LightMaxStandardTotal", null);
            result.Add("LightMaxStandardOutput", null);
            result.Add("LightMinStandardTotal", null);
            result.Add("LightMinStandardOutput", null);
            result.Add("SMTjpg", false);
            result.Add("SMTpdf", false);
            //插件
            result.Add("PluginDevice", null);

            //后焊
            result.Add("AfterWeld", null);

            //三防
            result.Add("ThreeProf", null);

            //打底壳
            result.Add("BottomCas", null);

            //装磁吸
            result.Add("Magnetic", null);

            //喷墨
            result.Add("Inkjet", null);

            //灌胶
            result.Add("Glue", null);

            //气密
            result.Add("Airtight", null);

            //锁面罩
            result.Add("LockTheMask", null);

            //模组装配
            result.Add("Module", null);

            //老化
            result.Add("Burin", null);

            //包装
            result.Add("Packing", null);
            #endregion
            value.Add("content", result);
            return Content(JsonConvert.SerializeObject(value));
        }

        //总表删除
        public ActionResult DeleteTotalProcess_Capacity(int id)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            var process = db.Process_Capacity_Total.Find(id);//根据id找到总表对应的数据,得到平台,型号,PCB板数据
            var type = process.Type;
            var platform = process.Platform;
            var PCBnumber = process.ProductPCBnumber;

            //删除平衡卡
            var deleteblance = db.ProcessBalance.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.ProcessBalance.RemoveRange(deleteblance);
            //删除贴片
            var pick = db.Pick_And_Place.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Pick_And_Place.RemoveRange(pick);
            //删除插件
            var plug = db.Process_Capacity_Plugin.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Process_Capacity_Plugin.RemoveRange(plug);
            //删除三防
            var three = db.Process_Capacity_ThreeProf.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Process_Capacity_ThreeProf.RemoveRange(three);
            //删除喷墨
            var inkjets = db.Process_Capacity_Inkjet.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Process_Capacity_Inkjet.RemoveRange(inkjets);
            //删除灌胶
            var glue = db.Process_Capacity_Glue.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Process_Capacity_Glue.RemoveRange(glue);
            //删除气密
            var airtights = db.Process_Capacity_Airtight.Where(c => c.Type == type && c.Platform == platform && c.ProductPCBnumber == PCBnumber).ToList();
            db.Process_Capacity_Airtight.RemoveRange(airtights);
            //删除总表
            db.Process_Capacity_Total.Remove(process);

            //填写日志
            UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能平台为" + platform + "型号为" + type + "PCB板号为" + PCBnumber };
            db.UserOperateLog.Add(log);
            db.SaveChanges();//保存数据
            JObject value = new JObject();
            value.Add("message", true);
            value.Add("content", "删除成功");
            return Content(JsonConvert.SerializeObject(value));
        }

        //总表修改
        public ActionResult UpdateTotalProcess_Capacity(int id, string type, string pcb, string platfrom)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            //修改总表
            var totals = db.Process_Capacity_Total.Where(c => c.Id == id).FirstOrDefault();//根据id找到信息,得到平台,类型,PCB板内容
            var oldtype = totals.Type;
            var oldplatform = totals.Platform;
            var oldPCBnumber = totals.ProductPCBnumber;

            totals.Type = type;//修改后的类型
            totals.Platform = platfrom;//修改后的平台
            totals.ProductPCBnumber = pcb;//修改后的PCB板

            //修改平衡卡 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var deleteblance = db.ProcessBalance.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            deleteblance.ForEach(c => c.Type = type);
            deleteblance.ForEach(c => c.Platform = platfrom);
            deleteblance.ForEach(c => c.ProductPCBnumber = pcb);
            //修改贴片根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var pick = db.Pick_And_Place.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            pick.ForEach(c => c.Type = type);
            pick.ForEach(c => c.Platform = platfrom);
            pick.ForEach(c => c.ProductPCBnumber = pcb);
            //修改插件 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var plug = db.Process_Capacity_Plugin.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            plug.ForEach(c => c.Type = type);
            plug.ForEach(c => c.Platform = platfrom);
            plug.ForEach(c => c.ProductPCBnumber = pcb);
            //修改三防 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var three = db.Process_Capacity_ThreeProf.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            three.ForEach(c => c.Type = type);
            three.ForEach(c => c.Platform = platfrom);
            three.ForEach(c => c.ProductPCBnumber = pcb);
            //修改喷墨 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var inkjets = db.Process_Capacity_Inkjet.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            inkjets.ForEach(c => c.Type = type);
            inkjets.ForEach(c => c.Platform = platfrom);
            inkjets.ForEach(c => c.ProductPCBnumber = pcb);
            //修改灌胶 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var glue = db.Process_Capacity_Glue.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            glue.ForEach(c => c.Type = type);
            glue.ForEach(c => c.Platform = platfrom);
            glue.ForEach(c => c.ProductPCBnumber = pcb);
            //修改气密 根据旧的平台,类型,PCB板内容,找到对应内容,再将新的赋值过去
            var airtights = db.Process_Capacity_Airtight.Where(c => c.Type == oldtype && c.Platform == oldplatform && c.ProductPCBnumber == oldPCBnumber).ToList();
            airtights.ForEach(c => c.Type = type);
            airtights.ForEach(c => c.Platform = platfrom);
            airtights.ForEach(c => c.ProductPCBnumber = pcb);

            //填写日志
            UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "修改工序产能平台为" + oldplatform + "->" + platfrom + ",型号为" + oldtype + "->" + type + ",PCB板号为" + oldPCBnumber + "->" + pcb };
            db.UserOperateLog.Add(log);
            db.SaveChanges();//保存数据
            JObject value = new JObject();
            value.Add("message", true);
            value.Add("content", "修改成功");
            return Content(JsonConvert.SerializeObject(value));
        }

        /// <summary>
        ///  插件添加,修改,删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">要操作的状态</param>
        /// <returns></returns>
        public ActionResult Add_Plug_In(Process_Capacity_Plugin newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            JObject value = new JObject();
            if (!ModelState.IsValid)//判断 Process_Capacity_Plugin 数据格式
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.SingleLampWorkingHours = 0.222;//写死的
                newData.PluginStandardCapacity = newData.PCBASingleLampNumber == 0 ? 0 : (decimal)(3600 / (newData.PCBASingleLampNumber * 0.222));//计算标准产能 3600/单灯数*0.22
                newData.Operator = ((Users)Session["User"]).UserName;//登录姓名
                newData.OperateDT = DateTime.Now;//现在时间
                db.Process_Capacity_Plugin.Add(newData);
                db.SaveChanges();//保存数据

                value.Add("message", true);
                var pluginitem = db.Process_Capacity_Plugin.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据
                JObject pluginjobject = new JObject();
                pluginjobject.Add("PluginEidt", false);//前端用
                pluginjobject.Add("PluginDeviceID", pluginitem.Id);
                pluginjobject.Add("PluginDeviceName", pluginitem.Name); //插件工序名
                pluginjobject.Add("SingleLampWorkingHours", pluginitem.SingleLampWorkingHours);//插件机台固定标准单灯工时
                pluginjobject.Add("PCBASingleLampNumber", pluginitem.PCBASingleLampNumber);//插件PCBA单灯数
                pluginjobject.Add("PluginStandardNumber", pluginitem.PluginStandardNumber);//插件标配人数
                pluginjobject.Add("PluginStandardCapacity", pluginitem.PluginStandardCapacity);//插件产能标准
                                                                                               // pluginjobject.Add("PluginModuleNeed", pluginitem.ModuleNeedNum2);//插件产能标准
                value.Add("content", pluginjobject);
                return Content(JsonConvert.SerializeObject(value));//返回给前面显示,实现不刷新就显示
            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_Plugin.Where(c => c.Id == newData.Id).FirstOrDefault();//查找要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "修改工序产能数据，工段插件，描述" + old.Name + "->" + newData.Name + "，单灯数" + old.PCBASingleLampNumber + "->" + newData.PCBASingleLampNumber + "，人数" + old.PluginStandardNumber + "->" + newData.PluginStandardNumber + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2 };
                // RemoveHoldingEntityInContext(newData);
                // db.Process_Capacity_Plugin.Attach(newData);

                db.UserOperateLog.Add(log);
                //修改值
                old.SingleLampWorkingHours = 0.222;
                old.PluginStandardCapacity = newData.PCBASingleLampNumber == 0 ? 0 : (decimal)(3600 / newData.PCBASingleLampNumber * 0.222);
                old.Name = newData.Name;
                old.PCBASingleLampNumber = newData.PCBASingleLampNumber;
                old.PluginStandardNumber = newData.PluginStandardNumber;
                //old.ModuleNeedNum2 = newData.ModuleNeedNum2;
                db.SaveChanges();//保存数据

                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));

            }
            else if (statu == "删除")
            {
                var old = db.Process_Capacity_Plugin.Find(newData.Id);//查找要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段插件，原数据,描述，单灯数，人数为" + old.Name + "，" + old.PCBASingleLampNumber + "，" + old.PluginStandardNumber };
                db.UserOperateLog.Add(log);
                db.SaveChanges();
                var delete = db.Process_Capacity_Plugin.Find(newData.Id);
                db.Process_Capacity_Plugin.Remove(delete);
                db.SaveChanges();//保存数据
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));
            }

            return Content("true");
        }

        /// <summary>
        /// 三防添加,修改删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">操作状态</param>
        /// <returns></returns>
        public ActionResult Add_ThreeProf(Process_Capacity_ThreeProf newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }

            JObject value = new JObject();
            if (!ModelState.IsValid)//判断格式
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.Operator = ((Users)Session["User"]).UserName;//登录名
                newData.OperateDT = DateTime.Now;
                db.Process_Capacity_ThreeProf.Add(newData);
                db.SaveChanges(); //新增数据
                value.Add("message", true);
                var threeprofitem = db.Process_Capacity_ThreeProf.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据,
                JObject jObject = new JObject();
                jObject.Add("ThreeProfEidt", false);//前端用
                jObject.Add("ThreeProfID", threeprofitem.Id);
                jObject.Add("ThreeProfProcessName", threeprofitem.ThreeProfProcessName);//三防工序描述
                jObject.Add("ThreeProfStandardTotal", threeprofitem.ThreeProfStandardTotal);//三防标准总人数
                jObject.Add("ThreeProfStabdardOutput", threeprofitem.ThreeProfStabdardOutput);//三防标准产量
                jObject.Add("ThreeProfModuleNeed", threeprofitem.ModuleNeedNum2);//三防模组需求数量
                value.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(value));//数据返回前端,实现不刷新显示
            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_ThreeProf.Where(c => c.Id == newData.Id).FirstOrDefault();//查找需要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog()
                {
                    Operator = ((Users)Session["User"]).UserName,
                    OperateDT = DateTime.Now,
                    OperateRecord = "修改工序产能数据，工段三防，描述" + old.ThreeProfProcessName + "->" + newData.ThreeProfProcessName + "，总人数" + old.ThreeProfStandardTotal + "->" + newData.ThreeProfStandardTotal + "，标准产量" + old.ThreeProfStabdardOutput + "->" + newData.ThreeProfStabdardOutput + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2
                };

                db.UserOperateLog.Add(log);
                //将新的值赋过去
                old.ThreeProfProcessName = newData.ThreeProfProcessName;
                old.ThreeProfStandardTotal = newData.ThreeProfStandardTotal;
                old.ThreeProfStabdardOutput = newData.ThreeProfStabdardOutput;
                old.ModuleNeedNum2 = newData.ModuleNeedNum2;

                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            else if (statu == "删除")
            {
                var delete = db.Process_Capacity_ThreeProf.Find(newData.Id);//查找需要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段三防，原数据,描述，总人数，标准产量为" + delete.ThreeProfProcessName + "，" + delete.ThreeProfStandardTotal + "，" + delete.ThreeProfStabdardOutput };
                db.UserOperateLog.Add(log);
                db.SaveChanges();
                db.Process_Capacity_ThreeProf.Remove(delete);
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));
            }

            return Content("true");
        }
        /// <summary>
        /// 喷墨添加,修改,删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">操作状态</param>
        /// <returns></returns>
        public ActionResult Add_Inkjet(Process_Capacity_Inkjet newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }

            JObject value = new JObject();
            if (!ModelState.IsValid)
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.Operator = ((Users)Session["User"]).UserName;
                newData.OperateDT = DateTime.Now;
                db.Process_Capacity_Inkjet.Add(newData);
                db.SaveChanges();

                value.Add("message", true);
                var inkjetitem = db.Process_Capacity_Inkjet.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据,
                JObject jObject = new JObject();
                jObject.Add("InkjetEidt", false);//前端用
                jObject.Add("InkjetID", inkjetitem.Id);
                jObject.Add("InkjetProcessName", inkjetitem.InkjetProcessName);//喷墨工序
                jObject.Add("InkjetSuctionStandardTotal", inkjetitem.InkjetSuctionStandardTotal);//喷墨配置人数
                jObject.Add("InkjetStabdardOutputPerHour", inkjetitem.InkjetStabdardOutputPerHour);//喷墨每小时产能
                //jObject.Add("InkjetModuleNeed", inkjetitem.ModuleNeedNum2);//喷墨模组需求数量
                value.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(value));//数据返回前端,实现不刷新显示
            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_Inkjet.Where(c => c.Id == newData.Id).FirstOrDefault();//查找需要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog()
                {
                    Operator = ((Users)Session["User"]).UserName,
                    OperateDT = DateTime.Now,
                    OperateRecord = "修改工序产能数据，工段喷墨，描述" + old.InkjetProcessName + "->" + newData.InkjetProcessName + "，总人数" + old.InkjetSuctionStandardTotal + "->" + newData.InkjetSuctionStandardTotal + "，标准产量" + old.InkjetStabdardOutputPerHour + "->" + newData.InkjetStabdardOutputPerHour + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2
                };

                db.UserOperateLog.Add(log);
                //将新的值赋过去
                old.InkjetProcessName = newData.InkjetProcessName;
                old.InkjetSuctionStandardTotal = newData.InkjetSuctionStandardTotal;
                old.InkjetStabdardOutputPerHour = newData.InkjetStabdardOutputPerHour;
                // old.ModuleNeedNum2 = newData.ModuleNeedNum2;

                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            else if (statu == "删除")
            {
                var delete = db.Process_Capacity_Inkjet.Find(newData.Id);//查找需要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段喷墨，原数据,描述，总人数，标准产量为" + delete.InkjetProcessName + "，" + delete.InkjetSuctionStandardTotal + "，" + delete.InkjetStabdardOutputPerHour };
                db.UserOperateLog.Add(log);
                db.Process_Capacity_Inkjet.Remove(delete);
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));

            }

            return Content("true");
        }

        /// <summary>
        /// 灌胶添加,修改,删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">操作状态</param>
        /// <returns></returns>
        public ActionResult Add_Glue(Process_Capacity_Glue newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }

            JObject value = new JObject();
            if (!ModelState.IsValid)
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.Operator = ((Users)Session["User"]).UserName;//查找需要修改的数据
                newData.OperateDT = DateTime.Now;
                db.Process_Capacity_Glue.Add(newData);
                db.SaveChanges();
                value.Add("message", true);
                var glueitem = db.Process_Capacity_Glue.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据,
                JObject jObject = new JObject();
                jObject.Add("GlueEidt", false);//前端用
                jObject.Add("GlueID", glueitem.Id);
                jObject.Add("GlueProcessName", glueitem.GlueProcessName);//灌胶工序描述
                jObject.Add("GlueStandardTotal", glueitem.GlueStandardTotal);//灌胶标准总人数
                jObject.Add("GlueStabdardOutput", glueitem.GlueStabdardOutput);//灌胶标准产量
                //jObject.Add("GlueModuleNeed", glueitem.ModuleNeedNum2);//灌胶模组需求数量
                value.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(value));//数据返回前端,实现不刷新显示
            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_Glue.Where(c => c.Id == newData.Id).FirstOrDefault();//查找需要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog()
                {
                    Operator = ((Users)Session["User"]).UserName,
                    OperateDT = DateTime.Now,
                    OperateRecord = "修改工序产能数据，工段灌胶，描述" + old.GlueProcessName + "->" + newData.GlueProcessName + "，总人数" + old.GlueStandardTotal + "->" + newData.GlueStandardTotal + "，标准产量" + old.GlueStabdardOutput + "->" + newData.GlueStabdardOutput + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2
                };

                db.UserOperateLog.Add(log);
                //将新的值赋过去
                old.GlueProcessName = newData.GlueProcessName;
                old.GlueStandardTotal = newData.GlueStandardTotal;
                old.GlueStabdardOutput = newData.GlueStabdardOutput;
                //old.ModuleNeedNum2 = newData.ModuleNeedNum2;
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            else if (statu == "删除")
            {
                var delete = db.Process_Capacity_Glue.Find(newData.Id);//查找需要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段灌胶，原数据,描述，总人数，标准产量为" + delete.GlueProcessName + "，" + delete.GlueStandardTotal + "，" + delete.GlueStabdardOutput };
                db.UserOperateLog.Add(log);
                db.Process_Capacity_Glue.Remove(delete);
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            return Content("true");
        }
        /// <summary>
        /// 气密添加,修改,删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">操作状态</param>
        /// <returns></returns>
        public ActionResult Add_Airtight(Process_Capacity_Airtight newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            JObject value = new JObject();
            if (!ModelState.IsValid)
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.Operator = ((Users)Session["User"]).UserName;
                newData.OperateDT = DateTime.Now;
                db.Process_Capacity_Airtight.Add(newData);
                db.SaveChanges();
                value.Add("message", true);
                var airtightitem = db.Process_Capacity_Airtight.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据,
                JObject jObject = new JObject();
                jObject.Add("AirtightEidt", false);//前端用
                jObject.Add("AirtightID", airtightitem.Id);
                jObject.Add("AirtightProcessName", airtightitem.AirtightProcessName);//气密工序描述
                jObject.Add("AirtightStandardTotal", airtightitem.AirtightStandardTotal);//气密标准总人数
                jObject.Add("AirtightStabdardOutput", airtightitem.AirtightStabdardOutput);//气密标准产量
                //jObject.Add("AirtightModuleNeed", airtightitem.ModuleNeedNum2);//气密模组需求数量
                value.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(value));//数据返回前端,实现不刷新显示
            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_Airtight.Where(c => c.Id == newData.Id).FirstOrDefault();//查找需要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "修改工序产能数据，工段气密，描述" + old.AirtightProcessName + "->" + newData.AirtightProcessName + "，总人数" + old.AirtightStandardTotal + "->" + newData.AirtightStandardTotal + "，标准产量" + old.AirtightStabdardOutput + "->" + newData.AirtightStabdardOutput + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2 };
                db.UserOperateLog.Add(log);
                //将新的值赋过去
                old.AirtightProcessName = newData.AirtightProcessName;
                old.AirtightStandardTotal = newData.AirtightStandardTotal;
                old.AirtightStabdardOutput = newData.AirtightStabdardOutput;
                //old.ModuleNeedNum2 = newData.ModuleNeedNum2;
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            else if (statu == "删除")
            {
                var delete = db.Process_Capacity_Airtight.Find(newData.Id);//查找需要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段气密，原数据,描述，总人数，标准产量为" + delete.AirtightProcessName + "，" + delete.AirtightStandardTotal + "，" + delete.AirtightStabdardOutput };
                db.UserOperateLog.Add(log);
                db.Process_Capacity_Airtight.Remove(delete);
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            return Content("true");
        }

        ////装磁吸安装板输入
        //public ActionResult Add_MagneticSuction(Process_Capacity_Magnetic newData, string statu)
        //{
        //    if (Session["User"] == null)
        //    {
        //        return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
        //    }
        //    JObject value = new JObject();
        //    if (!ModelState.IsValid)
        //    {
        //        value.Add("message", false);
        //        value.Add("content", "格式错误");
        //        return Content(JsonConvert.SerializeObject(value));
        //    }
        //    if (statu == "添加")
        //    {
        //        newData.MagneticSuctionStandardHourlyOutputPerCapita = newData.MagneticSuctionStandardTotal == 0 ? 0 : newData.MagneticSuctionStabdardOutput / newData.MagneticSuctionStandardTotal;
        //        newData.Operator = ((Users)Session["User"]).UserName;
        //        newData.OperateDT = DateTime.Now;
        //        db.Process_Capacity_Magnetic.Add(newData);
        //        db.SaveChanges();
        //        value.Add("message", true);
        //        var magneticitem = db.Process_Capacity_Magnetic.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();
        //        JObject jObject = new JObject();
        //        jObject.Add("MagneticEidt", false);//前端用
        //        jObject.Add("MagneticID", magneticitem.Id);
        //        jObject.Add("MagneticProcessName", magneticitem.MagneticSuctionProcessName);//装磁吸工序描述
        //        jObject.Add("MagneticSuctionStandardTotal", magneticitem.MagneticSuctionStandardTotal);//装磁吸标准总人数
        //        jObject.Add("MagneticSuctionStabdardOutput", magneticitem.MagneticSuctionStabdardOutput);//装磁吸标准产量
        //        jObject.Add("MagneticSuctionStandardHourlyOutputPerCapita", magneticitem.MagneticSuctionStandardHourlyOutputPerCapita);//装磁吸人均时产量
        //        value.Add("content", jObject);
        //        return Content(JsonConvert.SerializeObject(value));

        //    }
        //    else if (statu == "修改")
        //    {
        //        var old = db.Process_Capacity_Magnetic.Where(c => c.Id == newData.Id).FirstOrDefault();
        //        UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "修改工序产能数据，工段装磁吸，原数据,描述，总人数，标准产量为" + old.MagneticProcessName + "，" + old.MagneticSuctionStandardTotal + "，" + old.MagneticSuctionStabdardOutput + "修改为" + newData.MagneticSuctionProcessName + "，" + newData.MagneticSuctionStandardTotal + "，" + newData.MagneticSuctionStabdardOutput };

        //        db.UserOperateLog.Add(log);
        //        old.MagneticSuctionStandardHourlyOutputPerCapita = newData.MagneticSuctionStandardTotal == 0 ? 0 : newData.MagneticSuctionStabdardOutput / newData.MagneticSuctionStandardTotal;
        //        old.MagneticProcessName = newData.MagneticProcessName;
        //        old.MagneticSuctionStandardTotal = newData.MagneticSuctionStandardTotal;
        //        old.MagneticSuctionStabdardOutput = newData.MagneticSuctionStabdardOutput;
        //        db.SaveChanges();
        //        value.Add("message", true);
        //        value.Add("content", "修改成功");
        //        return Content(JsonConvert.SerializeObject(value));

        //    }
        //    else if (statu == "删除")
        //    {
        //        var delete = db.Process_Capacity_Magnetic.Find(newData.Id);
        //        UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段装磁吸，原数据,描述，总人数，标准产量为" + delete.MagneticProcessName + "，" + delete.MagneticSuctionStandardTotal + "，" + delete.MagneticSuctionStabdardOutput };
        //        db.UserOperateLog.Add(log);
        //        db.Process_Capacity_Magnetic.Remove(delete);
        //        db.SaveChanges();
        //        value.Add("message", true);
        //        value.Add("content", "删除成功");
        //        return Content(JsonConvert.SerializeObject(value));
        //    }
        //    return Content("true");
        //}
        //老化输入
        /// <summary>
        /// 老化添加,修改,删除
        /// </summary>
        /// <param name="newData">数据</param>
        /// <param name="statu">操作状态</param>
        /// <returns></returns>
        public ActionResult Add_Burin(Process_Capacity_Burin newData, string statu)
        {
            if (Session["User"] == null)//判断是否有登录,如果没有登录则跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            JObject value = new JObject();
            if (!ModelState.IsValid)
            {
                value.Add("message", false);
                value.Add("content", "格式错误");
                return Content(JsonConvert.SerializeObject(value));
            }
            if (statu == "添加")
            {
                newData.Operator = ((Users)Session["User"]).UserName;
                newData.OperateDT = DateTime.Now;
                db.Process_Capacity_Burin.Add(newData);
                db.SaveChanges();
                value.Add("message", true);
                var burninitem = db.Process_Capacity_Burin.OrderByDescending(c => c.Id).Where(c => c.Type == newData.Type && c.ProductPCBnumber == newData.ProductPCBnumber && c.Platform == newData.Platform).FirstOrDefault();//查找刚刚新增的数据,
                JObject jObject = new JObject();
                jObject.Add("BurinEidt", false);//前端用
                jObject.Add("BurinID", burninitem.Id);
                jObject.Add("BurinOneProcessName", burninitem.BurinOneProcessName);//老化工序描述1
                jObject.Add("BurninOneSuctionStandardTotal", burninitem.BurninOneSuctionStandardTotal);//老化1标配人数
                jObject.Add("BurinOneStabdardOutputPerHour", burninitem.BurinOneStabdardOutputPerHour);//老化1每小时产能
                jObject.Add("BurinTwoProcessName", burninitem.BurinTwoProcessName);//老化2工序描述
                jObject.Add("BurinTwoSuctionStandardTotal", burninitem.BurinTwoSuctionStandardTotal);//老化2标配人数
                jObject.Add("BurinTwoStabdardOutputPerHour", burninitem.BurinTwoStabdardOutputPerHour);//老化2每小时标准产能
                //jObject.Add("BurinModuleNeed", burninitem.ModuleNeedNum2);//老化模组需求数量
                value.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(value));//数据返回前端,实现不刷新显示

            }
            else if (statu == "修改")
            {
                var old = db.Process_Capacity_Burin.Where(c => c.Id == newData.Id).FirstOrDefault();//查找需要修改的数据
                //填写日志
                UserOperateLog log = new UserOperateLog()
                {
                    Operator = ((Users)Session["User"]).UserName,
                    OperateDT = DateTime.Now,
                    OperateRecord = "修改工序产能数据，工段老化，老化1描述" + old.BurinOneProcessName + "->" + newData.BurinOneProcessName + "，总人数" + old.BurninOneSuctionStandardTotal + "->" + newData.BurninOneSuctionStandardTotal + "，标准产量" + old.BurinOneStabdardOutputPerHour + "->" + newData.BurinOneStabdardOutputPerHour + "老化2描述" + old.BurinTwoProcessName + "->" + newData.BurinTwoProcessName + "，总人数" + old.BurinTwoSuctionStandardTotal + "->" + newData.BurinTwoSuctionStandardTotal + "，标准产量" + old.BurinTwoStabdardOutputPerHour + "->" + newData.BurinTwoStabdardOutputPerHour + ",模组需求数量" + old.ModuleNeedNum2 + "->" + newData.ModuleNeedNum2
                };

                db.UserOperateLog.Add(log);
                //将新的值赋过去
                old.BurinOneProcessName = newData.BurinOneProcessName;
                old.BurninOneSuctionStandardTotal = newData.BurninOneSuctionStandardTotal;
                old.BurinOneStabdardOutputPerHour = newData.BurinOneStabdardOutputPerHour;
                old.BurinTwoProcessName = newData.BurinTwoProcessName;
                old.BurinTwoSuctionStandardTotal = newData.BurinTwoSuctionStandardTotal;
                old.BurinTwoStabdardOutputPerHour = newData.BurinTwoStabdardOutputPerHour;
                //old.ModuleNeedNum2 = newData.ModuleNeedNum2;

                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "修改成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            else if (statu == "删除")
            {
                var delete = db.Process_Capacity_Burin.Find(newData.Id);//查找需要删除的数据
                //填写日志
                UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段老化，原数据,老化1描述，总人数，标准产量，老化2描述，总人数，标准产量为" + delete.BurinOneProcessName + "，" + delete.BurninOneSuctionStandardTotal + "，" + delete.BurinOneStabdardOutputPerHour + "，" + delete.BurinTwoProcessName + "，" + delete.BurinTwoSuctionStandardTotal + "，" + delete.BurinTwoStabdardOutputPerHour };
                db.UserOperateLog.Add(log);
                db.Process_Capacity_Burin.Remove(delete);
                db.SaveChanges();
                value.Add("message", true);
                value.Add("content", "删除成功");
                return Content(JsonConvert.SerializeObject(value));
            }
            return Content("true");
        }


        //工序平衡卡的输入和修改
        /// <summary>
        /// 修改点胶机何螺丝机，不再改模组需求数量
        /// </summary>
        public ActionResult Add_MachineNum(int id, int ScrewMachineNum, int DispensMachineNum)
        {
            var oldinfo = db.ProcessBalance.Find(id);//根据id查找到需要修改的信息,因为值默认是0,所以输入和修改的方法是一样的
            //日志填写
            UserOperateLog log = new UserOperateLog()
            {
                Operator = ((Users)Session["User"]).UserName,
                OperateDT = DateTime.Now,
                OperateRecord =
            "修改工序产能数据，工段" + oldinfo.Section + "，描述" + oldinfo.Title + "，原数据螺丝机" + oldinfo.ScrewMachineNum + "->" + ScrewMachineNum + "，点胶机数量" + oldinfo.DispensMachineNum + "->" + DispensMachineNum
            };
            db.UserOperateLog.Add(log);//日志保存

            JObject value = new JObject();
            //修改数值
            oldinfo.DispensMachineNum = DispensMachineNum;
            oldinfo.ScrewMachineNum = ScrewMachineNum;
            db.SaveChanges();//数据保存
            value.Add("message", true);
            value.Add("content", "修改成功");
            return Content(JsonConvert.SerializeObject(value));
        }

        //已上传文件改文件名字
        public ActionResult Edit_ModuleName(int id, string name)
        {
            var blance = db.ProcessBalance.Find(id);//读取值
            JObject value = new JObject();
            //修改名称
            blance.ProcessDescription = name;
            db.SaveChanges();//数据保存
            value.Add("message", true);
            value.Add("content", "修改成功");
            return Content(JsonConvert.SerializeObject(value));
        }
        /// <summary>
        /// /// 上传平衡表后,调用此方法,或者是平衡卡修改调用此方法
        /// 填写工序描述
        /// 如果是模组装配,则还需要上传模组需求数
        /// </summary>
        /// <param name="id">数据id</param>
        /// <param name="name">工序描述</param>
        /// <param name="ismodule">是否是模组装配,是为true </param>
        /// <param name="smtmodeulneed">smt模组</param>
        /// <param name="plugmodeulneed">插件模组</param>
        /// <param name="aftermodeulneed">后焊模组</param>
        /// <param name="threemodeulneed">三防模组</param>
        /// <param name="bootnmodeulneed">打底壳模组</param>
        /// <param name="magneticmodeulneed">装磁吸模组</param>
        /// <param name="injekinmodeulneed">喷墨模组</param>
        /// <param name="gluemodeulneed">灌胶模组</param>
        /// <param name="airtightmodeulneed">气密模组</param>
        /// <param name="lockmodeulneed">锁面罩模组</param>
        /// <param name="modeulneed">模组装配模组</param>
        /// <param name="burnmodeulneed">老化模组</param>
        /// <param name="packmodeulneed">包装模组</param>
        /// </summary>
        public ActionResult Add_ModuleNeedNum(int id, bool ismodule, decimal smtmodeulneed, decimal injekmodeulneed, decimal aftermodeulneed, decimal threemodeulneed, decimal bootnmodeulneed, decimal magneticmodeulneed, decimal pluginmodeulneed, decimal gluemodeulneed, decimal airtightmodeulneed, decimal lockmodeulneed, decimal modeulneed, decimal burnmodeulneed, decimal packmodeulneed)
        {
            //var oldinfo = db.ProcessBalance.Find(id);//根据id查找到需要修改的信息,因为值默认是0,所以输入和修改的方法是一样的
            var blance = db.ProcessBalance.Find(id);//读取值

            //日志填写
            UserOperateLog log = new UserOperateLog()
            {
                Operator = ((Users)Session["User"]).UserName,
                OperateDT = DateTime.Now,
                OperateRecord =
            "修改工序产能数据，工段" + blance.Section + "，描述" + blance.Title + ( ismodule == false ? "" : ",smt模组数量" + blance.SMTModuleNeedNum + "->" + smtmodeulneed+ ",插件模组数量" + blance.PluginModuleNeedNum + "->" + pluginmodeulneed + ",后焊模组数量" + blance.AfterModuleNeedNum + "->" + aftermodeulneed + ",三防模组数量" + blance.ThreeModuleNeedNum + "->" + threemodeulneed + ",打底壳模组数量" + blance.BottnModuleNeedNum + "->" + bootnmodeulneed + ",装磁吸模组数量" + blance.MagneticModuleNeedNum + "->" + magneticmodeulneed + ",喷墨模组数量" + blance.InjekModuleNeedNum + "->" + injekmodeulneed + ",灌胶模组数量" + blance.GuleModuleNeedNum + "->" + gluemodeulneed + ",气密模组数量" + blance.AirtightModuleNeedNum + "->" + airtightmodeulneed + ",锁面罩模组数量" + blance.LockMasModuleNeedNum + "->" + lockmodeulneed + ",模组数量" + blance.ModuleNeedNum2 + "->" + modeulneed + ",老化模组数量" + blance.BuriInModuleNeedNum + "->" + burnmodeulneed + ",包装模组数量" + blance.PackModuleNeedNum + "->" + packmodeulneed)
            };
            db.UserOperateLog.Add(log);//日志保存

            JObject value = new JObject();
            
            if (ismodule)//如果是上传模组装配.则需要填写模组需求数
            {
                //填入模组号
                blance.SMTModuleNeedNum = smtmodeulneed;//贴片模组
                blance.PluginModuleNeedNum = pluginmodeulneed;//插件模组
                blance.AfterModuleNeedNum = aftermodeulneed;//后焊模组
                blance.ThreeModuleNeedNum = threemodeulneed;//三防模组
                blance.BottnModuleNeedNum = bootnmodeulneed;//打底壳模组
                blance.MagneticModuleNeedNum = magneticmodeulneed;//装磁吸模组
                blance.InjekModuleNeedNum = injekmodeulneed;//喷墨模组
                blance.GuleModuleNeedNum = gluemodeulneed;//灌胶模组
                blance.AfterModuleNeedNum = aftermodeulneed;//气密模组
                blance.LockMasModuleNeedNum = lockmodeulneed;//锁面罩模组
                blance.ModuleNeedNum2 = modeulneed;//模组装配模组
                blance.BuriInModuleNeedNum = burnmodeulneed;//老化模组
                blance.PackModuleNeedNum = packmodeulneed;//包装模组
            }

            //oldinfo.ModuleNeedNum2 = moduleNeed;
            db.SaveChanges();//数据保存
            value.Add("message", true);
            value.Add("content", "修改成功");
            return Content(JsonConvert.SerializeObject(value));
        }

        //贴片的输入和修改
        public ActionResult Add_PickmoduleNeed(string type, string productPCBnumber, string platform, decimal moduleNeed)
        {
            JObject value = new JObject();
            var oldinfo = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == productPCBnumber && c.Platform == platform).ToList();//查找需要修改的贴片数据组,因为值默认是0,所以输入和修改的方法是一样的
            if (oldinfo.Count == 0)//如果找不到数据
            {
                value.Add("message", false);
                value.Add("content", "修改失败，找不到对应的文件");
                return Content(JsonConvert.SerializeObject(value));
            }
            //日志填写
            UserOperateLog log = new UserOperateLog()
            {
                Operator = ((Users)Session["User"]).UserName,
                OperateDT = DateTime.Now,
                OperateRecord =
            "修改工序产能数据，工段SMT贴片,原模组需求数量" + oldinfo.FirstOrDefault().ModuleNeedNum2 + "->" + moduleNeed
            };
            db.UserOperateLog.Add(log);

            //修改值
            // oldinfo.ForEach(c => c.ModuleNeedNum2 = moduleNeed);
            db.SaveChanges();
            value.Add("message", true);
            value.Add("content", "修改成功");
            return Content(JsonConvert.SerializeObject(value));
        }


        #endregion

        #endregion

        #region 贴片表操作

        /// <summary>
        /// 上传贴片表
        /// </summary>
        /// <param name="type"> 型号</param>
        /// <param name="PCBNumber"> PCB版号</param>
        /// <returns></returns>
        public ActionResult Upload_Pick_And_Place(string type, string PCBNumber, string platform)
        {
            JObject total = new JObject();
            try
            {
                JObject result = new JObject();
                HttpPostedFileBase uploadfile = Request.Files["fileup"];//查看是否有上传文件
                if (uploadfile == null)//如果没有文件上传,又调用此方法,意思为跳过
                {
                    Pick_And_Place pick_ = new Pick_And_Place();
                    pick_.Type = type;//类型
                    pick_.ProductPCBnumber = PCBNumber;//PCB板
                    pick_.Platform = platform;//平台
                    pick_.Section = "/";//工段
                    db.Pick_And_Place.Add(pick_);
                    db.SaveChanges();//添加数据

                    //传回前端,实现不刷新显示
                    result.Add("SMTExaminanMessage", "未审核");
                    result.Add("icProductName", "/");
                    result.Add("icMaxStandardTotal", null);
                    result.Add("icMaxStandardOutput", null);
                    result.Add("icMinStandardTotal", null);
                    result.Add("icMinStandardOutput", null);
                    result.Add("LightProductName", "/");
                    result.Add("LightMaxStandardTotal", null);
                    result.Add("LightMaxStandardOutput", null);
                    result.Add("LightMinStandardTotal", null);
                    result.Add("LightMinStandardOutput", null);
                    result.Add("SMTmoduleneed", null);

                    total.Add("result", true);
                    total.Add("content", result);

                    return Content(JsonConvert.SerializeObject(total));
                }
                if (uploadfile.FileName == "")//如果选择空文件,提示错误
                {
                    total.Add("result", false);
                    total.Add("content", "请选择文件");
                    return Content(JsonConvert.SerializeObject(total));
                }

                string fileExt = Path.GetExtension(uploadfile.FileName);//返回扩展名
                StringBuilder sbtime = new StringBuilder();
                sbtime.Append(DateTime.Now.Year).Append(DateTime.Now.Month).Append(DateTime.Now.Day).Append(DateTime.Now.Hour).Append(DateTime.Now.Minute).Append(DateTime.Now.Second);//将当前时间转成字符串
                string dir = "/UploadFile/" + sbtime.ToString() + fileExt;//设置虚拟路径
                string realfilepath = Request.MapPath(dir);//将虚拟地址映射到物理地址上
                string readDir = Path.GetDirectoryName(realfilepath);//获取路径字符串
                if (!Directory.Exists(readDir))//判断路径是否正确,不正确创建新文件夹
                    Directory.CreateDirectory(readDir);
                uploadfile.SaveAs(realfilepath);
                // 提取数据
                var dt = ExcelTool.ExcelToDataTable(true, realfilepath);
                var totalCount = dt.Rows.Count;//文件总行数
                int j = 16;
                while (dt.Rows[j][0].ToString() != "修订")//找到表格中为"修订"的那一行
                {
                    j++;
                }
                var content = "";
                int k = j;
                while (k + 1 < totalCount && dt.Rows[k + 1][1].ToString() != "")//找到修订模块的内容,并将内容存到content中,以"&&"隔开,如修正内容1&&修正内容2
                {
                    content = content + dt.Rows[k + 1][1].ToString() + "&&";
                    k++;
                }
                var number = dt.Rows[1][1].ToString();//版本号
                var serialNumberList = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform && c.SerialNumber == number).ToList();//查找是否含有相同含本号的数据信息
                if (serialNumberList.Count != 0)//如果有,提示错误
                {
                    total.Add("result", false);
                    total.Add("content", "已有此版本，请修改版本");
                    return Content(JsonConvert.SerializeObject(total));
                }
                //将数据存入数据库
                List<Pick_And_Place> picklist = new List<Pick_And_Place>();
                for (int i = 2; i < 16; i++)
                {
                    Pick_And_Place pick = new Pick_And_Place();
                    pick.Type = type;
                    pick.ProductPCBnumber = PCBNumber;
                    pick.Platform = platform;
                    pick.SerialNumber = dt.Rows[1][1].ToString();//编号
                    pick.Section = dt.Rows[1][3].ToString();//工段
                    pick.FileName = dt.Rows[1][6].ToString();//文件名称
                    pick.Line = i - 1;//线别
                    pick.MachineConfiguration = dt.Rows[i + 1][1].ToString();//机台配置
                    pick.ProductType = dt.Rows[i + 1][2].ToString();//产品型号
                    pick.PCBNumber = dt.Rows[i + 1][3].ToString();//pcb版号
                    pick.ProcessDescription = dt.Rows[i + 1][4].ToString();//工序描述
                    pick.Print = DataTypeChange.IsNumberic(dt.Rows[i + 1][5].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][5]), 2);//印刷
                    pick.SolderPasteInspection = DataTypeChange.IsNumberic(dt.Rows[i + 1][6].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][6]), 2);//锡膏检测
                    pick.PressedPatchNut = DataTypeChange.IsNumberic(dt.Rows[i + 1][7].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][7]), 2);//压贴片螺母
                    pick.SMTMachineNetWork = DataTypeChange.IsNumberic(dt.Rows[i + 1][8].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][8]), 2);//贴片机净作业
                    pick.PersonNum = DataTypeChange.IsNumberic(dt.Rows[i + 1][9].ToString()) == false ? 0 : Convert.ToInt32(dt.Rows[i + 1][9]);//人数
                    pick.Bottleneck = DataTypeChange.IsNumberic(dt.Rows[i + 1][10].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][10]), 2);//瓶颈  
                    pick.CapacityPerHour = DataTypeChange.IsNumberic(dt.Rows[i + 1][11].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][11]), 2);//每小时标准产能
                    pick.PerCapitaCapacity = DataTypeChange.IsNumberic(dt.Rows[i + 1][12].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][12]), 2);//每小时人均产能
                    pick.LatestUnitPrice = DataTypeChange.IsNumberic(dt.Rows[i + 1][13].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[i + 1][13]), 2);//产品最新单价
                    pick.Remark = dt.Rows[i + 1][14].ToString();//备注


                    pick.MakingPeople = dt.Rows[j + 1][5].ToString();//制定人
                    if (dt.Rows[j + 2][5].ToString() == "")//如果制定人的模块内容为空,则时间传null,因为时间的类型是datetime?不能传""
                    {
                        pick.MakingTime = null;
                    }
                    else
                    {
                        var value = dt.Rows[j + 2][5].ToString();
                        pick.MakingTime = TimeChange(value);
                    }

                    pick.ExaminanPeople = dt.Rows[j + 1][8].ToString();//审批
                    if (dt.Rows[j + 2][8].ToString() == "")//如果审批人的模块内容为空,则时间传null,因为时间的类型是datetime?不能传""
                    {
                        pick.ExaminanTime = null;
                    }
                    else
                    {
                        var value = dt.Rows[j + 2][8].ToString();
                        pick.ExaminanTime = TimeChange(value);
                        pick.IsPassExaminan = true;//审核默认为通过
                    }

                    pick.ApproverPeople = dt.Rows[j + 1][11].ToString();//批准
                    if (dt.Rows[j + 2][11].ToString() == "")//如果批准人的模块内容为空,则时间传null,因为时间的类型是datetime?不能传""
                    {
                        pick.ApproverTime = null;
                    }
                    else
                    {
                        //时间转换
                        var time3 = dt.Rows[j + 2][11].ToString().Split('/');
                        var year = "20" + time3[2];
                        pick.ApproverTime = new DateTime(Convert.ToInt32(year), Convert.ToInt32(time3[0]), Convert.ToInt32(time3[1]));

                        pick.IsPassApprover = true;//批准默认为通过
                    }

                    pick.ControlledPeople = dt.Rows[j + 1][14].ToString();//受控
                    if (dt.Rows[j + 2][14].ToString() == "")//如果受控人的模块内容为空,则时间传null,因为时间的类型是datetime?不能传""
                    {
                        pick.ControlledTime = null;
                    }
                    else
                    {
                        //时间转换
                        var time4 = dt.Rows[j + 2][14].ToString().Split('/');
                        var year = "20" + time4[2];
                        pick.ControlledTime = new DateTime(Convert.ToInt32(year), Convert.ToInt32(time4[0]), Convert.ToInt32(time4[1]));

                        pick.IsPassControlled = true;//受控默认为通过
                    }
                    if (content != null)
                    {
                        pick.RevisionContent = content.Substring(0, content.Length - 2);//去掉最后的两个&&
                    }

                    picklist.Add(pick);
                }
                db.Pick_And_Place.AddRange(picklist);
                db.SaveChanges();//往数据库添加数据
                var iccount = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform).ToList();//查找刚才添加的数据
                //返回数据给前面,实现不刷新显示
                if (iccount.Where(c => c.ProcessDescription == "IC面贴装").Count() == 0)//如果数据没有IC面贴装数据,则传回null
                {
                    result.Add("SMTExaminanMessage", "审核通过");
                    result.Add("icProductName", "IC面贴装");
                    result.Add("icMaxStandardTotal", null);
                    result.Add("icMaxStandardOutput", null);
                    result.Add("icMinStandardTotal", null);
                    result.Add("icMinStandardOutput", null);
                }
                else
                {
                    var icMaxStandardTotal = iccount.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.PersonNum);//IC面最大标准人数
                    var icMaxStandardOutput = iccount.Where(c => c.ProcessDescription == "IC面贴装").Max(c => c.CapacityPerHour);//IC面最大标配产能
                    var icMinStandardTotal = iccount.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.PersonNum);//IC面最小标准人数
                    var icMinStandardOutput = iccount.Where(c => c.ProcessDescription == "IC面贴装").Min(c => c.CapacityPerHour);//IC面最小标准产能
                    result.Add("SMTExaminanMessage", "审核通过");
                    result.Add("icProductName", "IC面贴装");
                    result.Add("icMaxStandardTotal", icMaxStandardTotal);
                    result.Add("icMaxStandardOutput", icMaxStandardOutput);
                    result.Add("icMinStandardTotal", icMinStandardTotal);
                    result.Add("icMinStandardOutput", icMinStandardOutput);
                }// result.Add("LimtProductName", true);
                if (iccount.Where(c => c.ProcessDescription == "灯面贴装").Count() == 0)//如果数据没有灯面贴装数据,则传回null
                {
                    result.Add("SMTExaminanMessage", "审核通过");
                    result.Add("icProductName", "灯面贴装");
                    result.Add("icMaxStandardTotal", null);
                    result.Add("icMaxStandardOutput", null);
                    result.Add("icMinStandardTotal", null);
                    result.Add("icMinStandardOutput", null);
                }
                else
                {
                    var LightMaxStandardTotal = iccount.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.PersonNum);//灯面最大标准人数
                    var LightMaxStandardOutput = iccount.Where(c => c.ProcessDescription == "灯面贴装").Max(c => c.CapacityPerHour);//灯面最大标配产能
                    var LightMinStandardTotal = iccount.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.PersonNum);//灯面最小标准人数
                    var LightMinStandardOutput = iccount.Where(c => c.ProcessDescription == "灯面贴装").Min(c => c.CapacityPerHour);//灯面最小标准产能
                    result.Add("LightProductName", "灯面贴装");
                    result.Add("LightMaxStandardTotal", LightMaxStandardTotal);
                    result.Add("LightMaxStandardOutput", LightMaxStandardOutput);
                    result.Add("LightMinStandardTotal", LightMinStandardTotal);
                    result.Add("LightMinStandardOutput", LightMinStandardOutput);
                }
                result.Add("SMTmoduleneed", null);
                total.Add("result", true);
                total.Add("content", result);
                return Content(JsonConvert.SerializeObject(total));
            }
            catch (Exception ex)
            {
                total.Add("result", false);
                total.Add("content", ex.Message);
                return Content(JsonConvert.SerializeObject(total));
            }
        }

        /// <summary>
        /// 显示全部版本贴片表
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版号</param>
        /// <param name="platform">平台</param>
        /// <returns></returns>
        public ActionResult DisplayALL_Pick_And_Place(string type, string PCBNumber, string platform)
        {
            var infoList = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform).Select(c => c.SerialNumber).Distinct().ToList();//查找符合条件的贴片信息,并提取其中的版本号
            JArray result = new JArray();
            foreach (var item in infoList)//循环版本号
            {
                var info = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform && c.SerialNumber == item).ToList();//找到不同版本号的信息
                var message = info.FirstOrDefault();
                JObject number = new JObject();
                number.Add("number", item);//版本号
                number.Add("Section", message.Section);//工段
                number.Add("FileName", message.FileName);//标题
                JArray line = new JArray();
                foreach (var infoitem in info)
                {
                    JObject itemjobject = new JObject();
                    itemjobject.Add("Line", infoitem.Line);//线别
                    itemjobject.Add("MachineConfiguration", infoitem.MachineConfiguration); //机台配置
                    itemjobject.Add("ProductType", infoitem.ProductType);//产品型号
                    itemjobject.Add("PCBNumber", infoitem.PCBNumber);//PCB版号
                    itemjobject.Add("ProcessDescription", infoitem.ProcessDescription);//工序描述
                    itemjobject.Add("Print", infoitem.Print);//印刷
                    itemjobject.Add("SolderPasteInspection", infoitem.SolderPasteInspection);//锡膏检测
                    itemjobject.Add("PressedPatchNut", infoitem.PressedPatchNut);//压贴片螺母
                    itemjobject.Add("SMTMachineNetWork", infoitem.SMTMachineNetWork);//贴片机净作业
                    itemjobject.Add("PersonNum", infoitem.PersonNum);//人数
                    itemjobject.Add("Bottleneck", infoitem.Bottleneck);//瓶颈
                    itemjobject.Add("CapacityPerHour", infoitem.CapacityPerHour);//每小时标准产能
                    itemjobject.Add("PerCapitaCapacity", infoitem.PerCapitaCapacity);//每小时人均产能
                    itemjobject.Add("LatestUnitPrice", infoitem.LatestUnitPrice);//产品最新单价
                    itemjobject.Add("Remark", infoitem.Remark);//备注
                    line.Add(itemjobject);
                }

                number.Add("Line", line);
                number.Add("RevisionContent", message.RevisionContent);//修订内容
                number.Add("MakingPeople", message.MakingPeople);//制定人
                number.Add("MakingTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", message.MakingTime));//制定时间
                number.Add("IsPassExaminan", message.IsPassExaminan);//审核是否通过
                number.Add("ExaminanPeople", message.ExaminanPeople);//审核人
                number.Add("ExaminanTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", message.ExaminanTime));//审核日期
                number.Add("IsPassApprover", message.IsPassApprover);//批准是否通过
                number.Add("ApproverPeople", message.ApproverPeople);//批准人
                number.Add("ApproverTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", message.ApproverTime));//批准日趋
                number.Add("IsPassControlled", message.IsPassControlled);//受控是否通过
                number.Add("ControlledPeople", message.ControlledPeople);//受控人
                number.Add("ControlledTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", message.ControlledTime));//受控日期

                result.Add(number);
            }

            return Content(JsonConvert.SerializeObject(result));
        }

        /// <summary>
        /// 删除贴片表
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版号</param>
        /// <param name="platform">平台</param>
        /// <returns></returns>
        public ActionResult Delete_Pick_And_Place(string type, string PCBNumber, string platform)
        {
            if (Session["User"] == null)//判断是否有登录信息,没有就跳到登录页面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            var item = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform).Max(c => c.SerialNumber);//找到符合筛选条件的最大版本
            var info = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform && c.SerialNumber == item).ToList();//找到最大版本的数据信息
            var message = info.FirstOrDefault();

            //填写日志
            UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段SMT，型号，PCB编号,平台为" + type + "，" + PCBNumber + "，" + platform };
            db.UserOperateLog.Add(log);

            JObject number = new JObject();
            if (message.ExaminanPeople != "" && message.ExaminanTime != null)//找到其中一条信息,查看其中审核信息是否为空,如果不为空,则查看删除人是否与审核人一致,一致能删,否则不能删
            {
                if (((Users)Session["User"]).UserName == message.ExaminanPeople || ((Users)Session["User"]).Role == "系统管理员")//删除人是否与审核人一致
                {
                    db.Pick_And_Place.RemoveRange(info);
                    db.SaveChanges();
                    number.Add("message", true);
                    number.Add("content", "删除成功");
                }
                else
                {
                    number.Add("message", false);
                    number.Add("content", "删除失败，此表已审核，需审核人员删除");
                }
            }
            else//没有审核则可以删除
            {
                db.Pick_And_Place.RemoveRange(info);
                db.SaveChanges();
                number.Add("message", true);
                number.Add("content", "删除成功");
            }
            return Content(JsonConvert.SerializeObject(number));
        }

        /// <summary>
        /// 审核人签名或批准人签名
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版本号</param>
        /// <param name="Section">工段</param>
        /// <param name="number">编号</param>
        /// <param name="status">审核或批准</param>
        public bool Autograph_Pick_And_Place(string type, string PCBNumber, string Section, string number, string status, bool isPass)
        {
            if (Session["User"] == null)//判断是否有登录信息,没有则返回false
            {
                return false;
            }
            var info = db.Pick_And_Place.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.SerialNumber == number).ToList();//查找符合条件 的数据信息
            if (status == "审核")
            {
                info.ForEach(c => { c.ExaminanPeople = ((Users)Session["User"]).UserName; c.ExaminanTime = DateTime.Now; c.IsPassExaminan = isPass; });//修改审核信息
                db.SaveChanges();
                return true;
            }
            if (status == "批准")
            {
                info.ForEach(c => { c.ApproverPeople = ((Users)Session["User"]).UserName; c.ApproverTime = DateTime.Now; c.IsPassApprover = isPass; });//修改批准信息
                db.SaveChanges();
                return true;
            }
            if (status == "受控")
            {
                info.ForEach(c => { c.ControlledPeople = ((Users)Session["User"]).UserName; c.ControlledTime = DateTime.Now; c.IsPassControlled = isPass; });//修改受控信息
                db.SaveChanges();
                return true;
            }
            return false;
        }

        #endregion


        #region 工序平衡卡表

        /// <summary>
        /// 上传工序平衡表
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版号</param>
        /// <returns></returns>
        public ActionResult Upload_ProcessBalance(string type, string PCBNumber, string platform, string seaction)
        {
            JObject total = new JObject();
            try
            {
                JObject jObject = new JObject();
                HttpPostedFileBase uploadfile = Request.Files["fileup"];//获得前端上传的文件
                if (uploadfile == null)//如果文件未null,又调用此方法,说明是跳过
                {
                    ProcessBalance processBalance1 = new ProcessBalance();
                    processBalance1.Platform = platform;//平台
                    processBalance1.Type = type;//类型
                    processBalance1.ProductPCBnumber = PCBNumber;//PCB板
                    processBalance1.Section = seaction;//工段
                    processBalance1.Title = "/";
                    db.ProcessBalance.Add(processBalance1);
                    db.SaveChanges();//添加数据
                    total.Add("result", true);
                    var message1 = db.ProcessBalance.OrderByDescending(c => c.Id).Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform && c.Section == seaction && c.Title == "/").FirstOrDefault();//查找刚刚添加的数据

                    jObject = BlanceItem(message1.Id, "/", seaction);//调用通用模板,返回前面实现不刷新显示
                    total.Add("content", jObject);
                    return Content(JsonConvert.SerializeObject(total));
                }
                if (uploadfile.FileName == "")//如果选择空文件,提示错误
                {
                    total.Add("result", false);
                    total.Add("content", "请选择文件");
                    return Content(JsonConvert.SerializeObject(total));
                }

                string fileExt = Path.GetExtension(uploadfile.FileName);//获得文件扩展名
                StringBuilder sbtime = new StringBuilder();
                sbtime.Append(DateTime.Now.Year).Append(DateTime.Now.Month).Append(DateTime.Now.Day).Append(DateTime.Now.Hour).Append(DateTime.Now.Minute).Append(DateTime.Now.Second);//将时间装换字符
                string dir = "/UploadFile/" + sbtime.ToString() + fileExt;//等到虚拟路径
                string realfilepath = Request.MapPath(dir);//将虚拟路径映射到物理路径上
                string readDir = Path.GetDirectoryName(realfilepath);
                if (!Directory.Exists(readDir))//判断路径是否正确,错误,新建一个文件夹
                    Directory.CreateDirectory(readDir);
                uploadfile.SaveAs(realfilepath);
                //提取数据
                var dt = ExcelTool.ExcelToDataTable(true, realfilepath);
                var totalcount = dt.Rows.Count;
                int j = 16;
                while (dt.Rows[j][0].ToString() != "修订")//找到"修订"的那一行
                {
                    j++;
                }
                var content = "";
                int k = j;
                while (k + 1 < totalcount && dt.Rows[k + 1][1].ToString() != "")//将修订模块的数据赋值到content ,并以"☆"隔开
                {
                    content = content + dt.Rows[k + 1][1].ToString() + "☆";
                    k++;
                }
                var number = dt.Rows[1][1].ToString();//版本号
                var title = dt.Rows[2][1].ToString();//工序描述
                var isExit = db.ProcessBalance.Where(c => c.Platform == platform && c.Type == type && c.ProductPCBnumber == PCBNumber && c.SerialNumber == number && c.Section == seaction).ToList();//查看上传的版本号是否重复
                if (isExit.Count != 0)
                {
                    total.Add("result", false);
                    total.Add("content", "已有此版本，请修改版本");
                    return Content(JsonConvert.SerializeObject(total));
                }
                ProcessBalance processBalance = new ProcessBalance();
                processBalance.Platform = platform;
                processBalance.Type = type;
                processBalance.ProductPCBnumber = PCBNumber;
                processBalance.SerialNumber = dt.Rows[1][1].ToString();//编号
                processBalance.Section = seaction;//工段
                processBalance.Title = dt.Rows[2][1].ToString();//标题
                processBalance.StandardTotal = DataTypeChange.IsNumberic(dt.Rows[2][5].ToString()) == false ? 0 : Convert.ToInt32(dt.Rows[2][5]);//标准总人数
                processBalance.BalanceRate = DataTypeChange.IsNumberic(dt.Rows[2][6].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[2][6]) * 100, 2);//平衡率
                processBalance.Bottleneck = DataTypeChange.IsNumberic(dt.Rows[2][7].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[2][7]), 2);//瓶颈
                processBalance.StandardOutput = DataTypeChange.IsNumberic(dt.Rows[2][8].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[2][8]), 2);//标准产量
                processBalance.StandardHourlyOutputPerCapita = DataTypeChange.IsNumberic(dt.Rows[2][10].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[2][10]), 2);//标准人均时产量
                processBalance.ProductWorkingHours = DataTypeChange.IsNumberic(dt.Rows[2][12].ToString()) == false ? 0 : Math.Round(Convert.ToDecimal(dt.Rows[2][12]), 2);//产品工时

                string ProcessName = "";
                int pro = 4;
                while (dt.Rows[pro][1].ToString() != "")
                {
                    ProcessName = ProcessName + dt.Rows[pro][1].ToString() + "☆";
                    pro++;
                }
                processBalance.ProcessName = ProcessName.Substring(0, ProcessName.Length - 1);//工序名称

                string StandarPersondNumber = "";
                for (int i = 4; i <= pro; i++)
                {
                    StandarPersondNumber = StandarPersondNumber + dt.Rows[i][5].ToString() + "☆";
                }

                processBalance.StandarPersondNumber = StandarPersondNumber.Substring(0, StandarPersondNumber.Length - 1);//标准人数

                string StandardNumber = "";
                for (int i = 4; i <= pro; i++)
                {
                    StandardNumber = StandardNumber + dt.Rows[i][6].ToString() + "☆";
                }

                processBalance.StandardNumber = StandardNumber.Substring(0, StandardNumber.Length - 1);//标准工时

                string UnioTime = "";
                for (int i = 4; i <= pro; i++)
                {
                    UnioTime = UnioTime + dt.Rows[i][7].ToString() + "☆";
                }

                processBalance.UnioTime = UnioTime.Substring(0, UnioTime.Length - 1);//单位工时

                string JigName = "";
                for (int i = 4; i <= pro; i++)
                {
                    JigName = JigName + dt.Rows[i][8].ToString() + "☆";
                }

                processBalance.JigName = JigName.Substring(0, JigName.Length - 1);//夹具名称

                string MachineTime = "";
                for (int i = 4; i <= pro; i++)
                {
                    MachineTime = MachineTime + dt.Rows[i][10].ToString() + "☆";
                }

                processBalance.MachineTime = MachineTime.Substring(0, MachineTime.Length - 1);//机器时间

                string MachineNumber = "";
                for (int i = 4; i <= pro; i++)
                {
                    MachineNumber = MachineNumber + dt.Rows[i][11].ToString() + "☆";
                }

                processBalance.MachineNumber = MachineNumber.Substring(0, MachineNumber.Length - 1);//机器数量

                string JigNum = "";
                for (int i = 4; i <= pro; i++)
                {
                    JigNum = JigNum + dt.Rows[i][12].ToString() + "☆";
                }

                processBalance.JigNum = JigNum.Substring(0, JigNum.Length - 1);//夹具数量

                string Remark = "";
                for (int i = 4; i <= pro; i++)
                {
                    Remark = Remark + dt.Rows[i][13].ToString() + "☆";
                }

                processBalance.Remark = Remark.Substring(0, Remark.Length - 1);//备注

                processBalance.MakingPeople = dt.Rows[j + 1][7].ToString();//制定人
                if (dt.Rows[j + 2][7].ToString() == "")//判断是否有制定人,没有制定时间为null 
                {
                    processBalance.MakingTime = null;
                }
                else
                {
                    var value = dt.Rows[j + 2][7].ToString();
                    processBalance.MakingTime = TimeChange(value);
                }

                processBalance.ExaminanPeople = dt.Rows[j + 1][9].ToString();//审批
                if (dt.Rows[j + 2][9].ToString() == "")//判断是否有审批人,没有审批时间为null 
                {
                    processBalance.ExaminanTime = null;
                }
                else
                {
                    //时间转换
                    var time2 = dt.Rows[j + 2][9].ToString().Split('/');
                    var year = "20" + time2[2];
                    processBalance.ExaminanTime = new DateTime(Convert.ToInt32(year), Convert.ToInt32(time2[0]), Convert.ToInt32(time2[1]));
                    processBalance.IsPassExaminan = true;
                }

                processBalance.ApproverPeople = dt.Rows[j + 1][11].ToString();//批准
                if (dt.Rows[j + 2][11].ToString() == "")//判断是否有批准人,没有批准时间为null 
                {
                    processBalance.ApproverTime = null;
                }
                else
                {
                    //时间转换
                    var time3 = dt.Rows[j + 2][11].ToString().Split('/');
                    var year = "20" + time3[2];
                    processBalance.ApproverTime = new DateTime(Convert.ToInt32(year), Convert.ToInt32(time3[0]), Convert.ToInt32(time3[1]));
                    processBalance.IsPassApprover = true;
                }

                processBalance.ControlledPeople = dt.Rows[j + 1][13].ToString();//受控
                if (dt.Rows[j + 2][13].ToString() == "")//判断是否有受控人,没有受控时间为null 
                {
                    processBalance.ControlledTime = null;
                }
                else
                {
                    //时间装换
                    var time4 = dt.Rows[j + 2][13].ToString().Split('/');
                    var year = "20" + time4[2];
                    processBalance.ControlledTime = new DateTime(Convert.ToInt32(year), Convert.ToInt32(time4[0]), Convert.ToInt32(time4[1]));
                    processBalance.IsPassControlled = true;
                }
                if (content != "")
                {
                    processBalance.RevisionContent = content.Substring(0, content.Length - 1);//去除最后的符号"☆"
                }
                db.ProcessBalance.Add(processBalance);
                db.SaveChanges();//数据保存
                var message = db.ProcessBalance.OrderByDescending(c => c.Id).Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Platform == platform && c.Section == seaction && c.Title == title).FirstOrDefault();//读取刚刚新增的数据
                jObject = BlanceItem(message.Id, message.Title, seaction);//调用通用模板,返回json给前端,实现不刷新显示
                total.Add("result", true);
                total.Add("content", jObject);
                return Content(JsonConvert.SerializeObject(total));
            }
            catch (Exception ex)
            {
                total.Add("result", false);
                total.Add("content", ex.Message);
                return Content(JsonConvert.SerializeObject(total));
            }
        }
        /// <summary>
        /// 上传平衡表通用模板,返回给前端
        /// </summary>
        /// <param name="Id">id</param>
        /// <param name="Title">工序描述</param>
        /// <param name="seaction">工段</param>
        /// <returns></returns>
        public JObject BlanceItem(int Id, string Title, string seaction)
        {
            JObject jObject = new JObject();
            switch (seaction)
            {
                case "后焊":
                    jObject.Add("AfterWeldExaminanMessage", "未审核");
                    jObject.Add("AfterWeldID", Id);
                    jObject.Add("AfterWeldProcessName", Title);
                    jObject.Add("AfterWeldStandardTotal", null);
                    jObject.Add("AfterWeldStandardOutput", null);
                    jObject.Add("AfterWeldStandardHourlyOutputPerCapita", null);
                    jObject.Add("AfterWeldPdf", false);
                    jObject.Add("AfterWeldImg", false);
                    break;
                case "三防":
                    jObject.Add("ThreeProfExaminanMessage", "未审核");
                    jObject.Add("ThreeProfID", Id);
                    jObject.Add("ThreeProfProcessName", Title);
                    jObject.Add("ThreeProfStandardTotal", null);
                    jObject.Add("ThreeProfStabdardOutput", null);
                    jObject.Add("ThreeProfPdf", false);
                    jObject.Add("ThreeProfJpg", false);
                    break;
                case "打底壳":
                    jObject.Add("BottomCasEidt", false);//前端用
                    jObject.Add("BottomCasExaminanMessage", "未审核");
                    jObject.Add("BottomCasID", Id);
                    jObject.Add("BottomCasProcessName", Title);
                    jObject.Add("BottomCasStandardTotal", null);
                    jObject.Add("BottomCasStandardOutput", null);
                    jObject.Add("BottomCasStandardHourlyOutputPerCapita", null);
                    jObject.Add("BottomCasDispensMachineNum", null);
                    jObject.Add("BottomCasScrewMachineNum", null);
                    jObject.Add("BottomCasPdf", false);
                    jObject.Add("BottomCasImg", false);
                    break;
                case "锁面罩":
                    jObject.Add("LockTheMaskEdit", false);//前端用
                    jObject.Add("LockTheMaskExaminanMessage", "未审核");
                    jObject.Add("LockTheMaskID", Id);
                    jObject.Add("LockTheMaskProcessName", Title);
                    jObject.Add("LockTheMaskStandardTotal", null);
                    jObject.Add("LockTheMaskStandardOutput", null);
                    jObject.Add("LockTheMaskStandardHourlyOutputPerCapita", null);
                    jObject.Add("LockTheMaskScrewMachineNum", null);
                    jObject.Add("LockTheMaskPdf", false);
                    jObject.Add("LockTheMaskImg", false);
                    break;
                case "模组装配":
                    jObject.Add("ModuleID", Id);
                    jObject.Add("ModuleExaminanMessage", "未审核");
                    jObject.Add("ModuleProcessName", Title);
                    jObject.Add("ModuleStandardTotal", null);
                    jObject.Add("ModuleBalanceRate", null);
                    jObject.Add("ModuleBottleneck", null);
                    jObject.Add("ModuleStandardOutput", null);
                    jObject.Add("ModuleStandardHourlyOutputPerCapita", null);
                    jObject.Add("ModulePdf", false);
                    jObject.Add("ModuleImg", false);
                    break;
                case "包装":
                    jObject.Add("PackingID", Id);
                    jObject.Add("PackingExaminanMessage", "未审核");
                    jObject.Add("PackingProcessName", Title);
                    jObject.Add("PackingStandardTotal", null);
                    jObject.Add("PackingStandardOutput", null);
                    jObject.Add("PackingPdf", false);
                    jObject.Add("PackingImg", false);
                    break;
                case "装磁吸安装板":
                    jObject.Add("MagneticExaminanMessage", "未审核");
                    jObject.Add("MagneticID", Id);
                    jObject.Add("MagneticProcessName", Title);
                    jObject.Add("MagneticStandardTotal", null);
                    jObject.Add("MagneticStabdardOutput", null);
                    jObject.Add("MagneticStandardHourlyOutputPerCapita", null);
                    jObject.Add("MagneticPdf", false);
                    jObject.Add("MagneticImg", false);
                    break;
            }
            return jObject;
        }

        /// <summary>
        /// 显示全部版本工序平衡表
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版号</param>
        /// <param name="Section">工段</param>
        /// <param name="platform">平台</param>
        /// <param name="title">标题</param>
        /// <returns></returns>
        public ActionResult DisplayALL_ProcessBalance(string type, string PCBNumber, string Section, string platform, string title)
        {
            var infoList = db.ProcessBalance.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.Platform == platform && c.Title == title).Select(c => c.SerialNumber).Distinct().ToList();//查找所有符合筛选条件的版本号集合
            JArray result = new JArray();
            foreach (var item in infoList)//循环版本号
            {
                var info = db.ProcessBalance.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.Platform == platform && c.Title == title && c.SerialNumber == item).FirstOrDefault();//找到对应版本号的内容

                JObject number = new JObject();
                number.Add("number", item);
                number.Add("Section", info.Section);//工段
                number.Add("StandardTotal", info.StandardTotal);//标准总人数
                number.Add("BalanceRate", info.BalanceRate);//平衡率
                number.Add("Bottleneck", info.Bottleneck);//瓶颈
                number.Add("StandardOutput", info.StandardOutput);//标准产量l
                number.Add("StandardHourlyOutputPerCapita", info.StandardHourlyOutputPerCapita);//标准人均时产量
                number.Add("ProductWorkingHours", info.ProductWorkingHours);//产品工时
                number.Add("Title", info.Title);//标题
                JArray line = new JArray();
                string[] name = info.ProcessName.Split('☆');//以☆进行分割
                string[] person = info.StandarPersondNumber.Split('☆');
                string[] workingTime = info.StandardNumber.Split('☆');
                string[] itemWarkTime = info.UnioTime.Split('☆');
                string[] jiaName = info.JigName.Split('☆');
                string[] machineTime = info.MachineTime.Split('☆');
                string[] machineNum = info.MachineNumber.Split('☆');
                string[] jiaNum = info.JigNum.Split('☆');
                string[] remark = info.Remark.Split('☆');
                for (int i = 0; i < name.Count(); i++)//循环分割的数据,将每行的数据读取出来
                {
                    JObject itemjobject = new JObject();
                    itemjobject.Add("ProcessName", name[i]); //工序名称
                    itemjobject.Add("StandarPersondNumber", person[i] == "" ? null : person[i]);//标注人数
                    itemjobject.Add("StandardNumber", workingTime[i] == "" ? null : workingTime[i]);//标准工时
                    itemjobject.Add("UnioTime", itemWarkTime[i] == "" ? null : itemWarkTime[i]);//单位工时
                    itemjobject.Add("JigName", jiaName[i] == "" ? null : jiaName[i]);//夹具名称
                    itemjobject.Add("MachineTime", machineTime[i] == "" ? null : machineTime[i]);//机器时间
                    itemjobject.Add("MachineNumber", machineNum[i] == "" ? null : machineNum[i]);//机器数量
                    itemjobject.Add("JigNum", jiaNum[i] == "" ? null : jiaNum[i]);//夹具个数
                    itemjobject.Add("Remark", remark[i] == "" ? null : remark[i]);//备注
                    line.Add(itemjobject);
                }

                number.Add("List", line);
                number.Add("RevisionContent", info.RevisionContent);//修订内容
                number.Add("MakingPeople", info.MakingPeople);//制定人
                number.Add("MakingTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", info.MakingTime));//制定时间
                number.Add("IsPassExaminan", info.IsPassExaminan);//审核是否通过
                number.Add("ExaminanPeople", info.ExaminanPeople);//审核人
                number.Add("ExaminanTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", info.ExaminanTime));//审核日期
                number.Add("IsPassApprover", info.IsPassApprover);//批准是否通过
                number.Add("ApproverPeople", info.ApproverPeople);//批准人
                number.Add("ApproverTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", info.ApproverTime));//批准日趋
                number.Add("IsPassControlled", info.IsPassControlled);//受控是否通过
                number.Add("ControlledPeople", info.ControlledPeople);//受控人
                number.Add("ControlledTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", info.ControlledTime));//受控日期

                result.Add(number);
            }

            return Content(JsonConvert.SerializeObject(result));
        }

        /// <summary>
        /// 删除工序平衡表
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版号</param>
        /// <param name="Section">工段</param>
        /// <param name="platform">平台</param>
        /// <param name="title">标题</param>
        /// <returns></returns>
        public ActionResult Delete_ProcessBalance(string type, string PCBNumber, string Section, string platform, string title)
        {
            if (Session["User"] == null)//判断是否登录,没有登录跳到登录界面
            {
                return RedirectToAction("Login", "Users", new { col = "Process_Capacity", act = "TotalProcess_Capacity" });
            }
            var item = db.ProcessBalance.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.Platform == platform && c.Title == title).Max(c => c.SerialNumber);//查找符合条件的最大版本号

            var info = db.ProcessBalance.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.Platform == platform && c.Title == title && c.SerialNumber == item).FirstOrDefault();//找到最大版本号的平衡表信息

            //填写日志
            UserOperateLog log = new UserOperateLog() { Operator = ((Users)Session["User"]).UserName, OperateDT = DateTime.Now, OperateRecord = "删除工序产能数据，工段" + Section + "，型号，PCB编号,平台,标题为" + type + "，" + PCBNumber + "，" + platform + "," + title };
            db.UserOperateLog.Add(log);

            JObject number = new JObject();
            if (info.ExaminanPeople != "" && info.ExaminanTime != null)//如果审核人员不为空,判断审核人员是否为删除人员,是能删,否则不能删
            {
                if (((Users)Session["User"]).UserName == info.ExaminanPeople || ((Users)Session["User"]).Role == "系统管理员")
                {
                    db.ProcessBalance.Remove(info);
                    db.SaveChanges();
                    number.Add("message", true);
                    number.Add("content", "删除成功");
                }
                else
                {
                    number.Add("message", false);
                    number.Add("content", "删除失败，此表已审核，需审核人员删除");
                }
            }
            else//没有审核人员,可以删
            {
                db.ProcessBalance.Remove(info);
                db.SaveChanges();
                number.Add("message", true);
                number.Add("content", "删除成功");
            }

            return Content(JsonConvert.SerializeObject(number));
        }

        /// <summary>
        /// 审核人签名或批准人签名
        /// </summary>
        /// <param name="type">型号</param>
        /// <param name="PCBNumber">PCB版本号</param>
        /// <param name="Section">工段</param>
        /// <param name="number">编号</param>
        /// <param name="status">审核或批准</param>
        public bool Autograph_ProcessBalance(string type, string PCBNumber, string Section, string number, string status, bool isPass)
        {
            if (Session["User"] == null)//判断是否有登录
            {
                return false;
            }
            var info = db.ProcessBalance.Where(c => c.Type == type && c.ProductPCBnumber == PCBNumber && c.Section == Section && c.SerialNumber == number).ToList();//查找符合条件的数据
            if (status == "审核")
            {
                info.ForEach(c => { c.ExaminanPeople = ((Users)Session["User"]).UserName; c.ExaminanTime = DateTime.Now; c.IsPassExaminan = isPass; });//修改内容
                db.SaveChanges();
                return true;
            }
            if (status == "批准")
            {
                info.ForEach(c => { c.ApproverPeople = ((Users)Session["User"]).UserName; c.ApproverTime = DateTime.Now; c.IsPassApprover = isPass; });//修改内容
                db.SaveChanges();
                return true;
            }
            if (status == "受控")
            {
                info.ForEach(c => { c.ControlledPeople = ((Users)Session["User"]).UserName; c.ControlledTime = DateTime.Now; c.IsPassControlled = isPass; });//修改内容
                db.SaveChanges();
                return true;
            }
            return false;
        }

        #endregion

        #region 图片PDF相关操作

        //上传图片或PDF
        public bool UploadProcess_Capacity(int id, string seaction, string processName)
        {
            if (Request.Files.Count > 0)
            {
                HttpPostedFileBase file = Request.Files["uploadProcess_Capacity"];//获取上传内容
                var fileType = file.FileName.Substring(file.FileName.Length - 4, 4).ToLower();
                //创建总目录
                if (Directory.Exists(@"D:\MES_Data\Process_Capacity\" + id.ToString()) == false)
                {
                    var info = db.Process_Capacity_Total.Find(id);
                    if (Directory.Exists(@"D:\MES_Data\Process_Capacity\") == false)//如果不存在就创建订单文件夹
                    {
                        Directory.CreateDirectory(@"D:\MES_Data\Process_Capacity\");
                    }
                    System.IO.File.AppendAllText(@"D:\MES_Data\Process_Capacity\directory.txt", "\n id:" + id + "对应的是--------型号:" + info.Type + ",平台:" + info.Platform + ",Pcb编号:" + info.ProductPCBnumber + "\n");
                }
                if (Directory.Exists(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\") == false)//如果不存在就创建订单文件夹
                {
                    Directory.CreateDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
                }
                processName = processName.Replace("*", "X");//替换字符串,Windows系统文件夹命名不允许有*
                processName = processName.Replace("/", "々");//替换字符串,Windows系统文件夹命名不允许有/
                if (fileType == ".pdf")
                {
                    file.SaveAs(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\" + processName + ".pdf");
                }
                else
                {
                    List<FileInfo> fileInfos = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
                    int jpg_count = fileInfos.Where(c => c.Name.StartsWith(processName) && c.Name.Substring(c.Name.Length - 4, 4) == fileType).Count();
                    file.SaveAs(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\" + processName + (jpg_count + 1) + fileType);
                }
                return true;
            }
            return false;
        }

        //删除图片或者PDF
        public ActionResult DeleteProcess_Capacity(int id, string seaction, string processName)
        {

            //if (Directory.Exists(@"D:\MES_Data\Process_Capacity\" + platform + "_" + type + "\\") == false)//如果不存在就创建订单文件夹
            //{
            //    Directory.CreateDirectory(@"D:\MES_Data\Process_Capacity\" + platform + "_" + type + "\\");
            //}
            //List<FileInfo> fileInfos = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + platform + "_" + type + "\\");

            //int jpg_count = fileInfos.Where(c => c.Name.StartsWith(seaction) && c.Name.Substring(c.Name.Length - 4, 4) == fileType).Count();
            //file.SaveAs(@"D:\MES_Data\AssembleAbnormalOrder_Files\" + platform + "_" + type + "_" + seaction + (jpg_count + 1) + fileType);

            return View();
        }
        //查看图片 
        public ActionResult DisplayImg(int id, string seaction, string processName)
        {
            processName = processName.Replace("*", "X");//替换字符串,Windows系统文件夹命名不允许有*
            processName = processName.Replace("/", "々");//替换字符串,Windows系统文件夹命名不允许有/
            List<FileInfo> filesInfo = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
            filesInfo = filesInfo.Where(c => c.Name.StartsWith(processName) && c.Name.Substring(c.Name.Length - 4, 4) == ".jpg").ToList();
            JArray json = new JArray();
            JObject result = new JObject();
            if (filesInfo.Count() > 0)
            {
                foreach (var item in filesInfo)
                {
                    string path = @"/MES_Data/Process_Capacity/" + id.ToString() + "/" + seaction + "/" + item.Name;
                    json.Add(path);
                }
                result.Add("have", true);
                result.Add("path", json);
                return Content(JsonConvert.SerializeObject(result));
            }
            else
            {
                result.Add("have", false);
                result.Add("path", null);
                return Content(JsonConvert.SerializeObject(result));
            }
        }

        //查看PDF
        public ActionResult DisplayPdf(int id, string seaction, string processName)
        {
            processName = processName.Replace("*", "X");
            processName = processName.Replace("/", "々");
            List<FileInfo> filesInfo = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
            filesInfo = filesInfo.Where(c => c.Name.StartsWith(processName) && c.Name.Substring(c.Name.Length - 4, 4) == ".pdf").ToList();
            JArray json = new JArray();
            JObject result = new JObject();
            if (filesInfo.Count() > 0)
            {
                string path = @"/MES_Data/Process_Capacity/" + id.ToString() + "/" + seaction + "/" + processName + ".pdf";
                result.Add("have", true);
                result.Add("path", path);
                return Content(JsonConvert.SerializeObject(result));
            }
            else
            {
                result.Add("have", false);
                result.Add("path", null);
                return Content(JsonConvert.SerializeObject(result));
            }
        }

        //是否有pdf文件
        public bool IsHavingPDF(int id, string seaction, string processName)
        {
            processName = processName.Replace("*", "X");
            processName = processName.Replace("/", "々");
            List<FileInfo> filesInfo = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
            filesInfo = filesInfo.Where(c => c.Name.StartsWith(processName) && c.Name.Substring(c.Name.Length - 4, 4) == ".pdf").ToList();
            if (filesInfo.Count > 0)
                return true;
            else
                return false;
        }

        //是否有img文件
        public bool IsHavingIMG(int id, string seaction, string processName)
        {
            processName = processName.Replace("*", "X");
            processName = processName.Replace("/", "々");
            List<FileInfo> filesInfo = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + id.ToString() + "\\" + seaction + "\\");
            filesInfo = filesInfo.Where(c => c.Name.StartsWith(processName) && c.Name.Substring(c.Name.Length - 4, 4) == ".jpg").ToList();
            if (filesInfo.Count > 0)
                return true;
            else
                return false;
        }
        #endregion

        //日期转换
        private DateTime TimeChange(string value)
        {
            if (value.Contains("/"))
            {
                var time = value.Split('/');
                if (time[0].Length == 4)
                {
                    return new DateTime(Convert.ToInt32(time[0]), Convert.ToInt32(time[1]), Convert.ToInt32(time[2]));
                }
                else
                {
                    var year = "";
                    if (time[2].Length <= 2)
                    {
                        year = "20" + time[2];
                    }
                    else
                    {
                        year = time[2];
                    }
                    return new DateTime(Convert.ToInt32(year), Convert.ToInt32(time[0]), Convert.ToInt32(time[1]));
                }
            }
            else if (value.Contains("-") && !value.Contains("月"))
            {
                var time = value.Split('-');
                if (time[0].Length == 4)
                {
                    return new DateTime(Convert.ToInt32(time[0]), Convert.ToInt32(time[1]), Convert.ToInt32(time[2]));
                }
                var year = "";
                if (time[2].Length <= 2)
                {
                    year = "20" + time[2];
                }
                else
                {
                    year = time[2];
                }
                return new DateTime(Convert.ToInt32(year), Convert.ToInt32(time[0]), Convert.ToInt32(time[1]));
            }
            else if (value.Contains("-") && value.Contains("月"))
            {
                var time = value.Split('-');
                return new DateTime(Convert.ToInt32(time[2]), DataTypeChange.ChineseMonthChangeInt(time[1]), Convert.ToInt32(time[0]));
            }
            else
            {
                DateTime startTime = new DateTime(1900, 1, 1);
                return startTime.AddDays(Convert.ToInt32(value) - 2);
            }
        }


        //总表显示
        //public ActionResult TotalProcess_Capacity()
        //{

        //    var type = db.Process_Capacity_Total.Select(c => c.Type).Distinct().ToList();
        //    JArray totel = new JArray();
        //    foreach (var item in type)
        //    {
        //        JObject result = new JObject();
        //        var info = db.Process_Capacity_Total.Where(c => c.Type == item).ToList();//
        //        result.Add("id", info.FirstOrDefault().Id);
        //        result.Add("Type", item);
        //        var platform = info.FirstOrDefault().Platform;
        //        var PCB = info.FirstOrDefault().ProductPCBnumber;
        //        result.Add("Platform", platform);
        //        result.Add("PCB", PCB);
        //        //ic面贴装 //灯面贴装
        //        if (db.Pick_And_Place.Count(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform) == 0)//判断是否有对应的excel文件
        //        {
        //            result.Add("icProductName", null);
        //            result.Add("icMaxStandardTotal", null);
        //            result.Add("icMaxStandardOutput", null);
        //            result.Add("icMinStandardTotal", null);
        //            result.Add("icMinStandardOutput", null);

        //            result.Add("LightProductName", null);
        //            result.Add("LightMaxStandardTotal", null);
        //            result.Add("LightMaxStandardOutput", null);
        //            result.Add("LightMinStandardTotal", null);
        //            result.Add("LightMinStandardOutput", null);
        //        }
        //        else
        //        {
        //            var icMaxStandardTotal = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "IC面贴装").Max(c => c.PersonNum);
        //            var icMaxStandardOutput = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "IC面贴装").Max(c => c.CapacityPerHour);
        //            var icMinStandardTotal = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "IC面贴装").Min(c => c.PersonNum);
        //            var icMinStandardOutput = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "IC面贴装").Min(c => c.CapacityPerHour);
        //            result.Add("icProductName", "IC面贴装");
        //            result.Add("icMaxStandardTotal", icMaxStandardTotal);
        //            result.Add("icMaxStandardOutput", icMaxStandardOutput);
        //            result.Add("icMinStandardTotal", icMinStandardTotal);
        //            result.Add("icMinStandardOutput", icMinStandardOutput); // result.Add("LimtProductName", true);
        //            var LightMaxStandardTotal = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "灯面贴装").Max(c => c.PersonNum);
        //            var LightMaxStandardOutput = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "灯面贴装").Max(c => c.CapacityPerHour);
        //            var LightMinStandardTotal = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "灯面贴装").Min(c => c.PersonNum);
        //            var LightMinStandardOutput = db.Pick_And_Place.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.ProcessDescription == "灯面贴装").Min(c => c.CapacityPerHour);
        //            result.Add("LightProductName","灯面贴装");
        //            result.Add("LightMaxStandardTotal", LightMaxStandardTotal);
        //            result.Add("LightMaxStandardOutput", LightMaxStandardOutput);
        //            result.Add("LightMinStandardTotal", LightMinStandardTotal);
        //            result.Add("LightMinStandardOutput", LightMinStandardOutput);
        //        }

        //        //SMT是否有图片或PDF
        //        List<FileInfo> filesInfo = comm.GetAllFilesInDirectory(@"D:\MES_Data\Process_Capacity\" + platform + "_" + type + "\\");
        //        var jpginfo = filesInfo.Where(c => c.Name.StartsWith("SMT") && c.Name.Substring(c.Name.Length - 4, 4) == ".jpg").ToList();
        //        if (jpginfo.Count > 0)
        //            result.Add("SMTjpg", true);
        //        else
        //            result.Add("SMTjpg", false);
        //        var pdfinfo = filesInfo.Where(c => c.Name.StartsWith("SMT") && c.Name.Substring(c.Name.Length - 4, 4) == ".pdf").ToList();
        //        if (pdfinfo.Count > 0)
        //            result.Add("SMTpdf", true);
        //        else
        //            result.Add("SMTpdf", false);


        //        //插件
        //        var plugin = db.Process_Capacity_Plugin.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (plugin.Count == 0)
        //        {
        //            result.Add("PluginDevice", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var pluginitem in plugin)
        //            {
        //                JObject pluginjobject = new JObject();
        //                pluginjobject.Add("PluginDeviceID", pluginitem.Id);
        //                pluginjobject.Add("PluginDeviceName", pluginitem.Name); //插件工序名
        //                pluginjobject.Add("SingleLampWorkingHours", pluginitem.SingleLampWorkingHours);//插件机台固定标准单灯工时
        //                pluginjobject.Add("PCBASingleLampNumber", pluginitem.PCBASingleLampNumber);//插件PCBA单灯数
        //                pluginjobject.Add("PluginStandardNumber", pluginitem.PluginStandardNumber);//插件标配人数
        //                pluginjobject.Add("PluginStandardCapacity", pluginitem.PluginStandardCapacity);//插件产能标准
        //                array.Add(pluginjobject);
        //            }
        //            result.Add("PluginDevice", array);
        //        }
        //        //后焊
        //        var AfterWeldProcessName = db.ProcessBalance.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.Section == "后焊").ToList();
        //        if (AfterWeldProcessName.Count == 0)
        //        {
        //            result.Add("AfterWeld", null);
        //        }
        //        else
        //        {
        //            var title = AfterWeldProcessName.Select(c => c.Title).ToList();
        //            JArray AfterWeld = new JArray();
        //            foreach (var ProcessName in title)
        //            {
        //                JObject jObject = new JObject();
        //                var message = AfterWeldProcessName.OrderByDescending(c => c.SerialNumber).Where(c => c.Title == ProcessName).FirstOrDefault();
        //                jObject.Add("AfterWeldProcessName", message.Title);
        //                jObject.Add("AfterWeldStandardTotal", message.StandardTotal);
        //                jObject.Add("AfterWeldStandardOutput", message.StandardOutput);
        //                jObject.Add("AfterWeldStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);
        //                AfterWeld.Add(jObject);
        //            }
        //            result.Add("AfterWeld", AfterWeld);
        //        }
        //        if (IsHavingPDF(item, platform, "后焊"))
        //            result.Add("AfterWeldPdf", true);
        //        else
        //            result.Add("AfterWeldPdf", false);
        //        if (IsHavingIMG(item, platform, "后焊"))
        //            result.Add("AfterWeldImg", true);
        //        else
        //            result.Add("AfterWeldImg", false);

        //        //三防
        //        var threeprof = db.Process_Capacity_ThreeProf.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (threeprof.Count == 0)
        //        {
        //            result.Add("ThreeProf", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var threeprofitem in threeprof)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("ThreeProfID", threeprofitem.Id);
        //                jObject.Add("ThreeProfProcessName", threeprofitem.ThreeProfProcessName);//三防工序描述
        //                jObject.Add("ThreeProfStandardTotal", threeprofitem.ThreeProfStandardTotal);//三防标准总人数
        //                jObject.Add("ThreeProfStabdardOutput", threeprofitem.ThreeProfStabdardOutput);//三防标准产量
        //                array.Add(jObject);
        //            }
        //            result.Add("ThreeProf", array);
        //        }

        //        //打底壳
        //        var BottomCasProcessName = db.ProcessBalance.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.Section == "打底壳").ToList();
        //        if (BottomCasProcessName.Count == 0)
        //        {
        //            result.Add("BottomCas", null);
        //        }
        //        else
        //        {
        //            var title = BottomCasProcessName.Select(c => c.Title).ToList();
        //            JArray BottomCas = new JArray();
        //            foreach (var ProcessName in title)
        //            {
        //                JObject jObject = new JObject();
        //                var message = BottomCasProcessName.OrderByDescending(c => c.SerialNumber).Where(c => c.Title == ProcessName).FirstOrDefault();
        //                jObject.Add("BottomCasProcessName", message.Title);
        //                jObject.Add("BottomCasStandardTotal", message.StandardTotal);
        //                jObject.Add("BottomCasStandardOutput", message.StandardOutput);
        //                jObject.Add("BottomCasStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);
        //                jObject.Add("BottomCasDispensMachineNum", message.DispensMachineNum);
        //                jObject.Add("BottomCasScrewMachineNum", message.ScrewMachineNum);
        //                BottomCas.Add(jObject);
        //            }
        //            result.Add("BottomCas", BottomCas);
        //        }
        //        if (IsHavingPDF(item, platform, "打底壳"))
        //            result.Add("ABottomCasPdf", true);
        //        else
        //            result.Add("BottomCasPdf", false);
        //        if (IsHavingIMG(item, platform, "打底壳"))
        //            result.Add("BottomCasImg", true);
        //        else
        //            result.Add("BottomCasImg", false);

        //        //装磁吸
        //        var magnetic = db.Process_Capacity_Magnetic.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (magnetic.Count == 0)
        //        {
        //            result.Add("Magnetic", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var magneticitem in magnetic)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("MagneticID", magneticitem.Id);
        //                jObject.Add("MagneticProcessName", magneticitem.MagneticSuctionProcessName);//装磁吸工序描述
        //                jObject.Add("MagneticSuctionStandardTotal", magneticitem.MagneticSuctionStandardTotal);//装磁吸标准总人数
        //                jObject.Add("MagneticSuctionStabdardOutput", magneticitem.MagneticSuctionStabdardOutput);//装磁吸标准产量
        //                jObject.Add("MagneticSuctionStandardHourlyOutputPerCapita", magneticitem.MagneticSuctionStabdardOutput);//装磁吸人均时产量
        //                array.Add(jObject);
        //            }
        //            result.Add("Magnetic", array);
        //        }


        //        //喷墨
        //        var inkjet = db.Process_Capacity_Inkjet.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (inkjet.Count == 0)
        //        {
        //            result.Add("Inkjet", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var inkjetitem in inkjet)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("InkjetID", inkjetitem.Id);
        //                jObject.Add("InkjetProcessName", inkjetitem.InkjetProcessName);//喷墨工序
        //                jObject.Add("InkjetSuctionStandardTotal", inkjetitem.InkjetSuctionStandardTotal);//喷墨配置人数
        //                jObject.Add("InkjetStabdardOutputPerHour", inkjetitem.InkjetStabdardOutputPerHour);//喷墨每小时产能
        //                array.Add(jObject);
        //            }
        //            result.Add("Inkjet", array);
        //        }

        //        //灌胶
        //        var glue = db.Process_Capacity_Glue.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (glue.Count == 0)
        //        {
        //            result.Add("Glue", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var glueitem in glue)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("GlueID", glueitem.Id);
        //                jObject.Add("GlueProcessName", glueitem.GlueProcessName);//灌胶工序描述
        //                jObject.Add("GlueStandardTotal", glueitem.GlueStandardTotal);//灌胶标准总人数
        //                jObject.Add("GlueStabdardOutput", glueitem.GlueStabdardOutput);//灌胶标准产量
        //                array.Add(jObject);
        //            }
        //            result.Add("Glue", array);
        //        }

        //        //气密
        //        var airtight = db.Process_Capacity_Airtight.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (airtight.Count == 0)
        //        {
        //            result.Add("Airtight", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var airtightitem in airtight)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("AirtightID", airtightitem.Id);
        //                jObject.Add("AirtightProcessName", airtightitem.AirtightProcessName);//气密工序描述
        //                jObject.Add("AirtightStandardTotal", airtightitem.AirtightStandardTotal);//气密标准总人数
        //                jObject.Add("AirtightStabdardOutput", airtightitem.AirtightStabdardOutput);//气密标准产量
        //                array.Add(jObject);
        //            }
        //            result.Add("Airtight", array);
        //        }


        //        //锁面罩
        //        var LockTheMaskProcessName = db.ProcessBalance.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.Section == "锁面罩").ToList();
        //        if (LockTheMaskProcessName.Count() == 0)
        //        {
        //            result.Add("LockTheMask", null);
        //        }
        //        else
        //        {
        //            var title = LockTheMaskProcessName.Select(c => c.Title).ToList();
        //            JArray LockTheMask = new JArray();
        //            foreach (var ProcessName in title)
        //            {
        //                JObject jObject = new JObject();
        //                var message = LockTheMaskProcessName.OrderByDescending(c => c.SerialNumber).Where(c => c.Title == ProcessName).FirstOrDefault();
        //                jObject.Add("LockTheMaskProcessName", message.Title);
        //                jObject.Add("LockTheMaskStandardTotal", message.StandardTotal);
        //                jObject.Add("LockTheMaskStandardOutput", message.StandardOutput);
        //                jObject.Add("LockTheMaskStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);
        //                jObject.Add("LockTheMaskScrewMachineNum", message.ScrewMachineNum);
        //                LockTheMask.Add(jObject);
        //            }
        //            result.Add("LockTheMask", LockTheMask);
        //        }
        //        if (IsHavingPDF(item, platform, "锁面罩"))
        //            result.Add("LockTheMaskPdf", true);
        //        else
        //            result.Add("LockTheMaskPdf", false);
        //        if (IsHavingIMG(item, platform, "锁面罩"))
        //            result.Add("LockTheMaskImg", true);
        //        else
        //            result.Add("LockTheMaskImg", false);

        //        //模组装配
        //        var ModuleProcessName = db.ProcessBalance.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.Section == "模组装配").ToList();
        //        if (ModuleProcessName.Count == 0)
        //        {
        //            result.Add("Module", null);
        //        }
        //        else
        //        {

        //            var title = ModuleProcessName.Select(c => c.Title).ToList();
        //            JArray Module = new JArray();
        //            foreach (var ProcessName in title)
        //            {
        //                JObject jObject = new JObject();
        //                var message = ModuleProcessName.OrderByDescending(c => c.SerialNumber).Where(c => c.Title == ProcessName).FirstOrDefault();
        //                jObject.Add("ModuleProcessName", message.Title);
        //                result.Add("ModuleStandardTotal", message.StandardTotal);
        //                result.Add("ModuleBalanceRate", message.BalanceRate + "%");
        //                result.Add("ModuleBottleneck", message.Bottleneck);
        //                result.Add("ModuleStandardOutput", message.StandardOutput);
        //                result.Add("ModuleStandardHourlyOutputPerCapita", message.StandardHourlyOutputPerCapita);
        //                Module.Add(jObject);
        //            }
        //            result.Add("Module", Module);
        //        }
        //        if (IsHavingPDF(item, platform, "模组装配"))
        //            result.Add("ModulePdf", true);
        //        else
        //            result.Add("ModulePdf", false);
        //        if (IsHavingIMG(item, platform, "模组装配"))
        //            result.Add("ModuleImg", true);
        //        else
        //            result.Add("ModuleImg", false);

        //        //老化
        //        var burnin = db.Process_Capacity_Burin.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform).ToList();
        //        if (burnin.Count == 0)
        //        {
        //            result.Add("Burin", null);

        //        }
        //        else
        //        {
        //            JArray array = new JArray();
        //            foreach (var burninitem in burnin)
        //            {
        //                JObject jObject = new JObject();
        //                jObject.Add("AirtightID", burninitem.Id);
        //                jObject.Add("BurinOneProcessName", burninitem.BurinOneProcessName);//老化工序描述1
        //                jObject.Add("BurninOneSuctionStandardTotal", burninitem.BurninOneSuctionStandardTotal);//老化1标配人数
        //                jObject.Add("BurinOneStabdardOutputPerHour", burninitem.BurinOneStabdardOutputPerHour);//老化1每小时产能
        //                jObject.Add("BurinTwoProcessName", burninitem.BurinTwoProcessName);//老化2工序描述
        //                jObject.Add("BurinTwoSuctionStandardTotal", burninitem.BurinTwoSuctionStandardTotal);//老化2标配人数
        //                jObject.Add("BurinTwoStabdardOutputPerHour", burninitem.BurinTwoStabdardOutputPerHour);//老化2每小时标准产能
        //                array.Add(jObject);
        //            }
        //            result.Add("Burin", array);
        //        }
        //        //包装
        //        var PackingProcessName = db.ProcessBalance.Where(c => c.Type == item && c.ProductPCBnumber == PCB && c.Platform == platform && c.Section == "包装").ToList();
        //        if (PackingProcessName.Count == 0)
        //        {
        //            result.Add("Packing", null);
        //        }
        //        else
        //        {

        //            var title = PackingProcessName.Select(c => c.Title).ToList();
        //            JArray Packing = new JArray();
        //            foreach (var ProcessName in title)
        //            {
        //                JObject jObject = new JObject();
        //                var message = PackingProcessName.OrderByDescending(c => c.SerialNumber).Where(c => c.Title == ProcessName).FirstOrDefault();
        //                jObject.Add("PackingProcessName", message.Title);
        //                result.Add("PackingStandardTotal", message.StandardTotal);
        //                result.Add("PackingStandardOutput", message.StandardOutput);
        //                Packing.Add(jObject);
        //            }
        //            result.Add("Packing", Packing);
        //        }
        //        if (IsHavingPDF(item, platform, "包装"))
        //            result.Add("PackingPdf", true);
        //        else
        //            result.Add("PackingPdf", false);
        //        if (IsHavingIMG(item, platform, "包装"))
        //            result.Add("PackingImg", true);
        //        else
        //            result.Add("PackingImg", false);
        //        //--启用编辑的字段，方便前端使用--
        //        result.Add("PluginEidt", false);
        //        result.Add("ThreeProfEidt", false);
        //        result.Add("BottomCasEidt", false);
        //        result.Add("MagneticEidt", false);
        //        result.Add("InkjetEidt", false);
        //        result.Add("GlueEidt", false);
        //        result.Add("AirtightEidt", false);
        //        result.Add("LockTheMaskEdit", false);
        //        result.Add("BurinEidt", false);
        //        //--edit end
        //        totel.Add(result);
        //    }

        //    return Content(JsonConvert.SerializeObject(totel));
        //}
    }
}