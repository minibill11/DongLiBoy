@model IEnumerable<JianHeMES.Models.Personnel_Roster>

@{
    ViewBag.Title = "查询首页";
}
<link href="~/Content/styleFile/packaging/index.css" rel="stylesheet" />
<script src="~/Content/styleFile/packaging/index.js"></script>
<style>

    .table > thead > tr > th > span:hover {
        background-color: #888888;
    }

    .table > tbody > tr > td {
        padding: 0px;
        display: inline-block;
        float: left;
        margin: 0px;
        height: auto;
    }

        .table > tbody > tr > td span, .table > tbody > tr > td select {
            width: 100%;
            height: 100%;
            display: inline-block;
            padding: 0;
        }

        .table > tbody > tr > td input, .table > tbody > tr > td select {
            padding: 0px;
            margin: 0px;
            display: inline-block;
            height: 28px;
            text-align: center;
            color: purple;
        }

        .table > tbody > tr > td select {
            width: 100%;
            height: 28px;
        }

        .table > tbody > tr > td:nth-child(1) input {
            display: inline-block;
            width: 58px;
        }

        .table > tbody > tr > td:nth-child(2) input {
            display: inline-block;
            width: 60px;
        }

        .table > tbody > tr > td:nth-child(3) input {
            display: inline-block;
            width: 50px;
        }

        .table > tbody > tr > td:nth-child(4) input {
            display: inline-block;
            width: 60px;
        }

        .table > tbody > tr > td:nth-child(5) input {
            display: inline-block;
            width: 100px;
        }

        .table > tbody > tr > td:nth-child(6) input {
            display: inline-block;
            width: 120px;
        }

        .table > tbody > tr > td:nth-child(7) input {
            display: inline-block;
            width: 120px;
        }

        .table > tbody > tr > td:nth-child(8) input {
            display: inline-block;
            width: 120px;
        }

        .table > tbody > tr > td:nth-child(9) input {
            display: inline-block;
            width: 120px;
        }

        .table > tbody > tr > td:nth-child(10) input {
            display: inline-block;
            width: 70px;
        }

        .table > tbody > tr > td:nth-child(11) input {
            display: inline-block;
            width: 67px;
        }

        .table > tbody > tr > td:nth-child(12) input {
            display: inline-block;
            width: 67px;
        }

        .table > tbody > tr > td:nth-child(13) input {
            display: inline-block;
            width: 50px;
        }

    .formfootere {
        display: flex;
        justify-content: flex-end;
    }

    .forpisotions > label {
        display: inline-block;
        width: 28%;
        text-align: right;
    }

    .forSexCheckbox {
        display: inline-block;
        width: 65%;
        margin-left: 20px;
    }

        .forSexCheckbox > input {
            display: inline-block;
            width: 15px;
        }

    .forpisotions > input {
        display: inline-block;
        width: 65%;
        margin-left: 20px;
    }

    .forpisotions > select {
        display: inline-block;
        width: 65%;
        margin-left: 20px;
        height: 32px;
    }

    .el-collapse-item__content {
        padding-bottom: 0;
    }

    .el-collapse-item__header {
        height: 30px;
    }

    .ttops {
        display: inline-flex;
        justify-content: space-between;
        width: 12%;
    }

    .tbottom {
        display: inline-flex;
        justify-content: space-between;
        width: 15%;
    }

        .tbottom:first-child {
            display: none;
        }

    .table {
        margin: 0;
    }

        .table > tbody > tr > td, .table > tbody > tr > th {
            text-align: center;
            display: inline-block;
            float: left;
            padding: 0px;
        }

            .table > tbody > tr > td:nth-child(1), .table > tbody > tr > th:nth-child(1) {
                width: 60px;
            }

            .table > tbody > tr > td:nth-child(2), .table > tbody > tr > th:nth-child(2) {
                width: 60px;
            }

            .table > tbody > tr > td:nth-child(3), .table > tbody > tr > th:nth-child(3) {
                width: 50px;
            }

            .table > tbody > tr > td:nth-child(4), .table > tbody > tr > th:nth-child(4) {
                width: 60px;
            }

            .table > tbody > tr > td:nth-child(5), .table > tbody > tr > th:nth-child(5) {
                width: 100px;
            }

            .table > tbody > tr > td:nth-child(6), .table > tbody > tr > th:nth-child(6) {
                width: 120px;
            }

            .table > tbody > tr > td:nth-child(7), .table > tbody > tr > th:nth-child(7) {
                width: 120px;
            }

            .table > tbody > tr > td:nth-child(8), .table > tbody > tr > th:nth-child(8) {
                width: 110px;
            }

            .table > tbody > tr > td:nth-child(9), .table > tbody > tr > th:nth-child(9) {
                width: 130px;
            }

            .table > tbody > tr > td:nth-child(10), .table > tbody > tr > th:nth-child(10) {
                width: 75px;
            }

            .table > tbody > tr > td:nth-child(11), .table > tbody > tr > th:nth-child(11) {
                width: 67px;
            }

            .table > tbody > tr > td:nth-child(12), .table > tbody > tr > th:nth-child(12) {
                width: 67px;
            }

            .table > tbody > tr > td:nth-child(13), .table > tbody > tr > th:nth-child(13) {
                width: 100px;
            }

            .table > tbody > tr > th:nth-child(14) {
                width: 75px;
            }

    .inner {
        display: flex;
        flex-flow: row wrap;
        justify-content: flex-start;
    }

        .inner > div {
            display: flex;
            justify-content: flex-end;
            margin: 2px 3px;
            align-items: flex-start;
            flex-flow: column wrap;
        }

        .inner .el-input__inner, .inner .el-date-editor {
            max-width: 140px;
        }

    @@media screen and (max-width: 400px) {
        .noern {
            display: none;
        }
    }

    .el-form-item {
        margin-bottom: 10px !important;
    }

    .el-form-item__label {
        width: 110px !important;
    }

    .el-checkbox {
        margin-right: 5px;
    }

    .otherCheckbox {
        margin-left: 40px
    }
</style>
<h3 class="text-center" style="margin-bottom:3px;margin-top:5px;">查询首页</h3>
<div id="app">
    <span class="showinput">
        @Html.ActionLink("新增一个员工", "Create")
    </span>
    <span class="showinput">
        @Html.ActionLink("批量添加员工", "Batch_InputStaff")
    </span>
    <div style="display:flex;justify-content:space-between;">
        <div style="width:82%">
            @using (Html.BeginForm("Index", "Personnel_Roster", FormMethod.Post, new { id = "searchForm", @class = "text-center" }))
            {
                @Html.AntiForgeryToken()
                <div class="inner">
                    <div>
                        <div>工号：</div><el-input v-model="jobNum" name="jobNum" size="small" clearable></el-input>
                    </div>
                    <div>
                        <div>姓名：</div><el-input v-model="name" name="name" size="small" clearable></el-input>
                    </div>
                    <div>
                        <div>部门：</div>
                        <el-select id="department" name="department" v-model.trim="selectDepartment.value"
                                   size="small"
                                   filterable
                                   clearable>
                            <el-option v-for="item in selectDepartment.options"
                                       :key="item.value"
                                       :label="item.value"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </div>
                    <div>
                        <div>员工状态：</div>
                        <el-select id="status" name="status" v-model.trim="selectStatus.value"
                                   size="small"
                                   filterable
                                   clearable>
                            <el-option v-for="item in selectStatus.options"
                                       :key="item.value"
                                       :label="item.value"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </div>
                    <div>
                        <div>族群：</div>
                        <el-select id="type" name="type" v-model.trim="selectType.value"
                                   size="small"
                                   filterable
                                   clearable>
                            <el-option v-for="item in selectType.options"
                                       :key="item.value"
                                       :label="item.value"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </div>
                    <div>
                        <div>离职年月：</div>
                        <el-date-picker id="date" name="date" v-model="selectDate"
                                        type="month"
                                        size="small">
                        </el-date-picker>
                    </div>
                    <div>
                        <div></div>
                        <input type="submit" class="el-button el-button--small" value="查找" />
                    </div>
                </div>
            }
        </div>

        <div style="width:18%" class="noern">
            @using (Html.BeginForm("OutputExcel", "Personnel_Roster", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <input v-model="jobNum" type="text" class="hidden" style="display:inline;width:150px;" name="jobNum" />
                <input v-model="name" type="text" class="hidden" style="display:inline;width:150px;" name="name" />
                <input v-model="department" type="text" class="hidden" style="display:inline;width:150px;" name="department" />
                <input v-model="status" type="text" class="hidden" style="display:inline;width:150px;" name="status" />
                <input type="submit" id="excelBtn" class="btn btn-success pull-right" value="导出花名册记录到Excel表" />
            }
        </div>

    </div>
    <textarea id="infos" style="display:none;">@ViewBag.statistics</textarea>
    <div style="display:flex;justify-content:space-between;">
        <el-collapse accordion style="width:90%">
            <el-collapse-item v-bind:title="'总统计 ---------------在职总人数 :' + topTotals + '人'" name="1">
                <div class="ttops" v-for="item in totalTop">{{item.name}} : {{item.val}}</div>
            </el-collapse-item>
        </el-collapse>
        <el-button style="display:inline-block" type="primary" v-bind:icon="flag==false?'el-icon-caret-right':'el-icon-caret-bottom'" size="mini" v-on:click="flag=!flag">各部门详细</el-button>
    </div>
    <el-collapse class="deparDetials" accordion v-if="flag">
        <el-collapse-item v-bind:title="item.depatment +' ------------------在职总人数 : '+ item.val[0].values" v-for="(item,index) in totalBottom" v-bind:name="index">
            <div class="tbottom" v-for="item in item.val">{{item.names}} : {{item.values}}</div>
        </el-collapse-item>
    </el-collapse>
    <div style="width:1153px; height:39px;margin-top:12px;">
        <table class="table" style="width:100%">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.JobNum)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom',0,'up','init')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom',0,'down','init')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 1, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 1, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sex)
                </th>
                @*<th>
                        @Html.DisplayNameFor(model => model.DateOfBirth)
                    </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Education)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DP_Group)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 4, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 4, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Position)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 5, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 5, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HireDate)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 6, 'up', 'times')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 6, 'down', 'times')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastDate)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 7, 'up', 'times')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 7, 'down', 'times')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Department)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 8, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 8, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 9, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 9, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.levelType)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 10, 'up', 'strings')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 10, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OnPostMonth)
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('tableBottom', 11, 'up', 'init')"></span>
                    <span style="font-size:10px;" class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('tableBottom', 11,'down','init')"></span>
                </th>
                <th>操作</th>
            </tr>
        </table>
    </div>

    <div style="width:1140px;height:600px;overflow:auto;">
        <table class="table" id="tableBottom">
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.JobNum)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @if (item.Sex == false)
                        {
                            <span>女</span>
                        }
                        else if (item.Sex == true)
                        {
                            <span>男</span>
                        }
                    </td>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.DateOfBirth)
                        </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.Education)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DP_Group)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Position)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.HireDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Department)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.levelType)
                    </td>
                    <td>
                        @{
                            if (item.OnPostMonth == 0)
                            {

                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => item.OnPostMonth)
                            }
                        }
                    </td>
                    <td>
                        @{var UserRoles = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).Role; }
                        @if (((JianHeMES.Models.Users)Session["User"]) != null)
                        {
                            if (UserRoles == "招聘专员" || UserRoles == "系统管理员" || ((JianHeMES.Models.Users)Session["User"]).UserName == "魏顺平" || ((JianHeMES.Models.Users)Session["User"]).UserName == "刘露露")
                            {
                                <span>
                                    <button onclick="changeInfo(@item.Id,this)" class="btn btn-primary test" style="margin:0px;padding:2px;">编辑 </button>
                                    <button v-bind:class=`baocun${@item.Id}` onclick="postSingleInfo(@item.Id,this)" class="btn btn-primary test2" style="margin:0px;padding:2px;display:none;">保存</button>
                                    <button v-on:click="getEditInfo(@item.Id)" class="btn btn-primary detials" data-toggle="modal" data-target="#myModal" style="margin:0px;padding:2px;">详细</button>
                                    <button onclick="giveUpPost(@item.Id,this)" class="btn btn-primary test3" style="margin:0px;padding:2px;display:none;">取消</button>
                                </span>
                            }
                        }
                    </td>
                </tr>
            }
        </table>
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="margin-top:50px;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                            &times;
                        </button>
                        <h4 class="modal-title" id="myModalLabel">
                            员工详细信息
                        </h4>
                    </div>
                    <div class="modal-body">
                        <form class="form" method="post" id="registSubmit">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <input class="hidden" value="modalData.Id" />
                            <div class="form-group forpisotions">
                                <label for="exampleInputName1">工号</label>
                                <input type="text" class="form-control" id="exampleInputName1" v-bind:value="modalData.JobNum" name="JobNum" readonly />
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail2">中文名</label>
                                <input type="text" class="form-control" id="exampleInputEmail2" v-bind:value="modalData.Name" name="Name" readonly />
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail3">性别</label>
                                <input type="text" class="form-control" id="exampleInputEmail3" v-bind:value="modalData.Sex==true?'男':'女'" name="Sex" readonly />
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail4">出生日期</label>
                                <input type="text" class="form-control" id="exampleInputEmail4" v-bind:value="timeFormatsss(modalData.DateOfBirth)" name="DateOfBirth" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail5">学历</label>
                                <input type="text" class="form-control" id="exampleInputEmail5" v-bind:value="modalData.Education" name="Education" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail6">组名</label>
                                <input type="text" class="form-control" id="exampleInputEmail6" v-bind:value="modalData.DP_Group" name="DP_Group" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail66">职位名称</label>
                                <input type="text" class="form-control" id="exampleInputEmail66" v-bind:value="modalData.Position" name="Position" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail7">入司时间</label>
                                <input type="text" class="form-control HireDate" id="exampleInputEmail7" v-bind:value="timeFormatss(modalData.HireDate)" name="HireDate" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail8">最后工作日期</label>
                                <input type="text" class="form-control LastDate" id="exampleInputEmail8" v-bind:value="timeFormatss(modalData.LastDate)" name="LastDate" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail9">部门</label>
                                <input type="text" class="form-control" id="exampleInputEmail9" v-bind:value="modalData.Department" name="Department" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail10">员工状态</label>
                                <input type="text" class="form-control" id="exampleInputEmail99" v-bind:value="modalData.Status" name="Status" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail11">族群</label>
                                <input type="text" class="form-control" id="exampleInputEmail11" v-bind:value="modalData.levelType" name="levelType" readonly>
                            </div>
                            <div class="form-group forpisotions">
                                <label for="exampleInputEmail2">在岗月数</label>
                                <input type="text" class="form-control OnPostMonth" id="exampleInputEmail12" v-bind:value="modalData.OnPostMonth" name="OnPostMonth" readonly>
                            </div>
                            <div class="formfootere">
                                <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <el-button id="addInfos" style="display:none;" type="text" v-on:click="dialogFormVisible = true">打开嵌套表单的 Dialog</el-button>
    <el-dialog title="请完整填写离职原因及详细(请仔细核对离职信息！)" v-bind:visible.sync="dialogFormVisible" style="text-align:left">
        <el-form v-bind:model="form" v-bind:inline="true" action="~/Personnel_Reasons_for_leaving/SaveCreate" method="post">
            <el-form-item label="部门" v-bind:label-width="formLabelWidth">
                <el-input v-model="form.department" auto-complete="off" name="Department_leaving" readonly></el-input>
            </el-form-item>
            <el-form-item label="班组" v-bind:label-width="formLabelWidth">
                <el-input v-model="form.DP_group" auto-complete="off" name="DP_group" readonly></el-input>
            </el-form-item>
            <el-form-item label="职位" v-bind:label-width="formLabelWidth">
                <el-input v-model="form.position" auto-complete="off" name="Position" readonly></el-input>
            </el-form-item>
            <el-form-item label="族群" v-bind:label-width="formLabelWidth">
                <el-input v-if="form.groupStyle=='操作族'" v-model="form.groupStyle" auto-complete="off" name="levelType" readonly></el-input>
                <el-select v-else v-model="form.groupStyle" clearable placeholder="请选择" style="width:176px">
                    <el-option v-for="item in options"
                               v-bind:key="item.value"
                               v-bind:label="item.label"
                               v-bind:value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="入职日期" v-bind:label-width="formLabelWidth">
                <el-input v-model="form.dateOfHire" auto-complete="off" name="HireDate" readonly></el-input>
            </el-form-item>
            <el-form-item label="离职日期" v-bind:label-width="formLabelWidth">
                <el-input v-model="form.dateOfFire" auto-complete="off" name="LastDate" readonly></el-input>
            </el-form-item>
            <el-row>
                <el-form-item label="离职类型" v-bind:label-width="formLabelWidth">
                    <el-checkbox v-model="form.Resign" name="Resign">辞职</el-checkbox>
                    <el-checkbox v-model="form.SinceFrom" name="SinceFrom">自离</el-checkbox>
                    <el-checkbox v-model="form.LayOff" name="LayOff">辞退</el-checkbox>
                    <el-checkbox v-model="form.Retired" name="Retired">退休</el-checkbox>
                </el-form-item>
            </el-row>
            <el-row>
                <el-form-item label="离职原因" v-bind:label-width="formLabelWidth">
                </el-form-item>
            </el-row>
            <el-row>
                <el-form-item label="个人原因" v-bind:label-width="formLabelWidth">
                    <el-checkbox v-model="form.HealthyBody" name="HealthyBody">身体健康</el-checkbox>
                    <el-checkbox v-model="form.Family_Reasons" name="Family_Reasons">家庭原因</el-checkbox>
                    <el-checkbox v-model="form.beter_develoment" name="beter_develoment">更好的发展</el-checkbox>
                </el-form-item>
            </el-row>
            <el-row>
                <el-form-item label="公司原因" v-bind:label-width="formLabelWidth">
                    <el-checkbox v-model="form.pay_notGood" name="Pay_dissatisfaction">薪酬福利不满意</el-checkbox>
                    <el-checkbox v-model="form.system_notGood" name="system_notGood">制度不满意</el-checkbox>
                    <el-checkbox v-model="form.management_notGood" name="management_notGood">管理不满意</el-checkbox>
                    <el-checkbox v-model="form.NotWork_Itself" name="NotWork_Itself">工作本身不满意</el-checkbox>
                    <el-checkbox v-model="form.enviroment_notGood" name="enviroment_notGood">工作环境不满意</el-checkbox>
                    <el-checkbox v-model="form.NotCultural_Atmosphere" name="NotCultural_Atmosphere">文化氛围不满意</el-checkbox>
                </el-form-item>
            </el-row>
            <el-row>
                <label class="otherCheckbox">
                    <input name="NotProbation_Period" type="checkbox" value="" v-model="form.NotProbation_Period" />试用期不合格
                </label>
            </el-row>
            <el-row>
                <label class="otherCheckbox">
                    <input v-model="form.Negotiate_Remove" type="checkbox" name="Negotiate_Remove">协商解除
                </label>
            </el-row>
            <el-row>
                <label class="otherCheckbox">
                    <input v-model="form.Other_Reasons" type="checkbox" name="Other_Reasons">其他
                </label>
            </el-row>
            <el-row>
                <el-form-item label="备 注：" v-bind:label-width="formLabelWidth" style="margin-left:-12px !important">
                    <el-input type="textarea" name="Remark" v-model="form.remark"></el-input>
                </el-form-item>
            </el-row>
            <input type="text" v-model="form.id" name="Id" style="display:none;" />
            <input type="text" v-model="form.name" name="Name" style="display:none;" />
            <input type="text" v-model="form.jobNum" name="jobNum" style="display:none;" />
            <input type="text" v-model="form.DP_group" name="DP_group" style="display:none;" />
            <input role="button" id="submitForm" type="submit" value="submit" style="display:none;" />
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="cancelPost">取 消</el-button>
            <el-button type="primary" v-on:click="justSaveOuter">跳过并保存</el-button>
            <el-button type="primary" v-on:click="postLeaveReson" v-text="form.text==''?'确定保存':form.text">确定保存</el-button>
        </div>
    </el-dialog>
</div>
<script>
    function checkRoles(list, roleName) {   //检测权限
        var flag = false
        if (list && roleName) {
            for (let item in list) {
                if (list[item] == roleName) {
                    flag = true
                }
            }
        }
        return flag
    }

    var app = new Vue({
        el: "#app",
        data: {
            postDatas:[],
            flags:false,
            formLabelWidth: '220px',
            dialogTableVisible: false,
            dialogFormVisible: false,
            form: {
                id:'',
                text:'',
                name:'',
                jobNum:'',
                DP_group:'',
                department: '',
                position: '',
                groupStyle: '',
                dateOfHire: '',
                dateOfFire: '',
                remark:'',
                opinenOfDepar: '',
                opinenOfHr: '',
                pay_notGood: false,//薪酬福利不满意
                system_notGood: false,//制度不满意
                management_notGood: false,//管理不满意
                enviroment_notGood: false,//工作环境不满意
                beter_develoment: false,//更好发展
                HealthyBody: false,//身体健康
                Family_Reasons: false,//家庭原因
                NotWork_Itself: false,//工作本身不满意
                NotCultural_Atmosphere: false,//文化氛围不满意
                Resign: false,//辞职（）
                SinceFrom: false,//自离（）
                LayOff: false,//辞退（）
                Retired: false,//退休（）
                NotProbation_Period: false,//试用期不合格
                Negotiate_Remove:false,//协商解除
                Other_Reasons:false,//其他
            },
            options:[
            {label:'技术族',value:'技术族'},
            {label:'专业族',value:'专业族'},
            {label:'服务族',value:'服务族'},
            {label:'管理族',value:'管理族'}
            ],
            flag:false,
            modalData:"",
            totalTop: "",
            topTotals:"123",  //总统计部分的数据
            totalBottom: "",
            activeName: '0',
            activeNames: "1",
            jobNum: "",
            name: "",
            department: "",
            status: "",
            selectDepartment: {
                value: '',
                options: []
            },
            selectStatus: {
                value: '',
                options: [{ value: '正式员工' }, { value: '试用员工' }, { value: '离职员工' }]
            },
            selectType: {
                value: '',
                options: [{ value: '操作族' }, { value: '技术族' }, { value: '专业族' }, { value: '服务族' }, { value: '管理族' }]
            },
            selectDate: null,
            urlSearchParam: {}
        },
        created() {
            //参数
            let searchList = location.search;
            if (!searchList) return false;
            let params = {};
            //去掉?
            searchList = searchList.replace('?', '');
            //如果有多个键值对
            let lists = searchList.split('&');
            for (let i of lists) {
                let objArr = i.split("=");
                params[objArr[0]] = decodeURI(objArr[1]);
            };
            this.urlSearchParam = params;
        },
        mounted() {
            //获取下拉列表
            axios.post('/Personnel_Roster/getDepartmentList').then(res => {
                this.selectDepartment.options = res.data;
            });
            //处理地址栏参数
            let param = this.urlSearchParam;
            if ('department' in param) this.selectDepartment.value = param.department;
            if ('type' in param) this.selectType.value = param.type;
            if ('date' in param) this.selectDate = new Date(param.date);
            if ('status' in param) this.selectStatus.value = param.status;
            //权限处理
            var roles = JSON.parse(localStorage.getItem("rigths"));
            if(checkRoles(roles,'花名册操作')){
                $('.showinput').show()
            }else{
                $('.showinput').hide()
            }

            if(checkRoles(roles,'花名册编辑按钮')){
                $('.test').show()
            }else{
                $('.test').hide()
            };

            if ('@ViewBag.jobNum' != null) {
                this.jobNum = '@ViewBag.jobNum';
            }
            if ('@ViewBag.name' != null) {
                this.name = '@ViewBag.name';
            }

        },
        methods: {
            show() {
                this.flag = !this.flag;
            },
            getEditInfo(ids) {
                axios.get("/Personnel_Roster/currentPagrEdit", {
                    params: {
                        id: ids
                    }
                }).then(res => {
                    this.modalData = res.data

                }).catch(err => {
                })
            },
            timeFormatss(val) { //时间格式化
                if(val=='')return '';
                var theDay = new Date(val);
                var theYear = theDay.getFullYear();
                //padStart是String的方法；所以需要将时间转换为字符串
                var theMonth = (theDay.getMonth() + 1).toString().padStart(2, "0");
                var theWeek = theDay.getDate().toString().padStart(2, "0");
                var theHour = theDay.getHours().toString().padStart(2, "0");
                var theMinue = theDay.getMinutes().toString().padStart(2, "0");
                var theSecond = theDay.getSeconds().toString().padStart(2, "0");
                return theYear + "-" + theMonth + "-" + theWeek + " " + theHour + ":" + theMinue + ":" + theSecond;
            },    //时间格式化--含时分秒
            timeFormatsss(val){

                var theDay = new Date(val);
                var theYear = theDay.getFullYear();
                var theMonth = (theDay.getMonth() + 1).toString().padStart(2, "0");
                var theWeek = theDay.getDate().toString().padStart(2, "0");
                var theHour = theDay.getHours().toString().padStart(2, "0");
                var theMinue = theDay.getMinutes().toString().padStart(2, "0");
                var theSecond = theDay.getSeconds().toString().padStart(2, "0");
                return theYear + "-" + theMonth + "-" + theWeek ;
            },
            cancelPost(){
                this.form.id = '';
                this.form.name = '';//姓名
                this.form.jobNum = '';//工号
                this.form.DP_group = '';//班组
                this.form.department = '';//部门
                this.form.position = '';//职位
                this.form.groupStyle = '';//族群
                this.form.dateOfHire = '';//部门结论
                this.form.dateOfFire = '';//离职日期
                this.form.remark = '';//备注
                this.form.opinenOfDepar = '';
                this.form.opinenOfHr = '';//人力资源部结论
                this.form.pay_notGood = '';//薪酬福利不满意
                this.form.system_notGood = '';//制度不满意
                this.form.management_notGood = '';//管理不满意
                this.form.enviroment_notGood = '';//工作环境不满意
                this.form.beter_develoment = '';//更好的发展
                this.HealthyBody = '';//身体健康
                this.Family_Reasons = '';//家庭原因
                this.NotWork_Itself = '';//工作本身不满意
                this.NotCultural_Atmosphere = '';//文化氛围不满意
                this.Resign = '';//辞职（）
                this.SinceFrom = '';//自离（）
                this.LayOff = '';//辞退（）
                this.Retired = '';//退休（）
                this.NotProbation_Period = '';//试用期不合格
                this.Negotiate_Remove = '';//协商解除
                this.Other_Reasons = '';//其他
                this.dialogFormVisible = false;
            },
            postLeaveReson(){//跳过并保存
                //this.form.opinenOfDepar !=''
                if(true){
                    //this.form.opinenOfHr!=''
                    if(true){
                        //this.form.groupStyle!='非操作族'&&this.form.groupStyle!=''
                        if (true) {
                            let type = "";
                            if (this.form.Resign ==true) {
                                type = "1"
                            } else if (this.form.SinceFrom==true) {
                                type = "2"
                            }
                            else if (this.form.LayOff== true) {
                                type = "3"
                            }
                            else if (this.form.Retired==true) {
                                type = "4"
                            }
                            var postData = {
                                Id: this.form.id, Name: this.form.name, jobNum: this.form.jobNum, Department_leaving: this.form.department, DP_group: this.form.DP_group, Position: this.form.position,
                                levelType: this.form.groupStyle, HireDate: this.form.dateOfHire, LastDate: this.form.dateOfFire, Remark: this.form.remark, Department_of_conclusion: this.form.opinenOfDepar,
                                HR_conclusion: this.form.opinenOfHr, Pay_dissatisfaction: this.form.pay_notGood, NotSystem: this.form.system_notGood, Notmanagement: this.form.management_notGood,
                                Jobenvironment: this.form.enviroment_notGood, Better_development: this.form.beter_develoment, NotWork_Itself: this.form.NotWork_Itself, NotCultural_Atmosphere: this.form.NotCultural_Atmosphere,
                                HealthyBody: this.form.HealthyBody, Family_Reasons: this.form.Family_Reasons, NotProbation_Period: this.form.NotProbation_Period,
                                Negotiate_Remove: this.form.Negotiate_Remove, Other_Reasons: this.form.Other_Reasons, Resign:type
                                //Resign: this.form.Resign == true ? 1 : this.form.Resign, SinceFrom: this.form.SinceFrom == true ? 2 : this.form.SinceFrom,
                                //LayOff: this.form.LayOff == true ? 3 : this.form.LayOff, Retired: this.form.Retired == true ? 4 : this.form.Retired
                            };
                            axios.post("/Personnel_Reasons_for_leaving/Create",postData).then(res=>{
                                console.log(res.data)
                                if(res.data=='ok'){
                                    this.flags = true;
                                    $(`.baocun${this.form.id}`).click();   // 由于直接获取所有类为test2的按钮调用click方法会点击所有的按钮，所以需要区别对待--拼出一个新的独有的类
                                    app.$message({
                                        message: "离职原因信息保存成功！",
                                        type: 'success',
                                        center: true
                                    });
                                    this.dialogFormVisible = false;

                                }else{
                                    app.$message({
                                        message: res.data,
                                        type: 'warning',
                                        center: true
                                    });
                                }
                            }).catch(err=>{
                                alert("离职原因提交失败！")})
                        }else{
                            app.$message({
                                message: "请选择或填写族别！",
                                type: 'warning',
                                center: true
                            });
                        }
                    }else{
                        app.$message({
                            message: "请填写人力资源结论！",
                            type: 'warning',
                            center: true
                        });
                    }
                }else{
                    app.$message({
                        message: "请填写部门结论！",
                        type: 'warning',
                        center: true
                    });
                }
            },
            justSaveOuter(){    //跳过并保存页面内修改
                this.flags = true;
                this.dialogFormVisible = false;
                $(`.baocun${this.form.id}`).click();

            }
        }
    });


    var datas = $("#infos").val();
    var targetData = JSON.parse(datas);
    var ttop = []; //获取总统计部分的数据
    var tbottom = []; //获取部门的详细信息
    for (var keys in targetData) {
        if (keys === '总统计') {
            for (keyss in targetData[keys]) {
                ttops = { name: keyss, val: targetData[keys][keyss] };
                ttop.push(ttops);
            }
        } else {
            var tar = { depatment: keys, val: handeldata(targetData[keys])};

            tbottom.push(tar)
        }
    };
    function handeldata(value) {
        var newArr = [];
        for (var keys in value) {
            var tt = { names: keys, values: value[keys] };
            newArr.push(tt);
        };
        return newArr;
    }
    app.totalTop = ttop;
    var ful = ttop;
    var finalVals = 0;
    ful.forEach(item=>{
        if(item.name =='正式员工'|| item.name=='试用员工' ){
            finalVals += item.val
        }
    })
    console.log(ttop)
    //for (let i = 0; i < ttop.length; i++) {
    //    ful += ttop[i].val;
    //    //console.log(ful)
    //}
    //console.log(targetData)
    app.topTotals = finalVals;
    app.totalBottom = tbottom;
    //console.log(targetData)
    app.department = $("#department").val();
    app.status = $("#status").val();
    $("#department").on("change", function(){
        app.department = $(this).val();
    });
    $("#status").on("change", function () {
        app.status = $(this).val();
    });



    //在当行修改数据的方法
    function changeInfo(id,item){
        app.flags = false;
        app.form.text = '';
        //$('.test3').click()
        axios.get("/Personnel_Roster/currentPagrEdit", {
            params: {
                id: id
            }
        }).then(res => {
            infos = res.data
            $(item).hide();
            $(item).next().next().hide();
            $(item).next().show();
            $(item).next().next().next().show()
            var allTd = $(item).parent().parent().prevAll();
            $(allTd[0]).html("<input type='text' readonly class='months' value='" + (infos.OnPostMonth == 0 ? '' : infos.OnPostMonth) + "' />");  //在岗月数
            $(allTd[1]).html("<select><option>" + infos.levelType + "</option><option>操作族</option><option>技术族</option><option>专业族</option><option>服务族</option><option>管理族</option></select>");
            $(allTd[2]).html("<select><option>" + infos.Status + "</option><option>正式员工</option><option>试用员工</option><option>离职员工</option></select>");
            $(allTd[3]).html("<input type='text'value='" + infos.Department + "' />");
            $(allTd[4]).html("<input type='date' onchange='timeChangeLast(this)' class='timeOne' value='" + timeFormats((infos.LastDate==null?'':infos.LastDate)) + "' />");
            $(allTd[5]).html("<input type='date' onchange='timeChangeStart(this)' class='timeTwo' value='" + timeFormats((infos.HireDate==null?'':infos.HireDate)) + "' />");
            $(allTd[6]).html("<input type='text'value='" + (infos.Position == null ? '' : infos.Position) + "' />");
            $(allTd[7]).html("<input type='text'value='" + infos.DP_Group + "' />");
            $(allTd[8]).html("<input type='text'value='" + infos.Education + "' />");
            //$(allTd[9]).html("<input type='text' class='timeThree' value='" + timeFormats(infos.DateOfBirth) + "' />");
            //$(allTd[9]).html("<input type='text'value='" + (infos.Sex==false?'女':'男') + "' />");
            $(allTd[9]).html("<select><option>" +(infos.Sex==false?'女':'男') + "</option><option>男</option><option>女</option></select>")
            $(allTd[10]).html("<input type='text'value='" + infos.Name + "' />");
            $(allTd[11]).html("<input type='text'value='" + infos.JobNum + "' />")   //工号
        }).catch(err => {
        });
    }    //封装 修改方法


    //离职日期改变函数
    function timeChangeLast(item){
        console.log("time changed:" + item.value)
        let timelast = $(".timeOne").val();
        let timestart = $(".timeTwo").val();
        axios.post("/Commonality/TwoDTforMonth_sub", {
            date2: timelast,
            date1: timestart,
        }).then(res=> {
            if(res.data){
                $(".months").val(res.data);
            }else{
                $(".months").val('');

            }

        }).catch(err=> {
        });
    }
    // 入职日期改变操作函数
    function timeChangeStart(item){
        console.log("time changed:" + item.value)
        let timelast = $(".timeOne").val();
        let timestart = $(".timeTwo").val();
        axios.post("/Commonality/TwoDTforMonth_sub", {
            date2: timelast,
            date1: timestart,
        }).then(res=> {
            if(res.data){
                $(".months").val(res.data);
            }else{
                $(".months").val('');

            }
        }).catch(err=> {
        });
     }


    function timeFormat(val) { //时间格式化
        if (val == '') return '1970/01/01 00:00:00';
        var one = val.replace("年", '/');
        var two = one.replace("月", '/');
        var three = two.replace("日", "");
        //console.log(three);
        return three + "00:00:00"
    }    //时间格式化--含时分秒
    function timeFormats(val){
        if(val=='')return '';
        var theDay = new Date(val);
        var theYear = theDay.getFullYear();
        var theMonth = (theDay.getMonth() + 1).toString().padStart(2, "0");
        var theWeek = theDay.getDate().toString().padStart(2, "0");
        var theHour = theDay.getHours().toString().padStart(2, "0");
        var theMinue = theDay.getMinutes().toString().padStart(2, "0");
        var theSecond = theDay.getSeconds().toString().padStart(2, "0");
        return theYear + "-" + theMonth + "-" + theWeek;
    }   //时间格式化--不含时分秒


    //封装保存方法
    function postSingleInfo(id,item){

        var allTd = $(item).parent().parent().prevAll().children();
        var postData = [];
        for(let i=0;i<allTd.length;i++){
            postData.push(allTd[i].value)
        }
        console.log(123)
        console.log(postData)
        app.postDatas = postData
        if (postData[2] == '离职员工' && app.flags == false) {    //员工状态为离职员工时--需要填写离职原因
            if(postData[4]==''){
                app.$message({
                    message: "离职员工必须填写离职日期！！",
                    type: 'warning',
                    center: true
                });
            }else{
                app.form.department = postData[3];
                app.form.position = postData[6];
                app.form.groupStyle = postData[1];
                app.form.dateOfHire = postData[5];
                app.form.dateOfFire = postData[4];
                app.form.id = id;
                app.form.name = postData[10];
                app.form.jobNum = postData[11]
                app.form.DP_group = postData[7]
                console.log('begin---appformdata----')
                //console.log(app.form)
                console.log('end---appformdata----')
                // 在点击模态框之前先判断该条信息是否已经有离职原因信息
                axios.post("/Personnel_Reasons_for_leaving/ModifyCreate",{jobNum:app.form.jobNum}).then(res=>{
                    console.log('begin---res.data----')
                    console.log(res.data)
                    console.log('begin---res.data----')
                    if(res.data != false){
                        app.form.text = '修改'
                        app.form.pay_notGood = res.data.Pay_dissatisfaction==0?false:true//制度不满意
                        app.form.system_notGood = res.data.NotSystem == 0 ? false : true//制度不满意
                        app.form.management_notGood = res.data.Notmanagement == 0 ? false : true//管理不满意
                        app.form.enviroment_notGood = res.data.Jobenvironment == 0 ? false : true//工作环境不满意
                        app.form.beter_develoment = res.data.Better_development == 0 ? false : true//更好的发展
                        app.form.HealthyBody = res.data.HealthyBody == 0 ? false : true;//身体健康
                        app.form.Family_Reasons = res.data.Family_Reasons == 0 ? false : true;//家庭原因
                        app.form.NotWork_Itself = res.data.NotWork_Itself == 0 ? false : true;//工作本身不满意
                        app.form.NotCultural_Atmosphere = res.data.NotCultural_Atmosphere == 0 ? false : true;//文化氛围不满意
                        app.form.Resign = res.data.Resign == 0 ? false : true;//辞职（）
                        app.form.SinceFrom = res.data.SinceFrom == 0 ? false : true;//自离（）
                        app.form.LayOff = res.data.LayOff == 0 ? false : true;//辞退（）
                        app.form.Retired = res.data.Retired == 0 ? false : true;//退休（）
                        app.form.NotProbation_Period = res.data.NotProbation_Period == 0 ? false : true;//试用期不合格
                        app.form.Negotiate_Remove = res.data.Negotiate_Remove == 0 ? false : true;//协商解除
                        app.form.Other_Reasons = res.data.Other_Reasons == 0 ? false : true;//其他
                        app.form.remark = res.data.Remark == "" ? '' : res.data.Remark;//备注
                    }else{

                    }
                }).catch(err=>{
                })
                $("#addInfos").click();
            }

        } else{    //员工状态为非离职员工时--正常提交保存
            axios.post("/Personnel_Roster/updateDate", {
                Id: id,
                JobNum: app.postDatas[11],
                Name: app.postDatas[10], Sex: app.postDatas[9] === '男' ? true : false,
                Education: app.postDatas[8], DP_Group: app.postDatas[7], Position: app.postDatas[6], HireDate: app.postDatas[5], LastDate: app.postDatas[4],
                Department: app.postDatas[3], Status: app.postDatas[2], levelType: app.postDatas[1], OnPostMonth: app.postDatas[0] == '' ? '0' : app.postDatas[0]
            }).then(res => {
                console.log(res.data)
                if (res.data == "ok") {
                    app.$message({
                        message: "保存成功！",
                        type: 'success',
                        center: true
                    });
                    var trPrevs = $(item).parent().parent().prevAll();
                    $(trPrevs[0]).text(postData[0] == 0 ? '' : postData[0]);
                    $(trPrevs[1]).text(postData[1]);
                    $(trPrevs[2]).text(postData[2]);
                    $(trPrevs[3]).text(postData[3]);
                    $(trPrevs[4]).text(postData[4]);
                    $(trPrevs[5]).text(postData[5]);
                    $(trPrevs[6]).text(postData[6]);
                    $(trPrevs[7]).text(postData[7]);
                    $(trPrevs[8]).text(postData[8]);
                    $(trPrevs[9]).text(postData[9]);
                    $(trPrevs[10]).text(postData[10]);
                    $(trPrevs[11]).text(postData[11]);
                    $(trPrevs[12]).text(postData[12] == null ? '' : postData[12]);
                    $(item).hide();
                    $(item).prev().show();
                    $(item).next().show();
                    $(item).next().next().hide();
                    app.flags = false
                    //console.log(trPrevs)
                    app.postDatas = []

                }
                else if (res.data == false) {
                    //app.$message({
                    //    message: "保存失败！",
                    //    type: 'warning',
                    //    center: true
                    //});
                    //changeInfo(id,item)
                    app.flags = false
                    app.postDatas = []
                }
            }).catch(err => {
                app.$message({
                    message: "无法连接服务器！",
                    type: 'danger',
                    center: true
                });
            })
        }



    }


    //取消保存的方法
    function giveUpPost(id,item){     //取消保存的方法
        //console.log(infos);
        axios.post("/Personnel_Roster/currentPagrEdit",{id:id}).then(res=>{
            var infos = res.data;
            var allTd = $(item).parent().parent().prevAll();
            $(allTd[0]).text(infos.OnPostMonth == '' ? '' : infos.OnPostMonth);
            $(allTd[1]).text(infos.levelType);
            $(allTd[2]).text(infos.Status);
            $(allTd[3]).text(infos.Department);
            $(allTd[4]).text(timeFormats(infos.LastDate == null ? '' : infos.LastDate));
            $(allTd[5]).text(timeFormats(infos.HireDate));
            $(allTd[6]).text(infos.Position);
            $(allTd[7]).text(infos.DP_Group);
            $(allTd[8]).text(infos.Education);
            //$(allTd[9]).text(timeFormats(infos.DateOfBirth));
            $(allTd[9]).text((infos.Sex == true ? '男' : '女'));
            $(allTd[10]).text(infos.Name);
            $(allTd[11]).text(infos.JobNum);
            $(item).hide();
            $(item).prev().show();
            $(item).prev().prev().hide();
            $(item).prev().prev().prev().show();
        }).catch(err=>{

        })
    }

   // var timelast = ''
    function fun() {
        timelast = $(".timeOne").val();
        let timestart = $(".timeTwo").val();
        if(timestart!=''&& timelast!='')
            axios.post("/Commonality/TwoDTforMonth_sub", {
                date2: timelast,
                date1: timestart,
            }).then(res=> {
                $(".months").val(res.data);
            }).catch(err=> {
            });
        if(timelast==''){
            $(".months").val('');
        }
    };





    function func(event) {
        event.preventDefault();
    }




    $('#registSubmit').on('submit', function () {
        event.preventDefault() //阻止form表单默认提交
        registPost();

    })

    function registPost() {
        $.ajax({
            type: "post",
            url: "/Personnel_Roster/updateDate",
            data: {
            },
        }).success(function (message) {
        }).fail(function (err) {
        });
    }

    function sortTable(tableId,indexs,upOrDown,types) {//点击按钮实现表格排序的方法；目前支持纯字符串排序+整数排序+标准时间格式排序
        var oTab = document.getElementById(tableId);
        var arr = [];
        var indexs = indexs;
        if (upOrDown === "up") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = Number(tr1.cells[indexs].innerHTML) == '' ? '0' : parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = Number(tr2.cells[indexs].innerHTML) == '' ? '0' : parseInt(tr2.cells[indexs].innerHTML);
                    return n2 - n1;
                });
                //console.log(arr)
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date(timeFormat(tr1.cells[indexs].innerHTML)).getTime();    //NaN
                    var n2 = Number(new Date(timeFormat(tr2.cells[indexs].innerHTML)).getTime());
                    //console.log(n1)
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerHTML);
                    var n2 = (tr2.cells[indexs].innerHTML);
                    return n2 > n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n2.value - n1.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        } else if (upOrDown === "down") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = Number(tr1.cells[indexs].innerHTML) == '' ? '0' : parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = Number(tr2.cells[indexs].innerHTML) == '' ? '0' : parseInt(tr2.cells[indexs].innerHTML);
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date(timeFormat(tr1.cells[indexs].innerHTML)).getTime();
                    var n2 = new Date(timeFormat(tr2.cells[indexs].innerHTML)).getTime();
                    return n1 > n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerHTML);
                    var n2 = (tr2.cells[indexs].innerHTML);
                    return n2 < n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                //console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n1.value - n2.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        }
    }


</script>
