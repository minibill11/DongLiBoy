@model IEnumerable<JianHeMES.Models.IQCReport>

@{
    ViewBag.Title = "IQC报告首页";
}
<link href="~/Scripts/Bootstraps/bootstrap-select.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/bootstrap-select.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<style>
    .table-top table thead tr th,.table-bottom table tbody tr td{
        display:inline-block;
        float:left;
        margin:0;
        padding:4px;
        word-wrap:break-word;
        text-align:center;
    }
    select{
        width:45px !important;
    }
    .table-top table thead tr th:nth-child(1),.table-bottom table tbody tr td:nth-child(1){
        width:78px;
    }
    .table-top table thead tr th:nth-child(2),.table-bottom table tbody tr td:nth-child(2){
        width:60px;
    }
    .table-top table thead tr th:nth-child(3),.table-bottom table tbody tr td:nth-child(3){
        width:70px;
    }
    .table-top table thead tr th:nth-child(4),.table-bottom table tbody tr td:nth-child(4){
        width:115px;
    }
    .table-top table thead tr th:nth-child(5),.table-bottom table tbody tr td:nth-child(5){
        width:85px;
    }
    .table-top table thead tr th:nth-child(6),.table-bottom table tbody tr td:nth-child(6){
        width:70px;
    }
    .table-top table thead tr th:nth-child(7),.table-bottom table tbody tr td:nth-child(7){
        width:70px;
    }
    .table-top table thead tr th:nth-child(8),.table-bottom table tbody tr td:nth-child(8){
        width:70px;
    }
    .table-top table thead tr th:nth-child(9),.table-bottom table tbody tr td:nth-child(9){
        width:95px;
    }
    .table-top table thead tr th:nth-child(10),.table-bottom table tbody tr td:nth-child(10){
        width:70px;
    }
    .table-top table thead tr th:nth-child(11),.table-bottom table tbody tr td:nth-child(11){
        width:44px;
    }
    .table-top table thead tr th:nth-child(12),.table-bottom table tbody tr td:nth-child(12){
        width:44px;
    }
    .table-top table thead tr th:nth-child(13),.table-bottom table tbody tr td:nth-child(13){
        width:70px;
    }
    .table-top table thead tr th:nth-child(14),.table-bottom table tbody tr td:nth-child(14){
        width:150px;
    }
    .table-top table thead tr th:nth-child(15),.table-bottom table tbody tr td:nth-child(15){
        width:45px;
    }


    .table{
        table-layout:fixed;
        
    }
    .table>tbody>tr>td{
        /*white-space: nowrap;*/
        height:50px;
        overflow:hidden;
        /*text-overflow: ellipsis;*/
    }
    
    .fqc-index-content-inner{
        display:inline-block;
        margin-left:13px;
    }
</style>

<h2 style="text-align:center;">@ViewBag.Title</h2>
<br />
<div class="text-center">
    <p class="text-success text-center btn btn-default one">
        @Html.ActionLink("新建IQC报告", "IQCReportCreate")
    </p>
</div>
<br />
<div id="app">
    @using (Html.BeginForm("Index", "IQCReports", FormMethod.Post, new { id = "searchForm", @class = "text-center" }))
    {
        @Html.AntiForgeryToken()
        //更新版本
        <div class="containers fqc-index-content">
            <form asp-controller="IQCReports" asp-action="Index" method="post">
                <div class="fqc-index-content-inner">
                    <span>批号：</span>@Html.DropDownList("bitch", (List<SelectListItem>)ViewBag.OrderList, "全部", new { @class = "selectpicker", id = "orderNum", data_live_search = "true", data_style = "form-control" })
                </div>
                <div class="fqc-index-content-inner">
                    <span>规格：</span>@Html.DropDownList("Specification", (List<SelectListItem>)ViewBag.specifition, "全部", new { @class = "selectpicker", id = "orderNum", data_live_search = "true", data_style = "form-control" })
                </div>
                <div class="fqc-index-content-inner">
                    <el-date-picker v-model="value2"
                                    align="right"
                                    type="date"
                                    size="small"
                                    v-bind:name="time"
                                    placeholder="来料日期"
                                    picker-options="pickerOptions">
                    </el-date-picker>
                </div>
                <div class="fqc-index-content-inner">
                     <el-date-picker v-model="value12"
                                          align="right"
                                          type="date"
                                          size="small"
                                          v-bind:name="InspectionDate"
                                          placeholder="检料日期"
                                          picker-options="pickerOptions">
                    </el-date-picker>
                </div>
                <div class="fqc-index-content-inner">
                     <el-button v-on:click="check" size="small" type="primary">查找</el-button>
                    <button id="searchcButton" style="display:none;" data-val="12">查找</button>
                    <input type="submit" id="searchButton" class="btn btn-default hidden" value="查找" />
                </div>
            </form>
        </div>
    }

</div>
<div class="table-top" style="margin-top:12px;">
    <table>
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Material_SN)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable', 0, 'up', 'test')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 0, 'down', 'test')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Provider)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable', 1, 'up', 'strings')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 1, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MaterialName)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable', 2, 'up', 'strings')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 2, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ModelNumber)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',3,'up','strings')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 3, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Specification)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',4,'up','strings')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 4, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MaterialQuantity)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',5,'up','init')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 5, 'down', 'init')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IncomingDate)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',6,'up','tt')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable',6,'down','tt')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ApplyPurchaseOrderNum)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',7,'up','tt')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable',7,'down','tt')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BatchNum)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',8,'up','strings')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable', 8, 'down', 'strings')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InspectionDate)
                    <span class="glyphicon glyphicon-chevron-up" role="button" onclick="sortTable('myTable',9,'up','tt')"></span>
                    <span class="glyphicon glyphicon-chevron-down" role="button" onclick="sortTable('myTable',9,'down','tt')"></span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SamplingPlan)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NGD)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NGHandle)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReportRemark)
                </th>
                <th>操作</th>
            </tr>
        </thead>
    </table>
</div>
<div class="table-bottom" style="max-height:660px;overflow:auto;width:1160px;">
    <table class="table" id="myTable" >


        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.ActionLink(item.Material_SN.ToString(), "Details", new { id = item.Id })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Provider)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MaterialName)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ModelNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Specification)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MaterialQuantity)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IncomingDate)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApplyPurchaseOrderNum)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BatchNum)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InspectionDate)
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SamplingPlan)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NGD)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NGHandle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReportRemark)
                </td>
                <td>
                    @*@Html.ActionLink("编辑", "IQCReportEdit", new { id = item.Id }) |*@
                    <span>
                        @Html.ActionLink("详细", "Details", new { id = item.Id })
                    </span>
                    <span class="deleteable">
                        @Html.ActionLink("删除", "Delete", new { id = item.Id })
                    </span>
                </td>
            </tr>
        }

    </table>

</div>


<script>


    function checkRoles(list, roleName) {   //检测权限
        var flag = false
        if (list && roleName) {
            for (let item in list) {
                if (list[item] == roleName) {
                    flag = true
                }
            }
        }
        return flag
    }

    var roles = JSON.parse(localStorage.getItem("rigths"));
    if (checkRoles(roles, '新建IQC报告')) {
        $('.one').show()
    } else {
        $('.one').hide()
    }
    if (checkRoles(roles, '删除报告')) {
        $('.deleteable').show()
    } else {
        $('.deleteable').hide()
    }

    var app = new Vue({
        el: "#app",
        data: {
            value2: '',
            value12: '',
            time: 'time',
            InspectionDate: 'InspectionDate'
        },
        methods: {
            check() {
                $("#searchcButton").click();
            }
        }
    })
    function sortTable(tableId, indexs, upOrDown, types) {//点击按钮实现表格排序的方法；目前支持纯字符串排序+整数排序+标准时间格式排序
        var oTab = document.getElementById(tableId);
        var arr = [];
        var indexs = indexs;
        if (upOrDown === "up") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = parseInt(tr2.cells[indexs].innerHTML);
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date((tr1.cells[indexs].innerHTML)).getTime();
                    var n2 = new Date((tr2.cells[indexs].innerHTML)).getTime();
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "test") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].children[0].innerText);
                    var n2 = (tr2.cells[indexs].children[0].innerText);
                    return n2 > n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
            else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerText).trim().charCodeAt();
                    var n2 = (tr2.cells[indexs].innerText).trim().charCodeAt();
                    return n2 - n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n2.value - n1.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n2 > n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        } else if (upOrDown === "down") {
            if (types === "init") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //整数排序
                    var n1 = parseInt(tr1.cells[indexs].innerHTML);
                    var n2 = parseInt(tr2.cells[indexs].innerHTML);
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "times") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //标准时间格式排序排序
                    var n1 = new Date((tr1.cells[indexs].innerHTML)).getTime();
                    var n2 = new Date((tr2.cells[indexs].innerHTML)).getTime();
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
            else if (types === "test") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].children[0].innerText);
                    var n2 = (tr2.cells[indexs].children[0].innerText);
                    return n2 < n1;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "strings") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //纯字符串排序
                    var n1 = (tr1.cells[indexs].innerText).trim().charCodeAt();
                    var n2 = (tr2.cells[indexs].innerText).trim().charCodeAt();
                    return n1 - n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "checkbox") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                console.log(arr)
                arr.sort(function (tr1, tr2) {       //选择框排序
                    var n1 = tr1.cells[indexs].children;
                    var n2 = tr2.cells[indexs].children;
                    if ($(n1).attr('checked')) {
                        n1.value = 1
                    } else {
                        n1.value = 0
                    }
                    if ($(n2).attr('checked')) {
                        n2.value = 1
                    } else {
                        n2.value = 0
                    }
                    return n1.value - n2.value

                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            } else if (types === "tt") {
                for (var i = 0; i < oTab.tBodies[0].rows.length; i++) {
                    arr[i] = oTab.tBodies[0].rows[i];
                }
                arr.sort(function (tr1, tr2) {        //时分秒排序
                    var n1 = timeToSec(tr1.cells[indexs].innerText);
                    var n2 = timeToSec(tr2.cells[indexs].innerText);
                    return n1 > n2;
                });
                for (var i = 0; i < arr.length; i++) {
                    oTab.tBodies[0].appendChild(arr[i]);
                }
            }
        }
    }


    function timeToSec(time) {     //时分秒字符串格式转换为毫秒
        if (time.indexOf("时") != -1 || time.indexOf("分") != -1 || time.indexOf("秒") != -1) {
            var time = time.replace(/天/, ":");
            var time = time.replace(/小时/, ":");
            var time = time.replace(/分/, ":");
            var time = time.replace(/秒/, ":");
            var day = time.split(':')[0]
            var hour = time.split(':')[1]
            var min = time.split(':')[2]
            var sec = time.split(':')[3]
            var s = Number(day * 86400) + Number(hour * 3600) + Number(min * 60) + Number(sec)
            return s * 1000
        } else if (time.length >= 12) {
            var targetNum = time.substring(10);
            return Number(targetNum, 10);
        } else {
            var time = time.replace(/-/, "");
            //console.log(time)
            return time;
        }
    }

</script>