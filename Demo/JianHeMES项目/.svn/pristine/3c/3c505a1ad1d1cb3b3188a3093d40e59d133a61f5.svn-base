@{
    ViewBag.Title = "外箱库位号修改";
}

@*  <summary>
    1.选择订单号后会显示该订单入库完成率列表
    2.扫码会检验条码是否可以修改库位号，若条码合格则加入修改清单
    3.输入新库位号后点击确认进行修改
    </summary>*@

<link href="~/Content/styleFile/packaging/index.css" rel="stylesheet" />
<script src="~/Content/styleFile/packaging/index.js"></script>
<link href="~/Content/styleFile/packaging/stockStyle.css" rel="stylesheet" />
<style>
    .el-table td, .el-table th {
        padding: 0;
    }

    .adiv {
        display: inline-block;
    }

    .el-autocomplete ul li {
        text-align: center;
    }
</style>
<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            <div v-show="screenSize>=768">
                <h2 class="text-center">@ViewBag.Title</h2>
                <a href="/Packagings/inStockConfirm"><el-button size="small">入库</el-button></a>
                <div class="adiv" href="/Packagings/stockNumEdit"><el-button size="small" type="primary" plain disabled style="cursor:default">修改库位号</el-button></div>
                <a href="/Packagings/outStockConfirm"><el-button size="small">出库</el-button></a>
            </div>
            <div v-show="screenSize<768">
                <h3 style="margin:10px 0 0;">@ViewBag.Title</h3>
                <el-dropdown placement="bottom">
                    <el-button size="medium ">
                        更多菜单<i class="el-icon-arrow-down el-icon--right"></i>
                    </el-button>
                    <el-dropdown-menu slot="dropdown">
                        <a href="/Packagings/inStockConfirm"><el-dropdown-item>入库</el-dropdown-item></a>
                        <div href="/Packagings/stockNumEdit"><el-dropdown-item disabled>修改库位号</el-dropdown-item></div>
                        <a href="/Packagings/outStockConfirm"><el-dropdown-item>出库</el-dropdown-item></a>
                    </el-dropdown-menu>
                </el-dropdown>
            </div>
        </el-header>
        <el-main v-loading="loading">
            <el-row>
                <div class="inputframe">
                    <span>订单号：</span>
                    <select-input v-model.trim="selectVal" v-bind:disabled="barcodeList.length>0" :options="selectOptions" :isfocus="true" :ismultiple="false" size="medium" @@select-val="selectHandle"></select-input>
                </div>
                <div class="inputframe">
                    <span>条码号：</span>
                    <el-input placeholder="请输入条码号"
                              v-model.trim="barcode"
                              ref="inputRef"
                              style="text-align:right;display:inline-block;"
                              v-on:keyup.enter.native="barScan($event)"
                              size="medium"
                              autofocus
                              clearable>
                    </el-input>
                </div>
                <div class="inputframe">
                    <span>新库位号：</span>
                    <el-input placeholder="请输入库位号"
                              v-model.trim="newWarehouseNum"
                              style="text-align:right;display:inline-block;"
                              v-on:keyup.enter.native="barScan($event)"
                              size="medium"
                              autofocus
                              clearable>
                    </el-input>
                </div>
                <div class="inputframe">
                    <el-button v-on:click="clearList" size="mini" round>重置</el-button>
                    <el-button @@click="confirmCheck" size="mini" round v-bind:disabled="barcodeList.length==0">确认</el-button>
                </div>
                <div class="inputframe">
                    <el-table :data="completeInfo"
                              max-height="280"
                              border>
                        <el-table-column prop="type"
                                         label="类型"
                                         width="78">
                        </el-table-column>
                        <el-table-column prop="screenNum"
                                         label="屏序"
                                         width="70">
                        </el-table-column>
                        <el-table-column prop="completeNum"
                                         label="已完成"
                                         width="70">
                        </el-table-column>
                        <el-table-column prop="complete"
                                         label="完成率"
                                         width="80">
                        </el-table-column>
                    </el-table>
                </div>
                <div class="inputframe">
                    <el-table :data="barcodeList"
                              max-height="280"
                              border>
                        <el-table-column prop="barcode"
                                         label="条码清单"
                                         width="160">
                        </el-table-column>
                        <el-table-column prop="warehouseNum"
                                         label="现库位号">
                        </el-table-column>
                        <el-table-column label=""
                                         width="40">
                            <template slot-scope="scope">
                                <el-button @@click.native.prevent="deleteRow(scope.$index,scope.row ,barcodeList)"
                                           type="text"
                                           size="mini"
                                           style="margin:0;padding:0;width:100%;">
                                    <i class="el-icon-error"></i>
                                </el-button>
                            </template>
                        </el-table-column>
                    </el-table>
                    <span v-if="barcodeList.length!=0">条码数量：{{barcodeList.length}}</span>
                </div>
            </el-row>
        </el-main>
    </el-container>
</div>
@* 引入选择框组件 *@
@RenderPage("~/Views/Shared/_SelectInput.cshtml")
<script>
    var app = new Vue({
        el: "#app",
        data: {
            screenSize: document.body.clientWidth,
            loading: false,
            selectOptions: [],//订单号下拉列表
            selectVal: '',//订单号
            completeInfo: [],//完成信息列表
            barcode: "",//条码号
            barcodeList: [],//条码号列表
            newWarehouseNum: ""//新库位号
        },
        created: function () {
            //获取订单号选择框下拉清单
            axios.post('/Packagings/GetOrderList').then(res => {
                this.selectOptions = res.data;
            }).catch(err => {
                console.warn("获取选择列表失败")
            });
            //获取屏幕大小，并存储在app.screenSize上
            window.onresize = function () {
                app.screenSize = document.body.clientWidth;
            };
        },
        mounted: function () {
            //获取本地浏览器存储的订单号
            let localOrder = localStorage.getItem('Order');
            if (localOrder != null) {
                this.selectVal = localOrder;
                this.selectHandle(this.selectVal);
            };
        },
        methods: {
            //确认修改库位号方法
            confirmCheck: function () {
                let thisList = this.barcodeList, postList = [];
                for (let i in thisList) {
                    postList.push(thisList[i].barcode)
                };

                axios.post('/Packagings/StockNumEdit', { ordernum: this.selectVal, outherboxbarcode: postList, warehouNum: this.newWarehouseNum }).then(res => {
                    //console.log(res.data);
                    this.$alert("库位号修改成功！", '修改成功', {
                        confirmButtonText: '确定',
                        type: 'success',
                        callback: () => {
                            this.clearList();
                        }
                    });
                }).catch(err => {
                    console.warn("post失败")
                });
            },
            //扫码检验方法
            barScan: function (event) {
                let thisdata = event.target.value, listcheck = this.barcodeList;
                if (thisdata != "") {
                    //检查重复
                    for (let i in listcheck) {
                        if (listcheck[i].barcode == thisdata) {
                            this.$message({
                                showClose: true,
                                message: '已有重复条码！',
                                type: 'warning'
                            });
                            return;
                        };
                    };

                    axios.post('/Packagings/CheckOutsideBoxBadeCodeNumExist1', { ordernum: this.selectVal, outsidebarcode: thisdata }).then(res => {
                        //console.log(res.data);
                        if (res.data.message == "") {
                            listcheck.push(res.data);
                        } else {
                            this.$message({
                                showClose: true,
                                message: res.data.message,
                                type: 'warning'
                            });
                        };
                    }).catch(err => {
                        console.warn("post失败")
                    });
                } else {
                    this.$message({
                        showClose: true,
                        type: 'warning',
                        message: "请输入条码！"
                    });
                };
                this.barcode = "";
            },
            //获取完成信息
            getcompleteInfo: function () {
                if (this.selectVal != "") {
                    axios.post('/Packagings/GetcompleteInfo', {
                        ordernum: this.selectVal
                    }).then(res => {
                        //console.log(res.data);
                        this.completeInfo = res.data;
                    }).catch(err => {
                        console.warn("获取信息失败")
                    });
                } else {
                    this.completeInfo = [];
                };
            },
            //删除行
            deleteRow: function (index, row, data) {
                data.splice(index, 1);
            },
            //重置
            clearList: function () {
                this.barcode = "";
                this.barcodeList = [];
                this.newWarehouseNum = "";
            },
            //订单号改变后，获取信息/存储订单号至本地浏览器 的方法
            selectHandle: function (v) {
                this.getcompleteInfo();
                if (v != "") {
                    localStorage.setItem('Order', v);
                    this.$refs.inputRef.focus();
                };
            }
        },
        watch: {
            //监听订单号
            selectVal(v) {
                if (v == '') {
                    this.getcompleteInfo();
                }
            },
        }
    });
</script>