
@{
    ViewBag.Title = "订单包装、入库、出库详情";
}

@*  <summary>
    1.订单包装、入库、出库详细信息
    2.展示该订单产值信息，和订单对应的外箱条码信息清单
    3.外箱条码和模组条码信息可筛选
    4.点击外箱条码号，可查看该外箱条码标签图片
    5.模组条码有重复会有红色标点提示
    6.显示该订单未包装模组条码清单
    7.显示该订单未入库外箱条码清单
    8.显示该订单未出库外箱条码清单
    9.可以导出此订单外箱信息excel表
    </summary>*@

<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<h3 style="text-align:center">订单详情</h3>
<style>

    .red {
        color: red;
    }

    .el-table th div {
        overflow: visible !important;
    }

    .el-table th {
        overflow: visible;
    }

    table .cell, table td {
        text-align: center;
        padding: 2px !important;
    }

    table td {
        padding: 2px 0 !important;
    }

    .topcontainer {
        display: flex;
    }

    .top-left {
        width: 25%;
    }

    .top-rigth {
        width: 55%;
        text-align: center;
    }

    .el-dialog__body, .el-dialog__header {
        padding: 5px !important;
    }
</style>
<div id="app">
    <div class="topcontainer">
        <div class="top-left">
            @*<el-button v-on:click="goBack" type="primary" size="mini"><i class="el-icon-d-arrow-left"></i>返回</el-button>*@
        </div>
        @* 选择框 *@
        <div class="top-rigth">
            <el-select v-model="value" size="small" clearable filterable placeholder="选择外箱条码">
                <el-option v-for="item in options"
                           v-bind:key="item.label"
                           v-bind:label="item.label"
                           v-bind:value="item.label">
                </el-option>
            </el-select>
            <el-select v-model="value2" size="small" clearable filterable placeholder="选择模组条码">
                <el-option v-for="item in options2"
                           v-bind:key="item.label"
                           v-bind:label="item.label"
                           v-bind:value="item.label">
                </el-option>
            </el-select>
        </div>
    </div>

    @* 订单产值信息表格 *@
    <el-table v-bind:data="tableDataDetails"
              size="small"
              style="width: 100%;text-align:center;">
        <el-table-column prop="OrderNum"
                         label="订单"
                         width="100">
        </el-table-column>
        <el-table-column prop="Worth"
                         width="105"
                         label="总产值（万）">
        </el-table-column>
        <el-table-column prop="moduleCount"
                         width="75"
                         label="模组数量">
        </el-table-column>
        <el-table-column prop="packingCount"
                         width="90"
                         label="已包装数量">
        </el-table-column>
        <el-table-column prop="warehousJoinCount"
                         width="85"
                         label="已入库数量">
        </el-table-column>
        <el-table-column prop="warehousOutCount"
                         width="90"
                         label="已出库数量">
        </el-table-column>
        <el-table-column prop="nuoInfo"
                         width="180"
                         sortable
                         label="挪用信息">
        </el-table-column>
        <el-table-column prop="warehouseJoinValue"
                         width="115"
                         label="目前入库产值（万）">
        </el-table-column>
        <el-table-column prop="uncompleteValue"
                         width="115"
                         label="未完成产值（万）">
        </el-table-column>
        <el-table-column prop="warehousJoinComplete"
                         width="80"
                         label="入库完成率">
        </el-table-column>
        <el-table-column prop="warehousOutComplete"
                         width="80"
                         label="出库完成率">
        </el-table-column>
        <el-table-column prop="remark"
                         width="150"
                         label="备注">
        </el-table-column>
    </el-table>


    <el-container>
        <el-aside width="850px">
            <a :href="'/Packagings/OutputPackagingDatatoExcel?ordernum='+orderDetails.OrderNum">
                <el-button @*v-on:click="downloadExcel"*@ type="success" size="mini" style="margin-top:15px;">导出excel</el-button>
            </a>
            @* 订单外箱信息清单表格 *@
            <el-table v-bind:data="tableData"
                      v-bind:span-method="objectSpanMethod"
                      v-on:sort-change="sortChanged"
                      style="width: 100%;"
                      max-height="550"
                      border>
                <el-table-column prop="orderN"
                                 label="外箱条码"
                                 sortable
                                 width="180">
                    <template slot-scope="scope">
                        <el-button :loading="imgLoading" @@click="showTag(scope.row.orderN)" type="text">{{scope.row.orderN}}</el-button>
                    </template>
                </el-table-column>
                <el-table-column prop="status"
                                 label="状态"
                                 width="80">
                </el-table-column>
                <el-table-column prop="time"
                                 label="时间"
                                 width="170">
                </el-table-column>
                <el-table-column prop="warehousenum"
                                 label="库位号"
                                 width="80">
                </el-table-column>
                <el-table-column prop="orderSon"
                                 label="模组条码">
                    <template slot-scope="scope" slot="header">
                        <el-badge v-bind:value="repeatNums" class="item">
                            模组条码
                        </el-badge>
                    </template>
                    <template slot-scope="scope">
                        <span v-bind:class="scope.row.color==200?'red':''">{{scope.row.orderSon}}</span>
                    </template>
                </el-table-column>
            </el-table>
        </el-aside>
        <el-main>
            @* 订单未包装模组条码表格 *@
            <el-table v-bind:data="notPackgeData"
                      style="width: 100%;margin-top:23px;"
                      max-height="200"
                      border>
                <el-table-column prop="barcode"
                                 v-bind:label="lableOne">
                </el-table-column>
            </el-table>
            @* 订单未入库外箱条码表格 *@
            <el-table v-bind:data="notInAdta"
                      style="width: 100%;margin-top:23px;"
                      max-height="200"
                      border>
                <el-table-column prop="barcode"
                                 v-bind:label="labelTwo">
                    <template slot-scope="scope">
                        <el-button :loading="imgLoading" @@click="showTag(scope.row.barcode)" type="text">{{scope.row.barcode}}</el-button>
                    </template>
                </el-table-column>
            </el-table>
            @* 订单未出库外箱条码表格 *@
            <el-table v-bind:data="notOutData"
                      style="width: 100%;margin-top:23px;"
                      max-height="200"
                      border>
                <el-table-column prop="barcode"
                                 v-bind:label="lableThree">
                </el-table-column>
            </el-table>
        </el-main>
    </el-container>
    <el-dialog title="外箱标签"
               top="6vh"
               width="30%"
               center
               :visible.sync="dialogVisible">
        <img style="width: 100%;"
             :src="imgUrl">
    </el-dialog>

</div>

<script>
    //时间格式化方法
    function GMTToStr(time) {
        if (time != null) {
            let date = new Date(time)
            //console.log(date);
            let Str = date.getFullYear() + '-' +
                (date.getMonth() + 1).toString().padStart(2, '0') + '-' +
                date.getDate().toString().padStart(2, '0') + ' ' +
                date.getHours().toString().padStart(2, '0') + ':' +
                date.getMinutes().toString().padStart(2, '0')
            return Str
        } else {
            return ''
        }
    }

    // 获取按照当前表格数据而得到的合并信息方法
    function getSpan(arrs) {
        app.spanArr = []
        app.spanArrs = []
        app.spanArrss = []
        let contactDot = 0;
        let contactDots = 0;
        let contactDotss = 0;
        arrs.forEach((item, index) => {
            if (index === 0) {
                app.spanArr.push(1)
            } else {
                if (item.orderN === arrs[index - 1].orderN) {
                    app.spanArr[contactDot] += 1;
                    app.spanArr.push(0)
                } else {
                    contactDot = index
                    app.spanArr.push(1)
                }
            }
        })

        arrs.forEach((item, index) => {
            if (index === 0) {
                app.spanArrs.push(1)
            } else {
                if (item.orderN === arrs[index - 1].orderN) {
                    app.spanArrs[contactDots] += 1;
                    app.spanArrs.push(0)
                } else {
                    contactDots = index
                    app.spanArrs.push(1)
                }
            }
        })

        arrs.forEach((item, index) => {
            if (index === 0) {
                app.spanArrss.push(1)
            } else {
                if (item.warehousenum === arrs[index - 1].warehousenum) {
                    app.spanArrss[contactDotss] += 1;
                    app.spanArrss.push(0)
                } else {
                    contactDotss = index
                    app.spanArrss.push(1)
                }
            }
        })
    }

    var app = new Vue({
        el: "#app",
        data: {
            tableDataDetails: [],//订单产值信息数组
            value2: '',//选择框模组条码值
            value: '',//选择框外箱条码值
            options: [],//选择框外箱条码下拉列表
            options2: [],//选择框模组条码下拉列表
            orderNums: '',   // 无用变量
            tableData: [],//订单外箱信息表格数据
            tableData2: [],   // 用于当两个选择框的值都为空的时候复原表格的初始值
            spanArr: [],//合并信息的暂存值
            spanArrs: [],//合并信息的暂存值
            spanArrss: [],//合并信息的暂存值
            orderDetails: {},//订单产值信息对象
            originData: [],  //原始数据
            notPackgeData: [],//订单未包装模组条码表格
            notInAdta: [],//订单未入库外箱条码表格
            notOutData: [],//订单未出库外箱条码表格
            //模态框
            dialogVisible: false,//模态框显示开关
            imgUrl: "",//图片地址
            imgLoading: false,//图片加载开关
            repeatNums: 0,//重复模组号数量值
            lableOne: "",//未包装模组条码表格标题
            labelTwo: "",//未入库外箱条码表格标题
            lableThree: ""//未出库外箱条码表格标题

        },
        mounted() {   // 页面加载时请求数据 以及将href中传递过来的属性值保存到data

            //this.orderDetails.orderNum = getUrlParam('orderNum')
            //this.orderDetails.worth = getUrlParam('worth')
            //this.orderDetails.moduleCount = getUrlParam('moduleCount')
            //this.orderDetails.packingCount = getUrlParam('packingCount')
            //this.orderDetails.warehousJoinCount = getUrlParam('warehousJoinCount')
            //this.orderDetails.warehousOutCount = getUrlParam('warehousOutCount')
            //this.orderDetails.warehouseJoinValue = getUrlParam('warehouseJoinValue')
            //this.orderDetails.uncompleteValue = getUrlParam('uncompleteValue')
            //this.orderDetails.warehousJoinComplete = getUrlParam('warehousJoinComplete')
            //this.orderDetails.warehousOutComplete = getUrlParam('warehousOutComplete')
            //this.orderDetails.remark = getUrlParam('remark')

            // 中间表格的数据

            axios.post("/Packagings/DisplayTop", { ordernum: getUrlParam('orderNum') }).then(res => {
                this.orderDetails = res.data;
                this.tableDataDetails.push(this.orderDetails);
                axios.post('/Packagings/DisplayNotPackingList', {
                    ordernum: res.data.OrderNum
                }).then(res => {
                    console.log(JSON.parse(res.data.NotPackingarray))
                    console.log(JSON.parse(res.data.NotWarehousjoinarray))
                    console.log(JSON.parse(res.data.NotWarehousoutarray))
                    let one = JSON.parse(res.data.NotPackingarray)
                    let two = JSON.parse(res.data.NotWarehousjoinarray)
                    let three = JSON.parse(res.data.NotWarehousoutarray)
                    if (one != null) {
                        one.forEach(item => {
                            let obj = { barcode: item }
                            this.notPackgeData.push(obj)
                        });
                        this.lableOne = `未包装模组条码数${one.length}`
                    } else {
                        this.lableOne = `未包装模组条码`
                    }
                    if (two != null) {
                        two.forEach(item => {
                            let obj = { barcode: item }
                            this.notInAdta.push(obj)
                        });
                        this.labelTwo = `未入库外箱条码数${two.length}`
                    } else {
                        this.labelTwo = `未入库外箱条码`
                    }
                    if (three != null) {
                        three.forEach(item => {
                            let obj = { barcode: item }
                            this.notOutData.push(obj)
                        });
                        this.lableThree = `未出库外箱条码数${three.length}`
                    } else {
                        this.lableThree = `未出库外箱条码`
                    }
                    console.log(this.notPackgeData)
                    console.log(this.notInAdta.push(obj))
                    console.log(this.notOutData)
                }).catch(err => {
                    console.warn("未装箱");
                });
            }).catch(err => {
                console.log("连接失败！")
            })
            //处理外箱条码表格数据
            axios.post("/Packagings/DisplayWarehouse", { ordernum: getUrlParam('orderNum') }).then(res => {
                console.log(res.data)
                var tabledata = []
                for (let i in res.data) {
                    tabledata.push(res.data[i])
                }

                //  获取第一个选择框的值
                //console.log(tabledata)
                tabledata.forEach(item => {
                    //var objs = {value:item.orderN,label:item.orderN}
                    var objs = { value: item.otherBarcode, label: item.otherBarcode }
                    this.options.push(objs)
                })

                this.originData = tabledata   //保存每次加载的原始数据用来支持行合并计算

                var finalArr = []
                //let test = []
                tabledata.forEach(item => {
                    for (let i = 0; i < item.codeList.length; i++) {
                        var obj = {
                            orderN: item.otherBarcode,
                            status: item.status,
                            orderSon: item.codeList[i],
                            warehousenum: item.warehousenum,
                            time: GMTToStr(item.time),
                            color: 202,
                            forcompare: item.codeList[i].split(":")[0],
                            forbox: item.codeList[i].split(":")[1]
                        }
                        finalArr.push(obj)
                    }
                })
                let forCompareArr = finalArr
                finalArr.forEach((item, index) => {
                    forCompareArr.forEach((items, indexs) => {
                        if ((item.forcompare == items.forcompare || item.forbox == items.forbox) && index != indexs) {
                            item.color = 200
                            this.repeatNums++
                        }
                    })
                });
                this.tableData = finalArr
                this.tableData2 = finalArr
                //console.log(finalArr)
                // 获取第二个选择框的值
                this.tableData.forEach(item => {
                    var obj = { value: item.orderSon, label: item.orderSon }
                    this.options2.push(obj)
                });
                getSpan(app.tableData)
            }).catch(err => {
                this.$message({
                    message: '链接失败！',
                    type: 'warning'
                });
            })




        },
        watch: {
            //监听外箱条码
            value() {
                this.tableData = this.tableData2
                this.spanArr = []
                this.spanArrs = []
                let firstArr = [];
                let secondArr = [];
                if (this.value != '') {
                    if (this.value2 != '') {  //两个都不为空
                        this.tableData.forEach(item => {
                            if (item.orderN == this.value) {
                                firstArr.push(item)
                            }
                        });
                        firstArr.forEach(item => {
                            if (item.orderSon == this.value2) {
                                secondArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(secondArr)
                        this.tableData = secondArr
                    } else {  // 只有第一个框有值
                        this.tableData.forEach(item => {
                            if (item.orderN == this.value) {
                                firstArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }
                } else {
                    if (this.value2 != '') {  //第二个值不为空但是第一个空
                        this.tableData.forEach(item => {
                            if (item.orderSon == this.value2) {
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    } else {  // 两个都空
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(app.tableData2)
                        this.tableData = this.tableData2;
                    }
                }
            },
            //监听模组条码
            value2() {
                this.tableData = this.tableData2
                this.spanArr = []
                this.spanArrs = []
                let firstArr = [];
                let secondArr = [];
                if (this.value2 != '') {
                    if (this.value != '') {//两个都不为空
                        this.tableData.forEach(item => {
                            if (item.orderSon == this.value2) {
                                firstArr.push(item)
                            }
                        });
                        firstArr.forEach(item => {
                            if (item.orderN == this.value) {
                                secondArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(secondArr)
                        this.tableData = secondArr
                    } else {  // 只有第二个框有值
                        this.tableData.forEach(item => {
                            if (item.orderSon == this.value2) {
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }
                } else {
                    if (this.value != '') {  //第二框空值，但是第一个框有值
                        this.tableData.forEach(item => {
                            if (item.orderN == this.value) {
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    } else {  // 两个都空
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(app.tableData2)
                        this.tableData = this.tableData2;
                    }
                }
                //console.log(this.tableData)
            }
        },
        methods: {
            //外箱条码表格排序改变方法
            sortChanged({ column, prop, order }) {
                console.log(order)
                if (order == "ascending") {   // 升序
                    axios.post("/Packagings/DisplayWarehouse", { ordernum: getUrlParam('orderNum') }).then(res => {
                        var tabledata = []
                        for (let i in res.data) {
                            tabledata.push(res.data[i])
                        }

                        //  获取第一个选择框的值
                        //console.log(tabledata)
                        tabledata.forEach(item => {
                            //var objs = {value:item.orderN,label:item.orderN}
                            var objs = { value: item.otherBarcode, label: item.otherBarcode }
                            this.options.push(objs)
                        })

                        this.originData = tabledata   //保存每次加载的原始数据用来支持行合并计算

                        var finalArr = []
                        //let test = []
                        tabledata.forEach(item => {
                            for (let i = 0; i < item.codeList.length; i++) {
                                var obj = {
                                    orderN: item.otherBarcode, status: item.status, orderSon: item.codeList[i], warehousenum: item.warehousenum, time: GMTToStr(item.time), color: 202,
                                    forcompare: item.codeList[i].split(":")[0],
                                    forbox: item.codeList[i].split(":")[1]
                                }
                                finalArr.push(obj)
                            }
                        })
                        let forCompareArr = finalArr
                        finalArr.forEach((item, index) => {
                            forCompareArr.forEach((items, indexs) => {
                                if ((item.forcompare == items.forcompare || item.forbox == items.forbox) && index != indexs) {
                                    item.color = 200
                                    this.repeatNums++
                                }
                            })
                        });
                        this.tableData = finalArr
                        this.tableData2 = finalArr
                        //console.log(finalArr)
                        // 获取第二个选择框的值
                        this.tableData.forEach(item => {
                            var obj = { value: item.orderSon, label: item.orderSon }
                            this.options2.push(obj)
                        });
                        getSpan(app.tableData)
                    })
                } else {
                    axios.post("/Packagings/DisplayWarehouse", { ordernum: getUrlParam('orderNum'), desc: true }).then(res => {
                        var tabledata = []
                        for (let i in res.data) {
                            tabledata.push(res.data[i])
                        }

                        //  获取第一个选择框的值
                        //console.log(tabledata)
                        tabledata.forEach(item => {
                            //var objs = {value:item.orderN,label:item.orderN}
                            var objs = { value: item.otherBarcode, label: item.otherBarcode }
                            this.options.push(objs)
                        })

                        this.originData = tabledata   //保存每次加载的原始数据用来支持行合并计算

                        var finalArr = []
                        //let test = []
                        tabledata.forEach(item => {
                            for (let i = 0; i < item.codeList.length; i++) {
                                var obj = {
                                    orderN: item.otherBarcode, status: item.status, orderSon: item.codeList[i], warehousenum: item.warehousenum, time: GMTToStr(item.time), color: 202,
                                    forcompare: item.codeList[i].split(":")[0],
                                    forbox: item.codeList[i].split(":")[1]
                                }
                                finalArr.push(obj)
                            }
                        })
                        let forCompareArr = finalArr
                        finalArr.forEach((item, index) => {
                            forCompareArr.forEach((items, indexs) => {
                                if ((item.forcompare == items.forcompare || item.forbox == items.forbox) && index != indexs) {
                                    item.color = 200
                                    this.repeatNums++
                                }
                            })
                        });
                        this.tableData = finalArr
                        this.tableData2 = finalArr
                        //console.log(finalArr)
                        // 获取第二个选择框的值
                        this.tableData.forEach(item => {
                            var obj = { value: item.orderSon, label: item.orderSon }
                            this.options2.push(obj)
                        });
                        getSpan(app.tableData)
                    })
                }
            },
            formatter(row, column) {
                //return row.address;
            },
            //外箱条码表格合并方法
            objectSpanMethod({ row, column, rowIndex, columnIndex }) {
                if (columnIndex === 0) {
                    if (this.spanArr[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArr[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
                if (columnIndex === 1) {
                    if (this.spanArrs[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArrs[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
                if (columnIndex === 2) {
                    if (this.spanArrs[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArrs[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
                if (columnIndex === 3) {
                    if (this.spanArrss[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArrss[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
            },
            //返回上一页方法
            goBack() {
                history.back();
            },
            //显示标签
            showTag(barcode) {
                this.imgLoading = true;
                axios.post('/Packagings/OutsideBoxLablePrintToImg', {
                    outsidebarcode: barcode
                }, { responseType: "arraybuffer", }).then(function (response) {
                    //console.log(response.data)
                    //将从后台获取的图片流进行转换
                    return 'data:image/png;base64,' + btoa(
                        new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), '')
                    );
                }).then(function (data) {
                    app.imgLoading = false;
                    app.dialogVisible = true;
                    app.imgUrl = data;
                }).catch(err => {
                    app.imgLoading = false;
                    console.warn("显示失败");
                });
            }
        }
    })


    //  返回href中传递过来的属性值
    function getUrlParam(name) {
        //构造一个含有目标参数的正则表达式对象
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg); //匹配目标参数
        //console.log('---rb--')
        var test = r[0].replace(/\&/g, '')
        var testArr = test.split('=')
        //console.log(r[0].replace(/\&/g, ''))
        //console.log(testArr[1])
        //console.log('---re--')
        if (r != null) {
            return testArr[1];
        } else {
            return null; //返回参数值
        }
    }
</script>