using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

namespace JianHeMES.Controllers
{
    public class Personnel_Quality_objectivesController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();


        public ActionResult Index()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Quality_objectives", act = "Index" });
            }
            return View();
        }

        #region --------------------DepartmentList()检索部门
        public ActionResult DepartmentList()
        {
            var depar = db.Personnel_IndexName.OrderByDescending(m => m.Id).Select(c => c.DepartmentData).Distinct();
            return Content(JsonConvert.SerializeObject(depar));
        }
        #endregion

        #region --------------------AssessmentList()检索考核指标比例版本
        public ActionResult AssessmentList()
        {
            var indica = db.Personnel_Assessment_indicators.OrderByDescending(m => m.Id).Select(c => new { c.indName, c.Price }).ToList();
            return Content(JsonConvert.SerializeObject(indica));
        }
        #endregion

        #region -----质量目标达成状况统计表显示
        public ActionResult Quality(string departmentdata, int? Year, int? Month)
        {
            if (Year == null || Month == null)
            {
                var target = db.Personnel_Quality_objectives.Where(c => c.DepartmentData == departmentdata && c.Year == Year && c.Month == Month).ToList();
                //return Content(Year == null ? "年份" : "" + Month == null ? "月份" : "" + "未选择！");
            }
            JObject userItem = new JObject();
            JObject userJobject = new JObject();
            var personnel_Quality = db.Personnel_Quality_objectives.ToList();
            if (departmentdata != null)
            {
                personnel_Quality = personnel_Quality.Where(c => c.DepartmentData == departmentdata).ToList();
            }
            int i = 0;
            foreach (var item in personnel_Quality)
            {
                //ID
                userItem.Add("Id", item.Id);
                //部门
                userItem.Add("AssetDepartment", item.AssetDepartment);
                //班组
                userItem.Add("DP_Group", item.DP_Group);
                //项目
                userItem.Add("project", item.Project);
                //指标名称
                userItem.Add("indexName", item.IndexName);
                //目标值判定
                userItem.Add("target", item.Target);
                //目标值
                userItem.Add("Target1", item.Target1);
                //目标值单位
                userItem.Add("Target2", item.Target2);
                //实际完成值
                userItem.Add("actual_completion", item.Actual_completion);
                //月份
                userItem.Add("month", item.Month);
                //年份
                userItem.Add("year", item.Year);
                //数据来源和提供部门
                userItem.Add("departmentData", item.DepartmentData);
                userJobject.Add(i.ToString(), userItem);
                i++;
                userItem = new JObject();
            }
            return Content(JsonConvert.SerializeObject(userJobject));
        }

        #endregion

        #region----优秀班组评优汇总表
        //public ActionResult Excellent(int? Year, int? Month)
        //{
        //    JObject summary = new JObject();
        //    JObject assessment = new JObject();
        //    var Appraising = db.Personnel_Quality_objectives.ToList();
        //    if (Year != null || Month != null)
        //    {
        //        Appraising = Appraising.Where(c => c.Year == Year && c.Month == Month).ToList();
        //    }
        //    foreach (var item in Appraising)
        //    {

        //    }

        //    return View();
        //}
        #endregion


        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            if (personnel_Quality_objectives == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Quality_objectives);
        }

        #region---添加数据
        public ActionResult Create()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Personnel_Leave", act = "Index" });
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,AssetDepartment,DP_Group,Project,IndexName,Target,Target1,Target2,Actual_completion,DepartmentData,CreateDate,Creator,Year,Month")] Personnel_Quality_objectives personnel_Quality_objectives)
        {
            if (ModelState.IsValid)
            {
                if (db.Personnel_Quality_objectives.Count(c => c.DepartmentData == personnel_Quality_objectives.DepartmentData && c.DP_Group == personnel_Quality_objectives.DP_Group && c.Year == personnel_Quality_objectives.Year && c.Month == personnel_Quality_objectives.Month) > 0)
                {
                    return Content("已有重复数据，请确认是否数据是否正确");
                }
                personnel_Quality_objectives.CreateDate = DateTime.Now;
                personnel_Quality_objectives.Creator = ((Users)Session["user"]).UserName;
                db.Personnel_Quality_objectives.Add(personnel_Quality_objectives);
                db.SaveChanges();
                return RedirectToAction("true");
            }
            return Content("新增出错，请确认数据是否规范");
        }
        #endregion

        #region-----修改方法
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            if (personnel_Quality_objectives == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Quality_objectives);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,AssetDepartment,DP_Group,Project,IndexName,Target,Target1,Target2,Actual_completion,DepartmentData,CreateDate,Creator,Year,Month")] Personnel_Quality_objectives personnel_Quality_objectives)
        {
            if (ModelState.IsValid)
            {
                db.Entry(personnel_Quality_objectives).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(personnel_Quality_objectives);
        }
        #endregion

        #region---删除方法
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            if (personnel_Quality_objectives == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Quality_objectives);
        }

        // POST: Personnel_Quality_objectives/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Personnel_Quality_objectives personnel_Quality_objectives = db.Personnel_Quality_objectives.Find(id);
            db.Personnel_Quality_objectives.Remove(personnel_Quality_objectives);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
