using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using iTextSharp.text;

namespace JianHeMES.Controllers
{
    public class Personnel_Reasons_for_leavingController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();


        //#region---离职调差表查看
        //public async Task<ActionResult> for_leaving()
        //{
        //    return View();
        //}
        //public async Task<ActionResult> for_leaving(int? Year, int? Month)
        //{
        //    if (Year == null || Month == null)
        //    {
        //        return Content(Year == null ? "年份" : "" + Month == null ? "月份" : "" + "未选择！");
        //    }
        //    JObject for_leaving_Table = new JObject();
        //    JObject Department_record = new JObject();
        //    var Year_Month_Allrecord = await db.Personnel_daily.Where(c => c.Date.Value.Year == Year && c.Date.Value.Month == Month).ToListAsync();
        //    var Department_list = Year_Month_Allrecord.Select(c => c.Department).Distinct().ToList();
        //    if (Year_Month_Allrecord.Count() == 0)
        //    {
        //        return Content("没有记录！");
        //    }
        //    else
        //    {
        //        var departmentlist = new List<string>
        //        {
        //            "PC部","MC部","SMT部","装配一部","装配二部","配套加工部","技术部","品质部","行政后勤部","人力资源部","财务部","制造中心","工厂厂长"
        //        };
        //        List<string> dp_list = new List<string>();
        //        List<string> others = new List<string>();
        //        foreach (string i in departmentlist)
        //        {
        //            if (Department_list.Contains(i))
        //            {
        //                dp_list.Add(i);
        //            }
        //            else
        //            {
        //                others.Add(i);
        //            }
        //        }
        //        dp_list.AddRange(others);
        //        decimal average_sum = 0;
        //        int departure_month_sum = 0;
        //        int k = 0;
        //        foreach (var department in dp_list)
        //        {
        //            int countByDepartment = Year_Month_Allrecord.Count(c => c.Department == department);
        //            //月初人数
        //            var begin_day_of_month = countByDepartment == 0 ? 0 : Year_Month_Allrecord.Where(c => c.Department == department).OrderBy(c => c.Date).FirstOrDefault().Employees_personnel + Year_Month_Allrecord.Where(c => c.Department == department).OrderBy(c => c.Date).FirstOrDefault().Today_on_board_employees;
        //            Department_record.Add("begin_day_of_month", begin_day_of_month);
        //            //月末人数
        //            var end_day_of_month = countByDepartment == 0 ? 0 : Year_Month_Allrecord.Where(c => c.Department == department).OrderByDescending(c => c.Date).FirstOrDefault().Employees_personnel + Year_Month_Allrecord.Where(c => c.Department == department).OrderByDescending(c => c.Date).FirstOrDefault().Today_on_board_employees;
        //            Department_record.Add("end_day_of_month", end_day_of_month);
        //            //平均人数
        //            decimal average = (begin_day_of_month + end_day_of_month) / 2;
        //            average_sum = average_sum + average;
        //            Department_record.Add("average", average);
        //            //入职人数
        //            var ru_departure_sum = countByDepartment == 0 ? 0 : Year_Month_Allrecord.Where(c => c.Department == department).Sum(c => c.Today_on_board_employees);
        //            //入职人数总和
        //            departure_month_sum = departure_month_sum + ru_departure_sum;
        //            //离职人数
        //            var departure_sum = countByDepartment == 0 ? 0 : Year_Month_Allrecord.Where(c => c.Department == department).Sum(c => c.Todoy_dimission_employees_nvever_over7days);
        //            //离职人数总和
        //            departure_month_sum = departure_month_sum + departure_sum;
        //            //离职族群汇总




        //            //离职率
        //            decimal for_leaving = average == 0 ? 0 : departure_sum * 100 / average;
        //            //离职总率
        //            for_leaving_Table.Add("month_average", average_sum == 0 ? 0 : departure_month_sum * 100 / average_sum);
        //            Department_record.Add("for_leaving", for_leaving);
        //            for_leaving_Table.Add(k.ToString(), Department_record);
        //            Department_record = new JObject();
        //            k++;
        //        }
        //        return Content(JsonConvert.SerializeObject(for_leaving_Table));
        //    }
        //}


        //#endregion




        //#region-----Index
        //public ActionResult Index()
        //{
        //    return View(db.Personnel_Reasons_for_leaving.ToList());
        //}

        //[HttpPost]
        //public async Task<ActionResult> index(string jobNum, string Name, string Department_leaving)
        //{

        //    JObject userItem = new JObject();
        //    JObject userJobject = new JObject();
        //    var personnel_Reasons_for_leaving = await db.Personnel_Reasons_for_leaving.ToListAsync();
        //    if (jobNum != null)
        //    {
        //        personnel_Reasons_for_leaving = personnel_Reasons_for_leaving.Where(c => c.jobNum == jobNum).ToList();
        //    }
        //    if (Name != null)
        //    {
        //        personnel_Reasons_for_leaving = personnel_Reasons_for_leaving.Where(c => c.Name == Name).ToList();
        //    }
        //    if (Department_leaving != null)
        //    {
        //        personnel_Reasons_for_leaving = personnel_Reasons_for_leaving.Where(c => c.Department_leaving == Department_leaving).ToList();
        //    }
        //    int i = 0;
        //    foreach (var item in personnel_Reasons_for_leaving)
        //    {
        //        //ID
        //        userItem.Add("Id", item.Id);
        //        //名字
        //        userItem.Add("Name", item.Name);
        //        //工号
        //        userItem.Add("jobNum", item.jobNum);
        //        //部门
        //        userItem.Add("department", item.Department_leaving);
        //        //组别
        //        userItem.Add("DP_group", item.DP_group);
        //        //职位名称
        //        userItem.Add("Position", item.Position);
        //        //族群levelType
        //        userItem.Add("levelType", item.levelType);
        //        //入职日期HireDate
        //        string Hiretostring = string.Format("{0:yyyy-MM-dd--HH-mm-ss}", item.HireDate);
        //        //离职日期LastDate
        //        string Lasttostring = string.Format("{0:yyyy-MM-dd--HH-mm-ss}", item.LastDate);
        //        //备注Remark
        //        userItem.Add("Remark", item.Remark);
        //        //部门结论Department_of_conclusion
        //        userItem.Add("Department_of_conclusion", item.Department_of_conclusion);
        //        //人力资源部结论HR_conclusion
        //        userItem.Add("HR_conclusion", item.HR_conclusion);
        //        //薪酬不满意Pay_dissatisfaction
        //        userItem.Add("Pay_dissatisfaction", item.Pay_dissatisfaction);
        //        //制度不满意NotSystem
        //        userItem.Add("NotSystem", item.NotSystem);
        //        //管理不满意Notmanagement
        //        userItem.Add("Notmanagement", item.Notmanagement);
        //        //工作环境不满意Jobenvironment
        //        userItem.Add("Jobenvironment", item.Jobenvironment);
        //        //更好的发展Better_development
        //        userItem.Add("Better_development", item.Better_development);

        //        userJobject.Add(i.ToString(), userItem);
        //        i++;
        //        userItem = new JObject();

        //    }
        //    return Content(JsonConvert.SerializeObject(userJobject));
        //}
        //#endregion



        #region Details方法
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Reasons_for_leaving personnel_Reasons_for_leaving = db.Personnel_Reasons_for_leaving.Find(id);
            if (personnel_Reasons_for_leaving == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Reasons_for_leaving);
        }
        #endregion

        #region 保存数据方法
        public ActionResult SaveCreate()
        {
            return View();
        }

        [HttpPost]

        public ActionResult SaveCreate([Bind(Include = "Id,Name,jobNum,Department_leaving,DP_group,Position,levelType,HireDate,LastDate,Remark,Department_of_conclusion,HR_conclusion,Pay_dissatisfaction,NotSystem,Notmanagement,Jobenvironment,Better_development")] Personnel_Reasons_for_leaving personnel_Reasons_for_leaving)
        {
            if (ModelState.IsValid)
            {
                db.Personnel_Reasons_for_leaving.Add(personnel_Reasons_for_leaving);
                db.SaveChanges();
                return Content("ok");
            }

            return Content("false"); 
        }
        #endregion

        #region 修改
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Reasons_for_leaving personnel_Reasons_for_leaving = db.Personnel_Reasons_for_leaving.Find(id);
            if (personnel_Reasons_for_leaving == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Reasons_for_leaving);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id,Name,jobNum,Department_leaving,DP_group,Position,levelType,HireDate,LastDate,Remark,Department_of_conclusion,HR_conclusion,Pay_dissatisfaction,NotSystem,Notmanagement,Jobenvironment,Better_development")] Personnel_Reasons_for_leaving personnel_Reasons_for_leaving)
        {
            if (ModelState.IsValid)
            {
                if (!string.IsNullOrEmpty(personnel_Reasons_for_leaving.jobNum) && !string.IsNullOrEmpty(personnel_Reasons_for_leaving.Name) && !string.IsNullOrEmpty(personnel_Reasons_for_leaving.Department_leaving) && !string.IsNullOrEmpty(personnel_Reasons_for_leaving.DP_group) && !string.IsNullOrEmpty(personnel_Reasons_for_leaving.Position))
                {
                    db.Entry(personnel_Reasons_for_leaving).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                    return RedirectToAction("Index");
                }
            }
            return View(personnel_Reasons_for_leaving);
        }

        #endregion

        #region 删除
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Personnel_Reasons_for_leaving personnel_Reasons_for_leaving = db.Personnel_Reasons_for_leaving.Find(id);
            if (personnel_Reasons_for_leaving == null)
            {
                return HttpNotFound();
            }
            return View(personnel_Reasons_for_leaving);
        }


        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Personnel_Reasons_for_leaving personnel_Reasons_for_leaving = db.Personnel_Reasons_for_leaving.Find(id);
            db.Personnel_Reasons_for_leaving.Remove(personnel_Reasons_for_leaving);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
        #endregion






        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
