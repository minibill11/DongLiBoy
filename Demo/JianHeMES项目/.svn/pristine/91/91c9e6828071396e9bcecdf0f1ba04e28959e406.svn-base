using JianHeMES.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace JianHeMES.Controllers
{
    public class QueryController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        public class TempAssemble
        {
            public string BoxBarCode { get; set; }
            public bool PQCCheckFinish { get; set; }
        }

        public class TempFinalQC
        {
            public string BarCodesNum { get; set; }
            public bool FQCCheckFinish { get; set; }
        }

        public class TempBurn_in_MosaicScreen
        {
            public string BarCodesNum { get; set; }
        }

        public class TempBurn_in
        {
            public string BarCodesNum { get; set; }
            public bool OQCCheckFinish { get; set; }
        }

        public class TempCalibrationRecord
        {
            public string BarCodesNum { get; set; }
            public bool Normal { get; set; }
            public DateTime? FinishCalibration { get; set; }
        }

        public class TempAppearance
        {
            public string BarCodesNum { get; set; }
            public bool OQCCheckFinish { get; set; }
            public DateTime? OQCCheckFT { get; set; }
        }
        //录入包装基本信息的订单列表
        public ActionResult GetOrderList()
        {
            var orders = db.OrderMgm.OrderByDescending(m => m.ID).Select(m => m.OrderNum).ToList();    //增加.Distinct()后会重新按OrderNum升序排序
            JArray result = new JArray();
            foreach (var item in orders)
            {
                JObject List = new JObject();
                List.Add("value", item);

                result.Add(List);
            }
            return Content(JsonConvert.SerializeObject(result));
        }
        // GET: Query
        public ActionResult barcodeInfo()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Query", act = "barcodeInfo" });
            }
            return View();
        }
        //据订单号显示模组工序信息//1是正常完成，2有开始未完成，3是未开始 
        public ActionResult ordernumModuleInfo()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Query", act = "ordernumModuleInfo" });
            }
            return View();
        }
        //据订单号显示模组工序信息//1是正常完成，2有开始未完成，3是未开始 
        public ActionResult DisplayBarcodeListFromOrdernum(string ordernum)
        {
            JArray result = new JArray();
            var barcodeList = db.BarCodes.OrderBy(c => c.BarCodesNum).Where(c => c.OrderNum == ordernum).Select(c => c.BarCodesNum).ToList();
            #region 将数据存到临时class中，减少访问数据库的数量，
            var assemble = (from c in db.Assemble select new TempAssemble { BoxBarCode = c.BoxBarCode ,PQCCheckFinish = c.PQCCheckFinish }).ToList();;
            var finalqc = db.FinalQC.Select(c => new TempFinalQC { BarCodesNum = c.BarCodesNum, FQCCheckFinish = c.FQCCheckFinish }).ToList();
            var mosaicscreen = db.Burn_in_MosaicScreen.Select(c => new TempBurn_in_MosaicScreen { BarCodesNum = c.BarCodesNum}).ToList();
            var burnin = db.Burn_in.Select(c => new TempBurn_in { BarCodesNum = c.BarCodesNum, OQCCheckFinish = c.OQCCheckFinish}).ToList();
            var calibrationRecord = db.CalibrationRecord.Select(c => new TempCalibrationRecord { BarCodesNum = c.BarCodesNum, FinishCalibration = c.FinishCalibration, Normal = c.Normal }).ToList();
            var appearn = db.Appearance.Select(c => new TempAppearance { BarCodesNum = c.BarCodesNum, OQCCheckFinish = c.OQCCheckFinish, OQCCheckFT=c.OQCCheckFT }).ToList();
            #endregion
            foreach (var item in barcodeList)
            {
                //1是正常完成，2有开始未完成，3是未开始 
                JObject statu = new JObject();
                statu.Add("barcode", item);
                //组装
                var ass = assemble.Where(c => c.BoxBarCode == item).Select(c=>c.PQCCheckFinish).ToList();
                if (ass.Count == 0)
                {
                    statu.Add("Assemble", 3);
                }
                else
                {
                    if (ass.Contains(true))
                    { statu.Add("Assemble", 1); }
                    else
                    { statu.Add("Assemble", 2); }
                }
                //FQC
                var FQC = finalqc.Where(c => c.BarCodesNum == item).Select(c=>c.FQCCheckFinish).ToList();
                if (FQC.Count == 0)
                {
                    statu.Add("FinalQC", 3);
                }
                else
                {
                    if (FQC.Contains(true))
                    { statu.Add("FinalQC", 1); }
                    else
                    { statu.Add("FinalQC", 2); }
                }
                //拼屏
                var mosicBurnin = mosaicscreen.Count(c => c.BarCodesNum == item);
                var burnIn = burnin.Where(c => c.BarCodesNum == item).Select(c=>c.OQCCheckFinish).ToList();
                if (mosicBurnin== 0)
                {
                    statu.Add("Burn_in_MosaicScreen", 3);
                }
                else
                {
                    if (burnIn.Count == 0)
                        statu.Add("Burn_in_MosaicScreen", 2);
                    else
                        statu.Add("Burn_in_MosaicScreen", 1);
                }
                //老化
                if (burnIn.Count == 0)
                {
                    statu.Add("Burn_in", 3);
                }
                else
                {
                    if (burnIn.Contains(true))
                    { statu.Add("Burn_in", 1); }
                    else
                    { statu.Add("Burn_in", 2); }
                }
                //校正
                var calib = calibrationRecord.Where(c => c.BarCodesNum == item).ToList();
                if (calib.Count == 0)
                {
                    statu.Add("CalibrationRecord", 3);
                }
                else
                {
                    var bb = calib.Where(c => c.Normal == true && c.FinishCalibration != null).FirstOrDefault();
                    if (bb != null)
                    { statu.Add("CalibrationRecord", 1); }
                    else
                    { statu.Add("CalibrationRecord", 2); }
                }
                //电检
                var Appearance = appearn.Where(c => c.BarCodesNum == item).ToList();
                if (Appearance.Count == 0)
                {
                    statu.Add("Appearance", 3);
                }
                else
                {
                    var bb = Appearance.Where(c => c.OQCCheckFinish == true && c.OQCCheckFT != null).FirstOrDefault();
                    if (bb != null)
                    { statu.Add("Appearance", 1); }
                    else
                    { statu.Add("Appearance", 2); }
                }
                result.Add(statu);
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        //模组条码信息显示1是直通完成，2不直通完成，3是未开始或未完成 
        public ActionResult DisplayBarcodesModule(string barcode)
        {
            var barcodes = db.BarCodes.Where(c => c.BarCodesNum == barcode).FirstOrDefault();

            if (barcodes != null)
            {
                JObject result = new JObject();
                result.Add("ordernum", barcodes.OrderNum);
                result.Add("barcode", barcodes.BarCodesNum);
                result.Add("modulenum", barcodes.ModuleGroupNum == null ? "" : barcodes.ModuleGroupNum);
                result.Add("creator", barcodes.Creator);
                //组装
                var ass = db.Assemble.Where(c => c.BoxBarCode == barcodes.BarCodesNum && c.PQCCheckFinish == true).FirstOrDefault();
                if (ass == null)
                {
                    result.Add("pqcStatu", 3);
                    result.Add("pqcCreator", "");
                    result.Add("pqcCreatdate", "");
                }
                else
                {
                    var count = db.Assemble.Count(c => c.BoxBarCode == barcodes.BarCodesNum);
                    if (count == 1)
                    {
                        result.Add("pqcStatu", 1);
                        result.Add("pqcCreator", ass.AssemblePQCPrincipal);
                        result.Add("pqcCreatdate", ass.PQCCheckFT);
                    }

                    else
                    {
                        result.Add("pqcStatu", 2);
                        result.Add("pqcCreator", ass.AssemblePQCPrincipal);
                        result.Add("pqcCreatdate", ass.PQCCheckFT);
                    }
                }
                //FQC
                var fqc = db.FinalQC.Where(c => c.BarCodesNum == barcodes.BarCodesNum && c.FQCCheckFinish == true).FirstOrDefault();
                if (fqc == null)
                {
                    result.Add("fqcStatu", 3);
                    result.Add("fqcCreator", "");
                    result.Add("fqcCreatdate", "");
                }
                else
                {
                    var count = db.FinalQC.Count(c => c.BarCodesNum == barcodes.BarCodesNum);
                    if (count == 1)
                    {
                        result.Add("fqcStatu", 1);
                        result.Add("fqcCreator", fqc.FQCPrincipal);
                        result.Add("fqcCreatdate", fqc.FQCCheckFT);
                    }

                    else
                    {
                        result.Add("fqcStatu", 2);
                        result.Add("fqcCreator", fqc.FQCPrincipal);
                        result.Add("fqcCreatdate", fqc.FQCCheckFT);
                    }
                }
                //拼屏
                var mosaicScreen = db.Burn_in_MosaicScreen.Where(c => c.BarCodesNum == barcodes.BarCodesNum).FirstOrDefault();
                if (mosaicScreen == null)
                {
                    result.Add("mosaicScreenStatu", 3);
                    result.Add("mosaicScreenCreator", "");
                    result.Add("mosaicScreenCreatdate", "");
                }
                else
                {
                    var count = db.Burn_in.Count(c => c.BarCodesNum == barcodes.BarCodesNum);
                    var name = db.Personnel_Roster.Where(c => c.JobNum == mosaicScreen.OQCPrincipalNum).Select(c => c.Name).FirstOrDefault();
                    if (count == 1)
                    {
                        result.Add("mosaicScreenStatu", 1);
                        result.Add("mosaicScreenCreator", name);
                        result.Add("mosaicScreenCreatdate", mosaicScreen.OQCMosaicStartTime);
                    }

                    else
                    {
                        result.Add("mosaicScreenStatu", 2);
                        result.Add("mosaicScreenCreator", name);
                        result.Add("mosaicScreenCreatdate", mosaicScreen.OQCMosaicStartTime);
                    }
                }
                //老化
                var burn_in = db.Burn_in.Where(c => c.BarCodesNum == barcodes.BarCodesNum && c.OQCCheckFinish == true).FirstOrDefault();
                if (burn_in == null)
                {
                    result.Add("burnInStatu", 3);
                    result.Add("burnInCreator", "");
                    result.Add("burnInCreatdate", "");
                }
                else
                {
                    var count = db.Burn_in.Count(c => c.BarCodesNum == barcodes.BarCodesNum);
                    if (count == 1)
                    {
                        result.Add("burnInStatu", 1);
                        result.Add("burnInCreator", burn_in.OQCPrincipal);
                        result.Add("burnInCreatdate", burn_in.OQCCheckFT);
                    }

                    else
                    {
                        result.Add("burnInStatu", 2);
                        result.Add("burnInCreator", burn_in.OQCPrincipal);
                        result.Add("burnInCreatdate", burn_in.OQCCheckFT);
                    }
                }
                //校正
                var calibrationRecord = db.CalibrationRecord.Where(c => c.BarCodesNum == barcodes.BarCodesNum && c.Normal == true).FirstOrDefault();
                if (calibrationRecord == null)
                {
                    result.Add("calibrationRecordStatu", 3);
                    result.Add("calibrationRecordCreator", "");
                    result.Add("calibrationRecordCreatdate", "");
                }
                else
                {
                    var count = db.CalibrationRecord.Count(c => c.BarCodesNum == barcodes.BarCodesNum);
                    if (count == 1)
                    {
                        result.Add("calibrationRecordStatu", 1);
                        result.Add("calibrationRecordCreator", calibrationRecord.Operator);
                        result.Add("calibrationRecordCreatdate", calibrationRecord.FinishCalibration);
                    }

                    else
                    {
                        result.Add("calibrationRecordStatu", 2);
                        result.Add("calibrationRecordCreator", calibrationRecord.Operator);
                        result.Add("calibrationRecordCreatdate", calibrationRecord.FinishCalibration);
                    }
                }
                //电检
                var appearance = db.Appearance.Where(c => c.BarCodesNum == barcodes.BarCodesNum && c.OQCCheckFinish == true).FirstOrDefault();
                if (appearance == null)
                {
                    result.Add("appearanceStatu", 3);
                    result.Add("appearanceCreator", "");
                    result.Add("appearanceCreatdate", "");
                }
                else
                {
                    var count = db.Appearance.Count(c => c.BarCodesNum == barcodes.BarCodesNum);
                    if (count == 1)
                    {
                        result.Add("appearanceStatu", 1);
                        result.Add("appearanceCreator", appearance.OQCPrincipal);
                        result.Add("appearanceCreatdate", appearance.OQCCheckFT);
                    }

                    else
                    {
                        result.Add("appearanceStatu", 2);
                        result.Add("appearanceCreator", appearance.OQCCheckFT);
                        result.Add("appearanceCreatdate", appearance.OQCCheckFT);
                    }
                }

                return Content(JsonConvert.SerializeObject(result));
            }
            return null;
        }

        //外箱条码信息显示
        public ActionResult DisplayBarcodesOuther(string barcode)
        {
            var outherBarcode = db.Packing_BarCodePrinting.Where(c => c.OuterBoxBarcode == barcode).ToList();
            if (outherBarcode.Count != 0)
            {
                JObject result = new JObject();
                result.Add("ordernum", outherBarcode.FirstOrDefault().OrderNum);
                result.Add("otherBarcode", outherBarcode.FirstOrDefault().OuterBoxBarcode);
                result.Add("type", outherBarcode.FirstOrDefault().Type);
                var wahouser_join = db.Warehouse_Join.Where(c => c.OuterBoxBarcode == barcode).ToList();
                if (wahouser_join.Count != 0)
                {
                    var count = wahouser_join.Count(c => c.IsOut == true);
                    if (count != 0)
                    {
                        result.Add("statu", "出库");
                        result.Add("name", wahouser_join.FirstOrDefault().WarehouseOutOperator);
                    }
                    else
                    {
                        result.Add("statu", "入库");
                        result.Add("name", wahouser_join.FirstOrDefault().Operator);
                    }
                }
                else
                {
                    result.Add("statu", "未入库");
                    result.Add("name","");
                }
                JArray barcodejarray = new JArray();
                outherBarcode.ForEach(c => barcodejarray.Add(c.BarCodeNum));
                result.Add("barcodelist", barcodejarray);
                return Content(JsonConvert.SerializeObject(result)); 
            }
            return null;
        }

        //锡膏条码信息显示 1是有记录，3是没记录
        public ActionResult DisplayBarcodesSulder(string barcode)
        {
            var sulderbarcode = db.Barcode_Solderpaste.Where(c => c.SolderpasterBacrcode == barcode).FirstOrDefault();
            if (sulderbarcode != null)
            {
                JObject result = new JObject();
                result.Add("solderpasterBacrcode", sulderbarcode.SolderpasterBacrcode);
                //物料号
                result.Add("receivingNum", sulderbarcode.ReceivingNum);
                //批次
                result.Add("batch", sulderbarcode.Batch);
                //生产日期
                result.Add("leaveFactoryTime", sulderbarcode.LeaveFactoryTime);
                //供应商
                result.Add("supplier", sulderbarcode.Supplier);
                //有效期
                result.Add("effectiveDay", sulderbarcode.EffectiveDay);
                //入SMT冰柜
                var smtFreeze = db.SMT_Freezer.OrderByDescending(c=>c.IntoTime).Where(c => c.SolderpasterBacrcode == barcode).Select(c => c.IntoTime).ToList();
                if (smtFreeze.Count() != 0)
                {
                    var lasttime = smtFreeze.FirstOrDefault();
                    result.Add("smtFreeze", 1);
                    var smtream = db.SMT_Rewarm.Where(c => c.SolderpasterBacrcode == barcode && c.StartTime > lasttime).FirstOrDefault();
                    if (smtream != null)
                    {
                        result.Add("smtReam", 1);
                        var stir = db.SMT_Stir.Where(c => c.SolderpasterBacrcode == barcode && c.StartTime > smtream.StartTime).FirstOrDefault();
                        if (stir != null)
                        {
                            result.Add("smtStir", 1);
                            var empty = db.SMT_Employ.Where(c => c.SolderpasterBacrcode == barcode && c.StartTime > stir.StartTime).FirstOrDefault();
                            if (empty != null)
                            {
                                result.Add("smtEmpty", 1);
                                var recly = db.SMT_Recycle.Count(c => c.SolderpasterBacrcode == barcode);
                                if (recly != 0)
                                    result.Add("smtrecly", 1);
                                else
                                    result.Add("smtrecyl", 3);
                            }
                            else
                            {
                                result.Add("smtEmpty", 3);
                                result.Add("smtrecly", 3);
                            }
                        }
                        else
                        {
                            result.Add("smtStir", 3);
                            result.Add("smtEmpty",3);
                            result.Add("smtrecly",3);
                        }
                    }
                    else
                    {
                        result.Add("smtReam", 3);
                        result.Add("smtStir", 3);
                        result.Add("smtEmpty",3);
                        result.Add("smtrecly",3);
                    }
                }
                else
                {
                    result.Add("smtFreeze", 3);
                    result.Add("smtReam", 3);
                    result.Add("smtStir", 3);
                    result.Add("smtEmpty",3);
                    result.Add("smtrecly",3);
                }
                return Content(JsonConvert.SerializeObject(result));

            }
            return null;
        }

        


    }
}