@model IEnumerable<JianHeMES.Models.Burn_in>

@{
    ViewBag.Title = "老化架历史查询";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Scripts/Bootstraps/bootstrap-select.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/bootstrap-select.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    .selectpicker {
        border: 1px solid #ccc;
    }

    #app {
        width: 1170px;
    }

    .table {
        width: 1153px;
        margin-bottom: 0;
    }

        .table > tbody > tr:first-child > td {
            border-top: none;
        }

        .table > thead:first-child > tr:first-child > th, .table > colgroup + thead > tr:first-child > th {
            border-top: 1px solid rgba(35, 35, 35, 0.9);
        }

    .table-bordered > thead > tr > th, .table-bordered > tbody > tr > td {
        border: 1px solid #000;
        text-align: center;
        padding: 3px;
    }

    .table-bordered > tfoot > tr > th {
        border: none;
    }

    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        max-width: 180px;
    }
</style>
<h2 class="text-center" style="width:1170px">老化架历史查询页面</h2>
<div id="app" v-cloak>
    <div class="row text-center">
        <span>订单号： @Html.DropDownList("OrderNum", (List<SelectListItem>)ViewBag.GetBurnInShelfOrderList, "选择订单", new { @class = "selectpicker", data_live_search = "true", data_style = "form-control" })</span>
        <span>订单号： @Html.DropDownList("BurnInShelfNum", (List<SelectListItem>)ViewBag.BurnInShelfNumList, "选择订单", new { @class = "selectpicker", data_live_search = "true", data_style = "form-control" })</span>
        
        @*<span v-show="shelfShow">
            老化架号：
            <select id="shelfVal" class="selectpicker" title="全部" data-live-search="true" data-style="form-control" data-actions-box="true" multiple>
                <template v-for="item in shelfList">
                    <option>{{item}}</option>
                </template>
            </select>
        </span>*@
        <span><input v-on:click="postLineNum" class="btn btn-default" type="submit" value="查询" /></span>
    </div>
    <br />
    <div class="row" style="width:1170px">
        <table class="table table-bordered">
            <colgroup>
                <col width="42 ">
                <col width="100 ">
                <col width="140 ">
                <col width="170 ">
                <col width="170 ">
                <col width="170 ">
                <col width="170 ">
                <col width="190 ">
            </colgroup>
            <thead>
                <tr>
                    <th>序号</th>
                    <th>老化架号</th>
                    <th>订单号</th>
                    <th>模组条码号</th>
                    <th>老化开始时间</th>
                    <th>老化完成时间</th>
                    <th>老化用时</th>
                    <th>平均用时</th>
                </tr>
            </thead>
        </table>
        <div style="max-height:600px;overflow:auto;width:100%">
            <table class="table table-bordered">
                <colgroup>
                    <col width="42 ">
                    <col width="100 ">
                    <col width="140 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="170 ">
                    <col width="190 ">
                </colgroup>
                <tbody>
                    <template v-for="(item,index) in tableList">
                        <tr v-for="(val,i) in item.arr">
                            <td>{{i+1}}</td>
                            <td>{{val.BurnInShelfNum}}</td>
                            <td>{{val.OrderNum}}</td>

                            <td>{{val.burnNumber}}</td>
                            <td>{{val.burn_StarTime}}</td>
                            <td>{{val.burn_endTime}}</td>
                            <td>{{val.burn_timeSpan}}</td>
                            <td v-if="i==0" v-bind:rowspan="item.arr.length">
                                <div class="avageDiv">
                                    <span>（模组数量：{{item.arr.length}}）</span><br />
                                    <span>

                                        {{nowtimelong(item.avageTime)}}
                                    </span>
                                </div>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>
    @*loding*@
    <div class="spinnerModel" v-show="loading">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
    </div>
</div>
<div class="row col-md-12">
    @Html.ActionLink("返回", "BurnInShelfQuery")
</div>
<script>
    var app = new Vue({
        el: "#app",
        data: {
            loading: false,
            //shelfVal:[],
            //shelfList: [],
            tableList: [],
            //shelfShow: false
        },
        computed: {
            //sortmarqueeList() {
            //    let lastVal, initialList = this.tableList;
            //    if (initialList != "") {
            //        lastVal = filterList(initialList);
            //    } else {
            //        lastVal = [];
            //    };
            //    return lastVal;
            //},
        },
        methods: {
            nowtimelong(thisTime) {
                if (thisTime != "") {
                    let timespan = thisTime;
                    //计算出相差天数
                    let days = Math.floor(timespan / (24 * 3600 * 1000));
                    //计算出小时数
                    let leave1 = timespan % (24 * 3600 * 1000);    //计算天数后剩余的毫秒数
                    let hours = Math.floor(leave1 / (3600 * 1000));
                    //计算相差分钟数
                    let leave2 = leave1 % (3600 * 1000);        //计算小时数后剩余的毫秒数
                    let minutes = Math.floor(leave2 / (60 * 1000));
                    //计算相差秒数
                    let leave3 = leave2 % (60 * 1000);      //计算分钟数后剩余的毫秒数
                    let seconds = Math.round(leave3 / 1000);
                    if (days == 0) {
                        //return `${hours}${minutes}分${seconds}秒`;
                        let stringTime = String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    } else {
                        //return `${days}天${hours}时\n${minutes}分${seconds}秒`;
                        let stringTime = String(days) + "天" + String(hours) + "时" + String(minutes) + "分" + String(seconds) + "秒";
                        return stringTime.toString();
                    };
                };
            },
            postLineNum: () => {
                if ("@Session["User"]" == "") {
                    $("#login").modal();
                    return false;
                };
                //app.shelfList = [];
                app.tableList = [];
                axios.post("/Burn_in/BurnInShelfQueryHistory", {
                    OrderNum: $("#OrderNum").val(),
                    BurnInShelfNum: $("#BurnInShelfNum").val(),
                }).then(response => {
                    let resData = response.data;
                    console.log(resData);
                    //处理数据
                    let thisobj=[], shelfArray = [];
                    for (let i in resData) {
                        //老化架号
                        shelfArray.push(i);
                        //表格数据
                        let thisI = {
                            shelf:"",
                            avageTime: "",
                            arr:[]
                        };
                        thisI.shelf = i;
                        for (let j in resData[i]) {
                            if (j == "avageTime") {
                                thisI.avageTime = resData[i][j];
                            } else {
                                thisI.arr.push(resData[i][j]);
                            };
                        };
                        thisobj.push(thisI)
                    };

                    //console.log(thisobj);
                    //赋值
                    //app.shelfList = shelfArray;
                    app.tableList = thisobj;
                    //if ($("#OrderNum").val() == "" || $("#OrderNum").val() == null) {
                    //    app.shelfShow = false;
                    //} else {
                    //    app.shelfShow = true;
                    //};
                }).catch(error => {
                    console.warn(error);
                });
            }
        },
        mounted: function () {
            $('.selectpicker').selectpicker({
                //noneSelectedText: '全部',
                countSelectedText: function (numSelected, numTotal) {
                    return (numSelected == 1) ? "已选择 {0} 项" : "已选择 {0} 项";
                },
                selectAllText: '选择全部',
                deselectAllText: '取消选择',
            });
        },
        //updated: function () {
        //    this.$nextTick(function () {
        //        $('#shelfVal').selectpicker("refresh");
        //    })
        //}
    });

    //$("#shelfVal").change(function (v) {
    //    //vmSearch.platformVal = v.target.value;
    //    app.shelfVal = $(this).val();
    //});

    //function filterList(array) {
    //    let thisArr, finalFilterArray = [];
    //    //去除空数组
    //    thisArr = array.filter(function (val) {
    //        if (app.shelfVal == null || app.shelfVal.length == 0) {
    //            return val;
    //        } else {
    //            for (let i in app.shelfVal) {
    //                if (val.shelf == app.shelfVal[i]) {
    //                    return val;
    //                };
    //            };
    //        };
    //    });
    //    //根据选择框条件过滤
    //    return thisArr;
    //};


    // 添加请求拦截器
    axios.interceptors.request.use(function (config) {
        app.loading = true;
        return config;
    }, function (error) {
        return Promise.reject(error);
    });

    // 添加响应拦截器
    axios.interceptors.response.use(function (response) {
        app.loading = false;
        return response;
    }, function (error) {
        app.loading = false;
        return Promise.reject(error);
    });
</script>
