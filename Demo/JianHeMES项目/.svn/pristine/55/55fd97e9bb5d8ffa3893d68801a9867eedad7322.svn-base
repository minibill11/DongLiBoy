@{
    ViewBag.Title = "工序产能首页";
}

@*  <summary>
    1.工序产能首页
    </summary>*@

<link href="~/Content/styleFile/packaging/index.css" rel="stylesheet" />@*2.13版本 elementui css文件*@
<script src="~/Content/styleFile/packaging/index.js"></script>@*2.13版本 elementui js文件*@
<link href="~/Content/styleFile/processCapacity/indexStyle.css" rel="stylesheet" />@*工序产能公共样式文件*@
<style>
    /* 宽度设为屏幕宽度的96% */
    .container, .body-content {
        width: 96vw;
    }

    .el-table tbody tr td {
        padding: 5px 0;
    }

    .fontsizelie {
        font-size: 16px;
    }

    .gongyi {
        color: #3396ff;
        font-size: 12px;
        text-align: left;
        padding: 0 5px;
    }
</style>
<div id="app" v-cloak>
    <el-container>
        <el-header class="text-center">
            @*标题*@
            <h2>@ViewBag.Title</h2>
        </el-header>
        <el-main v-loading="loading" style="min-height:600px">
            <el-row class="text-center">
                <el-form :inline="true" :model="queryTable" size="small">
                    <el-form-item label="筛选平台">
                        <select-input v-model.trim="queryTable.proplatform" :disabled="false" @@watchval="watchPlatform($event)" :appendbody="false" :options="options.proplatform" :isfocus="true" :ismultiple="true" size="medium" :allowcreate="true"></select-input>
                    </el-form-item>
                    <el-form-item label="筛选型号">
                        <select-input v-model.trim="queryTable.protype" :disabled="false" @@watchval="watchType($event)" :appendbody="false" :options="options.protype" :isfocus="true" :ismultiple="true" size="medium" :allowcreate="true"></select-input>
                    </el-form-item>
                </el-form>
            </el-row>
            <el-row class="text-center">
                <el-table :data="filterResult"
                          max-height="600"
                          size="medium"
                          align="center"
                          cell-class-name="cellParent"
                          stripe
                          border>
                    <el-table-column type="index" label="序号" width="40">
                        <template slot-scope="scope">
                            <span style="font-size:16px;">{{scope.$index+1}}</span>
                        </template>
                    </el-table-column>
                    <el-table-column prop="platfrom"
                                     @*width="85"*@
                                     @*fixed*@
                                     sortable
                                     label="平台">
                        <template slot-scope="scope">
                            <el-link :href="`/Process_Capacity/index2?Type=${scope.row.type}&ProductPCBnumber=${scope.row.PCB}&Platform=${scope.row.platfrom}`"
                                     target="_blank"
                                     class="fontsizelie"
                                     style="color:#409EFF"
                                     :underline="false">{{scope.row.platfrom}}</el-link>
                        </template>
                    </el-table-column>
                    <el-table-column prop="type"
                                     sortable
                                     label="型号">
                        <template slot-scope="scope">
                            <span class="fontsizelie">{{scope.row.type}}</span>
                        </template>
                    </el-table-column>
                    @*<el-table-column prop="PCB"
                                         sortable
                                         label="PCB">
                            <template slot-scope="scope">
                                <span class="fontsizelie">{{scope.row.PCB}}</span>
                            </template>
                        </el-table-column>*@
                    <el-table-column prop="PlatformModul"
                                     sortable
                                     label="平台模块">
                        <template slot-scope="scope">
                            <span class="fontsizelie">{{scope.row.PlatformModul}}</span>
                        </template>
                    </el-table-column>
                    <el-table-column label="每小时产能">
                        <template slot-scope="scope">
                            <span v-if="scope.row.conten.length>0">
                                {{scope.row.conten[scope.row.moduleNameIndex].capacityPerHour}}
                            </span>
                        </template>
                    </el-table-column>
                    <el-table-column label="所需人数">
                        <template slot-scope="scope">
                            <span v-if="scope.row.conten.length>0">
                                {{scope.row.conten[scope.row.moduleNameIndex].person}}
                            </span>
                        </template>
                    </el-table-column>
                    <el-table-column label="加工费用">
                        <template slot-scope="scope">
                            <span v-if="scope.row.conten.length>0">
                                {{scope.row.conten[scope.row.moduleNameIndex].processingFee}}
                            </span>
                        </template>
                    </el-table-column>
                    <el-table-column label="工艺" width="300">
                        <template slot-scope="scope">
                            <div v-if="scope.row.conten.length>0" class="gongyi">
                                <div v-for="name in scope.row.conten[scope.row.moduleNameIndex].moduleName">●&nbsp;{{name}}</div>
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column label="工艺" width="200">
                        <template slot-scope="scope">
                            <el-cascader :options="scope.row.list"
                                         :show-all-levels="false"
                                         v-model="scope.row.moduleNameVal"
                                         @*clearable*@
                                         @*:props="{ expandTrigger: 'hover' }"*@
                                         size="medium"
                                         style="width:200px;"
                                         @@change="handleChange($event,scope.row)">
                                <template slot-scope="{ node, data }">
                                    <span>{{ data.label }}</span>
                                    <span v-if="!node.isLeaf"> ({{ data.children.length }}) </span>
                                </template>
                            </el-cascader>
                        </template>
                    </el-table-column>
                    @*<el-table-column label="模组尺寸">
                            <template slot-scope="scope">
                                <el-input size="medium"></el-input>
                            </template>
                        </el-table-column>*@
                    <el-table-column label="模组单位"
                                     prop="ModuleUnits">
                    </el-table-column>
                </el-table>

            </el-row>
        </el-main>
    </el-container>
</div>
@*  引入组件：
    1/_SelectInput，下拉选择框组件
*@
@RenderPage("~/Views/Shared/_SelectInput.cshtml")
<script>
    var app = new Vue({
        el: "#app",
        data: {
            loading: false,//控制页面loading等待状态
            tableList: [],//存储表格总数据
            filterResult: [],//存储筛选总数据后的结果
            /** 选择框的值
                queryTable.protype 筛选型号
                queryTable.proplatform 筛选平台
                */
            queryTable: {
                protype: [],
                proplatform: [],
            },
            /** 选择框的下拉列表
                options.protype 筛选型号下拉列表
                options.proplatform 筛选平台下拉列表
                */
            options: {
                protype: [],
                proplatform: [],
            },
            limitsList: {},//用来存储用户所有的权限列表
            limitsRole: {},//用来存储用户与工序产能相关的权限列表
            pollingTimer: "",//定时器，控制页面定时刷新
        },
        //页面打开时执行
        created: function () {
            //获取登陆时存储在浏览器的权限列表
            //this.limitsList = JSON.parse(localStorage.getItem("rigths"));
            //获取下拉型号列表
            this.getProtype();
            //获取下拉平台列表
            this.getPlatfrom();

            /** 获取与工序产能相关的权限对象列表，包括如下
             *  1、新建平台 ，2、上传文件和编辑 ， 3、查看附表 ， 4、上传PDF和图片 ， 5、审核附表 ，6、批准附表 ，7、受控附表
             *  对应的结果用函数checkRoles判断   例：存在“新建平台”权限，则权限1为true，不存在则为false
             */
            //this.limitsRole = {
            //    1: this.checkRoles("新建平台"),
            //    2: this.checkRoles("上传文件和编辑"),
            //    3: this.checkRoles("查看附表"),
            //    4: this.checkRoles("上传PDF和图片"),
            //    5: this.checkRoles("审核附表"),
            //    6: this.checkRoles("批准附表"),
            //    7: this.checkRoles("受控附表"),
            //};
        },
        //函数方法
        methods: {
            //总表数据轮询
            getTableData() {
                axios.post('/Process_Capacity/GetInfoByModule').then(res => {
                    //console.log(JSON.parse(JSON.stringify(res.data)));
                    //存储返回值
                    this.tableList = res.data;
                    //执行条件过滤方法
                    this.filterList();
                }).catch(err => {
                    console.warn("获取数据失败")
                });
            },
            //总表条件查询
            onQuerySubmit() {
                this.loading = true;
                axios.post('/Process_Capacity/GetInfoByModule', {
                    type: this.options.protype,
                    plafrom: this.options.proplatform
                }).then(res => {
                    console.log(JSON.parse(JSON.stringify(res.data)));
                    for (let option of res.data) {
                        option['moduleNameIndex'] = 0;
                        option['moduleNameVal'] = [];
                        if (option.list != '') {
                            option.moduleNameVal = option.list[0];
                            option.list = this.cascaderArr(option.list);
                        }
                    };
                    //测试数组
                    //let arrlist = [
                    //    ["A", "E"],
                    //    ["B", "C"],
                    //    ["B", "D", "E"],
                    //    ["A", "C", "E", "F"],
                    //    ["C", "D", "E"],
                    //    ["B", "D"],
                    //    ["B", "D", "F"],
                    //];
                    //console.log(this.cascaderArr(arrlist));
                    this.tableList = res.data;
                    this.filterResult = res.data;
                    this.loading = false;
                    this.$message.success('查询成功！');
                }).catch(err => {
                    console.warn("查询数据失败");
                    this.loading = false;
                });
            },
            //型号下拉列表获取方法
            getProtype() {
                axios.post('/Process_Capacity/TypeList').then(res => {
                    //console.log(res.data);
                    this.options.protype = res.data;
                }).catch(err => {
                    console.warn("型号列表获取失败");
                });
            },
            //平台下拉列表获取方法
            getPlatfrom() {
                axios.post('/Process_Capacity/DisplayPlatfromFromType', { type: '' }).then(res => {
                    //console.log(res.data);
                    this.options.proplatform = res.data;
                }).catch(err => {
                    console.warn("型号列表获取失败");
                });
            },
            /**
             * @@param roleName 参数为权限名称 例：‘新建平台’
             * 传入参数，在该用户权限列表中遍历查找该权限名称，若存在该权限，返回true，否则返回false
             */
            checkRoles(roleName) {   //检测权限
                let list = this.limitsList;
                if (list && roleName) {
                    for (let item in list) {
                        if (list[item] == roleName) {
                            return true;
                        };
                    };
                };
                return false;
            },
            //轮询计时方法，每30秒自动更新页面数据
            monitorTimer() {
                this.pollingTimer = setInterval(() => {
                    this.getTableData();
                }, 30000);
            },
            //监听平台选择，调用筛选方法，即时更新筛选后的表格
            watchPlatform(v) {
                this.filterList();
            },
            //监听型号选择，调用筛选方法，即时更新筛选后的表格
            watchType(v) {
                this.filterList();
            },
            //筛选方法，
            filterList() {
                let array = this.tableList,//所有数据
                    arr1 = this.queryTable.proplatform,//下拉列表选择的平台值
                    arr2 = this.queryTable.protype,//下拉列表选择的型号值
                    thisArr1, thisArr2;
                //过滤平台值，筛选出过滤后的列表 存为thisArr1
                thisArr1 = array.filter(function (val) {
                    if (arr1 == null || arr1 == "") {
                        return val;
                    } else {
                        for (let i of arr1) {
                            //if (val.platfrom.toLowerCase().indexOf(i.toLowerCase()) > -1) {
                            //    return val;
                            //};
                            if (val.platfrom.toLowerCase() == i.toLowerCase()) {
                                return val;
                            };
                        };
                    };
                });
                //在thisArr1筛选后，继续过滤型号值
                thisArr2 = thisArr1.filter(function (val) {
                    if (arr2 == null || arr2 == "") {
                        return val;
                    } else {
                        for (let i of arr2) {
                            //if (val.type.toLowerCase().indexOf(i.toLowerCase()) > -1) {
                            //    return val;
                            //};
                            if (val.type.toLowerCase() == i.toLowerCase()) {
                                return val;
                            };
                        };
                    };
                });
                this.filterResult = thisArr2;//存储筛选后的数据
            },
            //处理联级数组
            cascaderArr(arr) {
                let rtd = [],//返回的数组
                    exitArr = [];//记录已存在的根节点数组
                //判断传入的数组长度，大于1代表还有子节点需要处理
                if (arr.length > 1) {
                    for (let item of arr) {
                        //从记录的根节点数组上 找是否存在此次遍历的二维数组的第一个值
                        if (exitArr.indexOf(item[0]) >= 0) {
                            continue;//若存在，说明此节点已经生成树，需要跳过
                        } else {
                            exitArr.push(item[0]);//否则把此次新值添加进根节点数组
                        };
                        let thisFirst = item[0],//存此次根节点值
                            remainArr = [];//用来存，除去根节点外的剩余数组
                        for (let i of arr) {
                            //循环二维数组，找到与此次根节点相同的子数组
                            if (thisFirst == i[0]) {
                                if (i.length > 1) {
                                    //若子数组的长度大于1，说明还存在剩余数组，把第一个值去掉后，加进remainArr
                                    remainArr.push(i.slice(1));
                                } else {
                                    //否则直接作为树节点存入
                                    rtd.push({
                                        value: thisFirst,
                                        label: thisFirst
                                    });
                                };
                            };
                        };
                        //剩余数组不为空，则递归下去
                        if (remainArr.length > 0) {
                            rtd.push({
                                value: thisFirst,
                                label: thisFirst,
                                children: this.cascaderArr(remainArr)
                            });
                        };
                    };
                    return rtd;
                } else {
                    //若传入的数组长度为1，则判断此子数组数量是不是大于1，大于1则往后添加子节点
                    if (arr[0].length > 1) {
                        rtd.push({
                            value: arr[0][0],
                            label: arr[0][0],
                            children: this.cascaderArr([arr[0].slice(1)])
                        });
                    } else {
                        //否则直接作为树节点存入
                        rtd.push({
                            value: arr[0][0],
                            label: arr[0][0]
                        });
                    };
                    return rtd;
                };
            },
            //选择监听
            handleChange(value, row) {
                console.log(value);
                for (let i in row.conten) {
                    //console.log(JSON.stringify(value))
                    //console.log(JSON.stringify(row.conten[i].moduleName))
                    if (JSON.stringify(value) == JSON.stringify(row.conten[i].moduleName)) {
                        row.moduleNameIndex = i;
                    };
                };
            },

        },
        //页面加载完后执行
        mounted: function () {
            this.onQuerySubmit();//页面加载完后 调用方法获取表格数据
            //this.monitorTimer();//启动轮询计时器
        }
    });
</script>