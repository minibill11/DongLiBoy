@{
    ViewBag.Title = "模块实时看板";
}
@* css放置处 *@
@section cssStyle {
    <link rel="stylesheet/less" type="text/css" href="~/Content/styleFile/moduleManagement/module.less" />
    <link rel="stylesheet/less" type="text/css" href="~/Content/styleFile/moduleManagement/module-board.less" />
}

<el-container id="app" v-cloak>
    <el-header>
        <h1 class="title">@ViewBag.Title</h1>
    </el-header>
    <el-main>
        <el-row class="table-top">
            <div class="table-top-left">
                <el-select v-model="ordernum.value"
                           placeholder="订单筛选"
                           size="medium"
                           multiple
                           reserve-keyword
                           collapse-tags
                           filterable
                           clearable>
                    <el-option v-for="item in ordernum.list"
                               :key="item"
                               :label="item"
                               :value="item">
                    </el-option>
                </el-select>
                <el-select v-model="platformType.value"
                           placeholder="平台筛选"
                           size="medium"
                           multiple
                           reserve-keyword
                           collapse-tags
                           filterable
                           clearable>
                    <el-option v-for="item in platformType.list"
                               :key="item"
                               :label="item"
                               :value="item">
                    </el-option>
                </el-select>
            </div>
            <div class="table-top-right">
                <a href="Board_History" target="_blank"><el-button type="primary" size="medium" plain>历史记录</el-button></a>
                <div class="now-time">{{nowTime}}</div>
            </div>
        </el-row>
        <el-row class="table-mid">
            @RenderPage("_board-table.cshtml")
        </el-row>
        <el-row class="table-bottom">
            <div class="boxcolor bggreen"></div><div>达到100%    &nbsp;&nbsp;</div>
            <div class="boxcolor bgyellow"></div><div> 合格率范围为80%~90%      &nbsp;&nbsp;</div>
            <div class="boxcolor bgred"></div><div> 合格率范围为< 80%&nbsp;&nbsp;</div>
        </el-row>

        <el-dialog title="查看文件"
                   :visible.sync="dialogVisible"
                   width="80%">
            <el-image v-show="fileType=='img'" v-for="url in fileSrc.img" :key="url" :src="url" :preview-src-list="fileSrc.img" lazy></el-image>
            <iframe v-show="fileType=='pdf'" id="pdfIframe" :src="fileSrc.pdf" style="width:100%;"></iframe>
            <span slot="footer" class="dialog-footer">
                <el-button @@click="dialogVisible = false" size="medium">关 闭</el-button>
            </span>
        </el-dialog>
    </el-main>
</el-container>
@* 分部页放置处 *@
@section renderPage {
    @RenderPage("_board.cshtml")
}
@* js放置处 *@
@section jsScript {
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        const app = {
            data: function () {
                return {
                    tableList: [],
                    ordernum: { value: '', list: [] },
                    platformType: { value: '', list: [] },
                    dialogVisible: false,
                    fileSrc: { img: [], pdf: '' },
                    fileType: '',
                    nowTime: '',
                }
            },
            mounted() { this.setNowTime(); this.hubConnection() },
            computed: {
                filterTableList() {
                    const ini = this.tableList, ov = this.ordernum.value, pv = this.platformType.value; let o, p;
                    o = ini.filter(r => { if (ov == null || ov == '') { return r } else { if (ov.includes(r.OrderNum)) return r } });
                    p = o.filter(r => { if (pv == null || pv == '') { return r } else { if (pv.includes(r.PlatformType)) return r } });
                    return p;
                },
            },
            methods: {
                openDialog(ordernum, type, name) {
                    this.dialogVisible = true;
                    if (name == '首件') {
                        if (type == 'img') { this.getImgUrl(ordernum, '/OrderMgms/GetSMTSampleImg', 'SMTSample_Files') };
                        if (type == 'pdf') { this.getPdfUrl(ordernum, '/OrderMgms/preview_SMTSample_pdf') };
                    }
                    if (name == '小样') {
                        if (type == 'img') { this.getImgUrl(ordernum, '/OrderMgms/GetSmallSampleImg', 'SmallSample_Files') };
                        if (type == 'pdf') { this.getPdfUrl(ordernum, '/OrderMgms/preview_SmallSample_pdf') };
                    }
                    if (name == '异常') {
                        if (type == 'img') { this.getImgUrl(ordernum, '/OrderMgms/GetSMTAbnormalOrderImg', 'SMTAbnormalOrder_Files') };
                        if (type == 'pdf') { this.getPdfUrl(ordernum, '/OrderMgms/GetSMTAbnormalOrderPDF') };
                    };
                },
                getImgUrl(o, url, src) {
                    axios.post(url, { ordernum: o }).then(res => {
                        if (res.data == "图片文档未上传或不存在！") { this.$message(res.data) } else {
                            this.fileType = 'img'; this.fileSrc.img = Object.values(res.data).map(v => `/MES_Data/${src}/${o}/${v}`);
                        };
                    }).catch(err => { this.$message("图片未上传！") });
                },
                getPdfUrl(o, url) {
                    axios.post(url, { ordernum: o }).then(res => {
                        if (res.data == "PDF文档未上传或不存在！") { this.$message(res.data) } else {
                            this.fileType = 'pdf'; this.fileSrc.pdf = res.data; $("#pdfIframe").css({ "height": $(window).height() - 130 });
                        };
                    }).catch(err => { this.$message("PDF未上传！") });
                },
                setNowTime() {
                    Date.prototype.Format = function (fmt) {
                        let o = { 'M+': this.getMonth() + 1, 'd+': this.getDate(), 'h+': this.getHours(), 'm+': this.getMinutes(), 's+': this.getSeconds(), 'q+': Math.floor((this.getMonth() + 3) / 3), 'S': this.getMilliseconds() };
                        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
                        for (var k in o) if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length))); return fmt;
                    }; setInterval(() => { this.nowTime = new Date().Format('yyyy-MM-dd hh:mm:ss') }, 1000);
                },
                handleData(v) {
                    let vd = v, ol = [], pl = [];
                    for (let i of vd) { ol.push(i.OrderNum); pl.push(i.PlatformType); };
                    this.ordernum.list = [...new Set(ol)]; this.platformType.list = [...new Set(pl)];
                    this.tableList = vd;
                },
                hubConnection() {
                    this.$loading({
                        lock: true,
                        text: '看板加载中',
                        spinner: 'el-icon-loading',
                        background: 'rgba(255, 255, 255, 0.3)'
                    });
                    //读取JSON文件数据
                    $.getJSON('/MES_Data/TemDate/ModuleProductionController.json', v => { this.handleData(v); this.$loading().close(); });
                    //如果前后端为同一个端口,可不填参数;如果前后端分离,这里参数为服务器端的URL.
                    const connection = $.hubConnection(), Proxy = connection.createHubProxy('ModuleProductionControlIndex');
                    Proxy.on('sendProductionControlIndex', v => { this.handleData(v) });
                    connection.start().done(v => { console.log('启动连接成功！' + v); }).fail(v => { console.log('启动连接失败' + v); });
                    connection.error(err => { console.log('连接出错！' + err) });
                    connection.reconnected(() => { console.log('连接重新启动！') });
                    connection.disconnected(() => { console.log('断开连接！') });
                    connection.received((data) => { console.log('接收数据成功！') });
                    connection.connectionSlow(() => { console.log('数据连接流！') });
                },
            }
        };
    </script>
}