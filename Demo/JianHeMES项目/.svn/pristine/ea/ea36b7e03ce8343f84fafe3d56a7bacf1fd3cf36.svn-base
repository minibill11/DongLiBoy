using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using JianHeMES.Models;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.IO;
using System.Linq.Expressions;
using System.Reflection;
using System.Collections;
using System.Data.Entity.Infrastructure;
using System.Text;

namespace JianHeMES.Controllers
{
    public class EquipmentController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();


        // GET: Equipment
        public ActionResult Index()//设备台账
        {
            return View();
        }

        public ActionResult Index2()//产线查看
        {
            return View();
        }

        public ActionResult First_equipment()//设备首页
        {
            return View();
        }

        #region------Index查询首页------
        [HttpPost]
        public ActionResult Index(string equipmentnumber, string assetnumber, string equipmentname, string brand, string modelspecification, string userdepartment, string storageplace, string workshop, string section, string status, string remark = "")
        {

            IEnumerable<EquipmentBasicInfo> ebi = db.EquipmentBasicInfo;
            List<Exception> exprList = new List<Exception>();
            ParameterExpression paramExpr = Expression.Parameter(typeof(EquipmentStatusRecord), "o");
            MethodInfo containsMethod = typeof(string).GetMethod("Contains");//获取表示

            var resultlist = ebi;
            if (!String.IsNullOrEmpty(equipmentnumber))
            {
                resultlist = resultlist.Where(c => c.EquipmentNumber != null && c.EquipmentNumber.Contains(equipmentnumber));
            }
            if (!String.IsNullOrEmpty(assetnumber))
            {
                resultlist = resultlist.Where(c => c.AssetNumber != null && c.AssetNumber.Contains(assetnumber));
            }
            if (!String.IsNullOrEmpty(equipmentname))
            {
                resultlist = resultlist.Where(c => c.EquipmentName != null && c.EquipmentName.Contains(equipmentname));
            }
            if (!String.IsNullOrEmpty(brand))
            {
                resultlist = resultlist.Where(c => c.Brand != null && c.Brand.Contains(brand));
            }
            if (!String.IsNullOrEmpty(modelspecification))
            {
                resultlist = resultlist.Where(c => c.ModelSpecification != null && c.ModelSpecification.Contains(modelspecification));
            }
            if (!String.IsNullOrEmpty(userdepartment))
            {
                resultlist = resultlist.Where(c => c.UserDepartment != null && c.UserDepartment.Contains(userdepartment));
            }
            if (!String.IsNullOrEmpty(storageplace))
            {
                resultlist = resultlist.Where(c => c.StoragePlace != null && c.StoragePlace.Contains(storageplace));
            }
            if (!String.IsNullOrEmpty(workshop))
            {
                resultlist = resultlist.Where(c => c.WorkShop != null && c.WorkShop.Contains(workshop));
            }
            if (!String.IsNullOrEmpty(section))
            {
                resultlist = resultlist.Where(c => c.Section != null && c.Section.Contains(section));
            }
            if (!String.IsNullOrEmpty(status))
            {
                resultlist = resultlist.Where(c => c.Status != null && c.Status.Contains(status));
            }
            if (!String.IsNullOrEmpty(remark))
            {
                resultlist = resultlist.Where(c => c.Remark != null && c.Remark.Contains(remark));
            }
            JObject result = new JObject();
            int i = 1;
            foreach (var item in resultlist)
            {
                result.Add(i.ToString(), JsonConvert.SerializeObject(item));
                i++;
            }
            return Content(JsonConvert.SerializeObject(result));
        }

        #region------获取设备的使用部门列表
        public ActionResult Userdepartment_list()
        {
            var depar_list = db.EquipmentBasicInfo.OrderByDescending(m => m.Id).Select(c => c.UserDepartment).Distinct();
            return Content(JsonConvert.SerializeObject(depar_list));
        }
        #endregion

        #region------修改设备使用部门
        [HttpPost]
        public async Task<bool> ModifyEquipmentUseDepartment(int id, string newdepartment)
        {
            if (!String.IsNullOrEmpty(id.ToString()) && !String.IsNullOrEmpty(newdepartment))
            {
                var record = await db.EquipmentBasicInfo.Where(c => c.Id == id).FirstOrDefaultAsync();
                record.UserDepartment = newdepartment;
                await db.SaveChangesAsync();
                return true;
            }
            return false;
        }
        #endregion

        #region------批量添加设备------
        public ActionResult BatchInputEquipment()
        {
            if (Session["User"] == null)
            {
                return RedirectToAction("Login", "Users", new { col = "Equipment", act = "BatchInputEquipment" });
            }
            return View();
        }

        [HttpPost]
        public async Task<ActionResult> BatchInputEquipment(List<EquipmentBasicInfo> inputList)
        {
            string repeat = null;
            foreach (var item in inputList)
            {
                item.CreateTime = DateTime.Now;
                item.Creator = ((Users)Session["User"]) != null ? ((Users)Session["User"]).UserName : "";
                if (db.EquipmentBasicInfo.Count(c => c.EquipmentNumber == item.EquipmentNumber) != 0)
                    repeat = repeat + item.EquipmentNumber + ",";
            }
            JObject result = new JObject();
            if (!string.IsNullOrEmpty(repeat))
            {
                result.Add("repeat", repeat);

                return Content(JsonConvert.SerializeObject(result));
            }
            db.EquipmentBasicInfo.AddRange(inputList);
            int savecount = await db.SaveChangesAsync();
            if (savecount > 0) result.Add("success", "添加" + inputList.Count.ToString() + "台设备成功");
            else result.Add("failure", "添加失败");
            return Content(JsonConvert.SerializeObject(result));
        }
        #endregion

        #region------添加/修改状态记录------
        [HttpPost]
        public async Task<bool> AddEquipmentStatusRecordAsync(EquipmentStatusRecord record)
        {
            record.CreateTime = DateTime.Now;
            db.EquipmentStatusRecord.Add(record);
            if (record.StatusStarTime < DateTime.Now.AddMinutes(10) && record.StatusEndTime > DateTime.Now)
            {
                var eqm = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == record.EquipmentNumber).FirstOrDefault();
                eqm.Status = record.Status;
            }
            int result = await db.SaveChangesAsync();
            if (result > 0) return true;// Content("添加成功!");
            else return false;// Content("添加失败!");
        }

        [HttpPost]
        public async Task<ActionResult> GetEquipmentStatusRecordAsyn(int id)
        {
            var record = await db.EquipmentStatusRecord.Where(c => c.Id == id).FirstOrDefaultAsync();
            return Content(JsonConvert.SerializeObject(record)); // Content("修改成功!");
        }

        [HttpPost]
        public async Task<bool> EditEquipmentStatusRecordAsync(int id, EquipmentStatusRecord modifyrecord)
        {
            if (ModelState.IsValid)
            {
                var record = db.EquipmentStatusRecord.Where(c => c.Id == id).FirstOrDefault();
                record = modifyrecord;
                await db.SaveChangesAsync();
                return true; // Content("修改成功!");
            }
            return false;// Content("修改失败!");
        }
        #endregion

        #region------同时修改三个表的设备状态（Status）
        [HttpPost]
        public ActionResult Equipment_state(List<string> equipmentNumber, string status, string linenum, string userdepar)
        {
            JObject message = new JObject();
            foreach (var item in equipmentNumber)
            {
                if (!String.IsNullOrEmpty(item) && !String.IsNullOrEmpty((status)))
                {
                    var station = db.EquipmentSetStation.Where(c => c.EquipmentNumber == item).FirstOrDefault();
                    if (station != null)
                    {
                        station.Status = status;
                        station.ModifyTime = DateTime.Now;
                        station.Modifier = ((Users)Session["user"]).UserName;
                    }
                    var infoe = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == item).FirstOrDefault();
                    if (infoe != null)
                    {
                        infoe.Status = status;
                        infoe.ModifyTime = DateTime.Now;
                        infoe.Modifier = ((Users)Session["user"]).UserName;
                    }
                    var record = db.EquipmentStatusRecord.OrderByDescending(c => c.StatusStarTime).Where(c => c.EquipmentNumber == item).FirstOrDefault();
                    if (record != null && record.Status != status)
                    {
                        record.StatusEndTime = DateTime.Now;
                        record.ModifyTime = DateTime.Now;
                        record.Modifier = ((Users)Session["user"]).UserName;
                        db.SaveChanges();
                        var add = record;
                        add.Status = status;
                        add.StatusStarTime = record.StatusEndTime;
                        add.StatusEndTime = null;
                        add.CreateTime = DateTime.Now;
                        add.Creator = ((Users)Session["user"]).UserName;
                        db.EquipmentStatusRecord.Add(add);
                        db.SaveChanges();
                    }
                    else if (record == null && infoe != null)
                    {
                        var rede = new EquipmentStatusRecord() { EquipmentNumber = infoe.EquipmentName, AssetNumber = infoe.AssetNumber, EquipmentName = infoe.EquipmentName, OrderNum = null, Status = status, StatusStarTime = DateTime.Now, StatusEndTime = null, ReportRepairMan = null, FailureDescription = null, Reason = null, RepairOrTestContent = null, GetJobTime = null, PlanFinishTime = null, RepairMan = null, SparePartsInfo = null, UserDepartment = userdepar, WorkShop = null, LineNum = linenum, Section = infoe.Section, Creator = ((Users)Session["user"]).UserName, CreateTime = DateTime.Now, Modifier = null, ModifyTime = null, Remark = null };
                        db.EquipmentStatusRecord.Add(rede);
                        db.SaveChanges();
                    }
                    message.Add("msg", "修改" + equipmentNumber.Count.ToString() + "台设备状态成功！");
                    message.Add("result", true);
                    message.Add("Status", status);
                    return Content(JsonConvert.SerializeObject(message));
                }
            }
            message.Add("msg", "修改设备状态失败！");
            message.Add("result", false);
            return Content(JsonConvert.SerializeObject(message));
        }

        #endregion

        #region ------添加设备维修保养记录（自用）------
        public ActionResult InputEquipmentRepairRecord()
        {
            //if (Session["User"] == null)
            //{
            //    return RedirectToAction("Login", "Users", new { col = "Equipment", act = "InputEquipmentRepairRecord" });
            //}
            return View();
        }

        [HttpPost]
        public ActionResult InputEquipmentRepairRecord(List<EquipmentStatusRecord> equipmentStatusRecordList)
        {
            if (ModelState.IsValid)
            {
                db.EquipmentStatusRecord.AddRange(equipmentStatusRecordList);
                db.SaveChangesAsync();
                return Content("保存成功!");
            }
            return Content("保存失败!");
        }
        public ActionResult InputEquipmentRepairRecordSingle()
        {
            //if (Session["User"] == null)
            //{
            //    return RedirectToAction("Login", "Users", new { col = "Equipment", act = "InputEquipmentRepairRecord" });
            //}
            return View();
        }

        [HttpPost]
        public ActionResult InputEquipmentRepairRecordSingle(EquipmentStatusRecord equipmentStatusRecord)
        {
            if (ModelState.IsValid)
            {
                db.EquipmentStatusRecord.Add(equipmentStatusRecord);
                db.SaveChangesAsync();
                return Content("保存成功!");
            }
            return Content("保存失败!");
        }

        #endregion

        #region------设备信息详情页------
        public ActionResult Details()
        {
            return View();
        }

        [HttpPost]
        public async Task<ActionResult> Details(string equipmentNumber)
        {
            if (equipmentNumber == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            JObject result = new JObject();
            var basicinfo = await db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefaultAsync();
            result.Add("basicinfo", JsonConvert.SerializeObject(basicinfo));
            List<FileInfo> fileInfos = new List<FileInfo>();
            if (Directory.Exists(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\") == false)
            {
                result.Add("picture", "未上传图片。");
            }
            else
            {
                fileInfos = GetAllFilesInDirectory(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\").Where(c => c.Name.Substring(c.Name.Length - 4, 4) == ".jpg").ToList();
                result.Add("picture", JsonConvert.SerializeObject(fileInfos));
            }
            var statusrecord = await db.EquipmentStatusRecord.Where(c => c.EquipmentNumber == equipmentNumber).OrderBy(c => c.StatusStarTime).ToListAsync();
            result.Add("statusrecord", JsonConvert.SerializeObject(statusrecord));
            return Content(JsonConvert.SerializeObject(result));
        }
        #endregion、

        #region-----修改设备信息EquipmentBasicInfo表-----
        [HttpPost]
        public ActionResult Edit_Equipmentbasic(string equipmentNumber, string assetNumber, string equipmentName, string userdepartment, string modelspeci, string manufacturingNumber, string brand, string supplier, DateTime? purchaseDate, DateTime? actionDate)
        {
            JObject messlist = new JObject();
            var recordlist = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefault();
            if (recordlist != null)
            {
                if (!String.IsNullOrEmpty(assetNumber))//资产编号
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.AssetNumber = assetNumber;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("assetNumber", assetNumber);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(equipmentName))//设备名称
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.EquipmentName = equipmentName;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("equipmentName", equipmentName);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(userdepartment))//使用部门
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.UserDepartment = userdepartment;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("userdepartment", userdepartment);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(modelspeci))//型号/规格
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.ModelSpecification = modelspeci;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("modelspeci", modelspeci);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(manufacturingNumber))//出厂编号
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.ManufacturingNumber = manufacturingNumber;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("manufacturingNumber", manufacturingNumber);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(brand))//品牌（生产厂家）
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.Brand = brand;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("brand", brand);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (!String.IsNullOrEmpty(supplier))//供应商
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.Supplier = supplier;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("supplier", supplier);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (purchaseDate != null)//购入日期
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.PurchaseDate = purchaseDate;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("purchaseDate", purchaseDate);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
                else if (actionDate != null)//启用时间
                {
                    recordlist.Modifier = ((Users)Session["User"]).UserName;
                    recordlist.ModifyTime = DateTime.Now;
                    recordlist.ActionDate = actionDate;
                    db.SaveChanges();
                    messlist.Add("messlist", "修改成功！");
                    messlist.Add("actionDate", actionDate);
                    return Content(JsonConvert.SerializeObject(messlist));
                }
            }
            return Content("数据有误！");
        }
        #endregion

        #region------上传设备照片(jpg)方法------
        [HttpPost]
        public ActionResult UploadEquipmentPicture(string equipmentNumber)
        {
            foreach (var file1 in Request.Files)
            {
                HttpPostedFileBase file = Request.Files[file1.ToString()];
                var fileType = file.FileName.Substring(file.FileName.LastIndexOf(".")).ToLower();
                if (!String.Equals(fileType, ".jpg"))
                {
                    return Content("您选择文件的文件类型不正确，请选择jpg类型图片文件！");
                }
                if (Directory.Exists(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\") == false)//如果不存在就创建订单文件夹
                {
                    Directory.CreateDirectory(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\");
                }
                List<FileInfo> fileInfos = GetAllFilesInDirectory(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\");
                //文件为jpg类型
                if (fileType == ".jpg")
                {
                    int jpg_count = fileInfos.Where(c => c.Name.StartsWith(equipmentNumber) && c.Name.Substring(c.Name.Length - 4, 4) == ".jpg").Count();
                    file.SaveAs(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\" + equipmentNumber + (jpg_count + 1) + fileType);
                }
                //文件为pdf类型,直接存储或替换原文件
                else
                {
                    file.SaveAs(@"D:\MES_Data\Equipment\" + equipmentNumber + "\\" + equipmentNumber + fileType);
                }
                //return RedirectToAction("Details", "Equipment", new { equipmentNumber = equipmentNumber });
            }
            if (Request.Files.Count > 0)
            {
                return Content("上传成功！");
            }
            return Content("上传失败！");
        }
        #endregion  

        #region------获取所有设备编号的方法
        [HttpPost]
        public ActionResult EQNumberList()
        {
            var eqNumberlist = db.EquipmentBasicInfo.Select(c => c.EquipmentNumber).Distinct();
            return Content(JsonConvert.SerializeObject(eqNumberlist));
        }
        #endregion

        #region------根据设备编号获取设备信息
        [HttpPost]
        public ActionResult EquipmentInfo_getdata_by_eqnum(string equipmentNumber)
        {
            return Content(JsonConvert.SerializeObject(db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefault()));
        }
        #endregion

        #endregion

        #region------Index2产线查看------
        [HttpPost]
        public ActionResult Index2(List<string> departmentlist)
        {
            JArray result = new JArray();
            if (departmentlist != null)
            {
                foreach (var department in departmentlist)
                {
                    var linenumlist = db.EquipmentSetStation.Where(c => c.UserDepartment == department).Select(c => c.LineNum).Distinct().ToList();
                    JObject JOdepartmentDatas = new JObject();
                    JArray JOdepartment = new JArray();
                    foreach (var linenum in linenumlist)
                    {
                        JObject JOlineData = new JObject();
                        JOlineData.Add("linenum", linenum);
                        var equipmentlistbystationnum = db.EquipmentSetStation.Where(c => c.UserDepartment == department && c.LineNum == linenum).OrderBy(c => c.StationNum).ToList();
                        int eqcount = equipmentlistbystationnum.Count;
                        int stop_eqcount = equipmentlistbystationnum.Count(c => c.Status == "停机");
                        int start_eqcount = equipmentlistbystationnum.Count(c => c.Status == "运行");
                        int repair_eqcount = equipmentlistbystationnum.Count(c => c.Status == "维修" || c.Status == "保养");
                        if (eqcount == start_eqcount)
                        {
                            JOlineData.Add("productLineStatus", "运行");
                        }
                        else if (eqcount == stop_eqcount)
                        {
                            JOlineData.Add("productLineStatus", "停机");
                        }
                        else if (repair_eqcount > 0)
                        {
                            JOlineData.Add("productLineStatus", "维修/保养");
                        }
                        else
                        {
                            JOlineData.Add("productLineStatus", "未知状态");
                        }
                        JArray Jmechines = new JArray();
                        foreach (var mechine in equipmentlistbystationnum)
                        {
                            JObject JOmechine = new JObject();
                            JOmechine.Add("mechineindex", mechine.StationNum);
                            JOmechine.Add("equipmentNumber", mechine.EquipmentNumber);
                            JOmechine.Add("equipmentName", mechine.EquipmentName);
                            JOmechine.Add("status", mechine.Status);
                            Jmechines.Add(JOmechine);
                        }
                        JOlineData.Add("mechines", Jmechines);
                        JOdepartment.Add(JOlineData);
                    }
                    JOdepartmentDatas.Add(department, JOdepartment);
                    result.Add(JOdepartmentDatas);
                }
                return Content(JsonConvert.SerializeObject(result));
            }
            return Content("没有部门名！");
        }

        //修改设备基本信息方法
        [HttpPost]
        public ActionResult EquipmentBasicInfoModify(EquipmentBasicInfo equipmentBasicInfo)
        {
            DbEntityEntry<EquipmentBasicInfo> entry = db.Entry(equipmentBasicInfo);
            entry.State = System.Data.Entity.EntityState.Modified;
            int count = db.SaveChanges();
            if (count > 0) return Content("保存成功。");
            else return Content("保存失败。");
        }

        #region------获取所有设备编号的方法  Index2
        [HttpPost]
        public ActionResult EquipmentNumberList()
        {
            var equi_list = db.EquipmentBasicInfo.OrderByDescending(m => m.Id).Select(c => c.EquipmentNumber).Distinct();
            return Content(JsonConvert.SerializeObject(equi_list));
        }
        #endregion

        #region------根据设备编号获取设备详细信息的方法 Index2
        public ActionResult Particulars(string equipmentNumber)
        {
            if (equipmentNumber != null)
            {
                var partic = db.EquipmentSetStation.Where(c => c.EquipmentNumber == equipmentNumber).ToList();
                return Content(JsonConvert.SerializeObject(partic));
            }
            return Content("输入的设备编号不正确，请重新输入！");
        }

        #endregion

        #region------产线添加设备的方法(单个)  Index2
        public ActionResult ADDEquipment(EquipmentSetStation EquipmentSetStation)
        {
            JObject mess = new JObject();
            if (!String.IsNullOrEmpty(EquipmentSetStation.EquipmentNumber) && !String.IsNullOrEmpty(EquipmentSetStation.UserDepartment) && !String.IsNullOrEmpty(EquipmentSetStation.LineNum))
            {
                var eqlist = db.EquipmentSetStation.Where(c => c.UserDepartment == EquipmentSetStation.UserDepartment && c.LineNum == EquipmentSetStation.LineNum && c.StationNum >= EquipmentSetStation.StationNum).ToList();
                foreach (var item in eqlist)
                {
                    item.StationNum = item.StationNum + 1;
                    db.SaveChanges();
                }
                EquipmentSetStation.CreateTime = DateTime.Now;
                EquipmentSetStation.Creator = ((Users)Session["user"]).UserName;
                db.EquipmentSetStation.Add(EquipmentSetStation);
                var savecount = db.SaveChanges();
                if (savecount > 0)
                {
                    mess.Add("messlist", "添加设备成功！");
                    mess.Add("equipmentSetStation", JsonConvert.SerializeObject(EquipmentSetStation));
                    return Content(JsonConvert.SerializeObject(mess));
                }
                else
                {
                    mess.Add("messlist", "添加设备失败！");
                    mess.Add("equipmentSetStation", null);
                    return Content(JsonConvert.SerializeObject(mess));
                }
            }

            return Content("添加设备数据有误！");
        }
        #endregion

        #region------产线删除设备 Index2
        [HttpPost]
        public ActionResult deleteEquipment(string equipmentNumber)
        {
            if (!String.IsNullOrEmpty(equipmentNumber))
            {
                var eq = db.EquipmentSetStation.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefault();
                var eqlist = db.EquipmentSetStation.Where(c => c.UserDepartment == eq.UserDepartment && c.LineNum == eq.LineNum && c.StationNum >= eq.StationNum).ToList();
                foreach (var item in eqlist)
                {
                    item.StationNum = item.StationNum - 1;
                    db.SaveChanges();
                }
                db.EquipmentSetStation.Remove(eq);
                db.SaveChanges();
                return Content("删除设备成功！");
            }
            return Content("删除设备失败！");
        }


        #endregion

        #region------产线一条添加  Index2

        public class equipment_station
        {
            public int Key { get; set; }
            public string Value { get; set; }
        }

        public ActionResult ADDLineNum(string usedepartment, string lineNum, string equipmentNumberlist)
        {
            List<equipment_station> eqnumlist = (List<equipment_station>)JsonHelper.jsonDes<List<equipment_station>>(equipmentNumberlist);
            List<equipment_station> eqnumlist1 = (List<equipment_station>)JsonHelper.jsonDes<List<equipment_station>>(equipmentNumberlist);
            if (!String.IsNullOrEmpty(usedepartment) && !String.IsNullOrEmpty(lineNum) && eqnumlist.Count > 0)
            {
                List<EquipmentSetStation> eqlist = new List<EquipmentSetStation>();
                foreach (var item in eqnumlist)
                {
                    EquipmentSetStation eq = new EquipmentSetStation();
                    var eqdata = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == item.Value).FirstOrDefault();
                    eq.EquipmentNumber = item.Value; //设备编号
                    eq.AssetNumber = eqdata.AssetNumber;//资产编号
                    eq.EquipmentName = eqdata.EquipmentName;//设备名称
                    eq.Status = "停机";//默认设备状态为停机
                    eq.UserDepartment = usedepartment;//使用部门
                    eq.WorkShop = eqdata.WorkShop;//车间
                    eq.LineNum = lineNum;//产线号（名）                
                    eq.Section = eqdata.Section;//工段
                    eq.StationNum = item.Key;//位置序号
                    eq.Creator = ((Users)Session["user"]).UserName;//创建记录人
                    eq.CreateTime = DateTime.Now;//创建时间
                    eqlist.Add(eq);
                }
                db.EquipmentSetStation.AddRange(eqlist);
                db.SaveChanges();
                foreach (var it in eqnumlist1)
                {
                    var deparlist = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == it.Value).FirstOrDefault();
                    deparlist.UserDepartment = usedepartment;
                    deparlist.LineNum = lineNum;
                    db.Entry(deparlist).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Content(usedepartment + "添加" + lineNum + "产线成功,该产线添加了" + eqnumlist.Count + "台设备。");
            }
            return Content("添加产线失败！" + (String.IsNullOrEmpty(usedepartment) == true ? "未选择部门！" : "") + (String.IsNullOrEmpty(lineNum) == true ? "没有产线名！" : "") + (eqnumlist.Count == 0 ? "产线至少要有一台设备！" : ""));
        }
        #endregion

        #region------迁移设备的方法 Index2
        public ActionResult Migration(string equipmentNumber, string userdepar, string linenum, int stationnum, string workShop, string section, string remark)
        {
            var eq = db.EquipmentSetStation.FirstOrDefault(c => c.EquipmentNumber == equipmentNumber);
            //检查是否有迁移的产线，如果没有此产线，直接迁移。如果有此产线，检查此设备位置号是否有设备，如果此设备位置号没有设备，直接迁移，如果已有此设备号，先把原来的设备往后移，再迁移设备。
            var new_linenum_eqlist = db.EquipmentSetStation.Where(c => c.LineNum == linenum).ToList();
            //没有此产线号
            if (new_linenum_eqlist.Count == 0)
            {
                eq.UserDepartment = userdepar;
                eq.LineNum = linenum;
                eq.StationNum = stationnum;
                eq.WorkShop = workShop;
                eq.Section = section;
                eq.Remark = remark;
                eq.Modifier = ((Users)Session["user"]).UserName;
                eq.ModifyTime = DateTime.Now;
                db.SaveChanges();
                return Content("迁移设备成功！");
            }
            //有此产线号
            if (new_linenum_eqlist.Count > 0)
            {
                //有此位置号
                if (stationnum == eq.StationNum)
                {
                    var asst = db.EquipmentSetStation.Where(c => c.UserDepartment == userdepar && c.LineNum == linenum).ToList();
                    foreach (var item in asst)
                    {
                        item.StationNum = item.StationNum + 1;
                        db.SaveChanges();
                    }
                    eq.UserDepartment = userdepar;
                    eq.LineNum = linenum;
                    eq.Remark = remark;
                    eq.Modifier = ((Users)Session["user"]).UserName;
                    eq.ModifyTime = DateTime.Now;
                    db.SaveChanges();
                }
                //没有此位置号
                else
                {
                    eq.UserDepartment = userdepar;
                    eq.LineNum = linenum;
                    eq.StationNum = stationnum;
                    eq.Remark = remark;
                    eq.Modifier = ((Users)Session["user"]).UserName;
                    eq.ModifyTime = DateTime.Now;
                    db.SaveChanges();
                }
                var deparlist = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefault();
                if (deparlist != null)
                {
                    deparlist.UserDepartment = userdepar;
                    deparlist.LineNum = linenum;
                    deparlist.WorkShop = workShop;
                    deparlist.Section = section;
                    db.Entry(deparlist).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Content("迁移设备成功！");
            }
            return Content("迁移设备失败，请检查数据是否正确！");
        }
        #endregion

        #endregion

        #region------点检保养记录------

        #region------设备点检保养记录表

        //点检查询首页
        public ActionResult Equipment_Tally()
        {
            return View();
        }

        //点检记录查询方法
        [HttpPost]
        public ActionResult Equipment_Tally(string userdepartment, string equipmentName, string lineNum, string equipmentNumber, int year = 0, int month = 0)
        {
            List<Equipment_Tally_maintenance> recordlist = db.Equipment_Tally_maintenance.ToList();
            if (!String.IsNullOrEmpty(userdepartment))
            {
                recordlist = recordlist.Where(c => c.UserDepartment == userdepartment).ToList();
            }
            if (!String.IsNullOrEmpty(equipmentName))
            {
                recordlist = recordlist.Where(c => c.EquipmentName == equipmentName).ToList();
            }
            if (!String.IsNullOrEmpty(lineNum))
            {

                recordlist = recordlist.Where(c => c.LineName == lineNum).ToList();
            }
            if (!String.IsNullOrEmpty(equipmentNumber))
            {
                recordlist = recordlist.Where(c => c.EquipmentNumber == equipmentNumber).ToList();
            }
            if (year != 0)
            {
                recordlist = recordlist.Where(c => c.Year == year).ToList();
            }
            if (month != 0)
            {
                recordlist = recordlist.Where(c => c.Month == month).ToList();
            }
            var result = recordlist.Select(c => new { c.Id, c.EquipmentName, c.EquipmentNumber, c.LineName, c.Year, c.Month }).ToList();
            return Content(JsonConvert.SerializeObject(result));
        }

        //打开点检记录
        public ActionResult Equipment_Tally_maintenance()
        {
            return View();
        }

        //打开点检记录取数据
        [HttpPost]
        public ActionResult Equipment_Tally_maintenance(string equipnumber)
        {
            var record = db.Equipment_Tally_maintenance.Where(c => c.EquipmentNumber == equipnumber).FirstOrDefault();
            return Content(JsonConvert.SerializeObject(record));
        }

        //[HttpPost]
        //public ActionResult Equipment_Tally_maintenance_Getdata(string equipmentNumber, int year = 0, int month = 0)
        //{
        //    if (year == 0 || month == 0)
        //    {
        //        DateTime today = DateTime.Now;
        //        var record = db.Equipment_Tally_maintenance.Where(c => c.Year == today.Year && c.Month == today.Month).FirstOrDefault();
        //        if (record == null)
        //        {
        //            var eq = db.EquipmentBasicInfo.Where(c => c.EquipmentNumber == equipmentNumber).FirstOrDefault();
        //            record.Year = DateTime.Now.Year;
        //            record.Month = DateTime.Now.Month;
        //            record.EquipmentNumber = equipmentNumber;
        //            record.LineName = eq.LineNum;
        //            record.EquipmentName = eq.EquipmentName;
        //            return Content(JsonConvert.SerializeObject(record));
        //        }
        //        else return Content(JsonConvert.SerializeObject(record));
        //    }
        //    else
        //    {
        //        var record = db.Equipment_Tally_maintenance.Where(c => c.Year == year && c.Month == month).FirstOrDefault();
        //        return Content("");
        //    }
        //}
        #endregion

        #region---获取所有点检保养的设备编号的方法
        [HttpPost]
        public ActionResult TallyList()
        {
            var equipmentNumber = db.Equipment_Tally_maintenance.OrderByDescending(m => m.Id).Select(c => c.EquipmentNumber).Distinct();
            return Content(JsonConvert.SerializeObject(equipmentNumber));
        }
        #endregion

        #region---设备点检有数据使用部门的方法
        [HttpPost]
        public ActionResult Tally_Deparlist()
        {
            var deparlist = db.Equipment_Tally_maintenance.OrderByDescending(m => m.Id).Select(c => c.UserDepartment).Distinct();
            return Content(JsonConvert.SerializeObject(deparlist));
        }
        #endregion

        #region----设备管理:点检保养记录表(重组数据)
        public ActionResult Equipment_Query_Tally(string equipmentNumber, int year, int month)
        {
            var tally_record = db.Equipment_Tally_maintenance.Where(c => c.EquipmentNumber == equipmentNumber && c.Year == year && c.Month == month).FirstOrDefault();
            JObject result2 = new JObject();//接收右边的值
            if (tally_record != null)//获取右边值
            {
                result2 = PrintProperties2(tally_record);
            }
            return Content(JsonConvert.SerializeObject(result2));
        }
        public JObject PrintProperties2(Equipment_Tally_maintenance eqcp)//右边表的对象
        {
            JObject temp = new JObject();
            foreach (PropertyInfo p in eqcp.GetType().GetProperties())
            {
                if (p.GetValue(eqcp) == null) temp.Add(p.Name, "");
                else temp.Add(p.Name, p.GetValue(eqcp).ToString());
            }
            return temp;
        }
        #endregion

        #region------设备点检保养记录创建保存
        [HttpPost]
        public ActionResult Equipment_Tally_maintenance_Add(Equipment_Tally_maintenance equipment_Tally_maintenance)
        {
            if (equipment_Tally_maintenance != null && equipment_Tally_maintenance.EquipmentNumber != null && equipment_Tally_maintenance.UserDepartment != null&&equipment_Tally_maintenance.LineName!=null&&equipment_Tally_maintenance.Year!=0&&equipment_Tally_maintenance.Month!=0)
            {
                //检查是否存在
                int count = db.Equipment_Tally_maintenance.Count(c => c.EquipmentNumber == equipment_Tally_maintenance.EquipmentNumber && c.Year == equipment_Tally_maintenance.Year && c.Month == equipment_Tally_maintenance.Month);
                if (count > 0)
                {
                    return Content("记录已经存在");
                }
                db.Equipment_Tally_maintenance.Add(equipment_Tally_maintenance);
                int result = db.SaveChanges();
                if (result > 0) return Content("true");
                else return Content("false");
            }
            return Content("false");
        }
        #endregion

        #region---点检保养记录（导入Excel表格）
        public ActionResult Upload_Equipment_Tally()
        {
            try
            {
                HttpPostedFileBase uploadfile = Request.Files["fileup"];
                if (uploadfile == null)
                {
                    return Content("no:非法上传");
                }
                if (uploadfile.FileName == "")
                {
                    return Content("no:请选择文件");
                }

                string fileExt = Path.GetExtension(uploadfile.FileName);
                StringBuilder sbtime = new StringBuilder();
                //equipment.Append(DateTime.Now.Year).Append(DateTime.Now.Month);
                string dir = "/UploadFile/" + sbtime.ToString() + fileExt;
                string realfilepath = Request.MapPath(dir);
                string readDir = Path.GetDirectoryName(realfilepath);
                if (!Directory.Exists(readDir))
                    Directory.CreateDirectory(readDir);
                uploadfile.SaveAs(realfilepath);
                //提取数据 
                var tally = ExcelTool.ExcelToDataTable(true, realfilepath);
                Equipment_Tally_maintenance equipment_Tally_report = new Equipment_Tally_maintenance();

                #region---A组日保养
                equipment_Tally_report.Day_project1 = String.IsNullOrEmpty(tally.Rows[4][1].ToString()) ? null : Convert.ToString(tally.Rows[4][1]);//日保养项目1       
                equipment_Tally_report.Day_opera1 = String.IsNullOrEmpty(tally.Rows[4][3].ToString()) ? null : Convert.ToString(tally.Rows[4][3]); //日保养操作方法1

                #endregion

                #region---B组日保养
                equipment_Tally_report.Day_project2 = String.IsNullOrEmpty(tally.Rows[5][1].ToString()) ? null : Convert.ToString(tally.Rows[5][1]);//日保养项目2
                equipment_Tally_report.Day_opera2 = String.IsNullOrEmpty(tally.Rows[5][3].ToString()) ? null : Convert.ToString(tally.Rows[5][3]);//日保养操作方法2

                #endregion

                #region---C组日保养
                equipment_Tally_report.Day_project3 = String.IsNullOrEmpty(tally.Rows[6][1].ToString()) ? null : Convert.ToString(tally.Rows[6][1]);//日保养项目3
                equipment_Tally_report.Day_opera3 = String.IsNullOrEmpty(tally.Rows[6][3].ToString()) ? null : Convert.ToString(tally.Rows[6][3]); //日保养操作方法3

                #endregion

                #region---D组日保养
                equipment_Tally_report.Day_project4 = String.IsNullOrEmpty(tally.Rows[7][1].ToString()) ? null : Convert.ToString(tally.Rows[7][1]);//日保养项目4
                equipment_Tally_report.Day_opera4 = String.IsNullOrEmpty(tally.Rows[7][3].ToString()) ? null : Convert.ToString(tally.Rows[7][3]);//日保养操作方法4
                #endregion

                #region---E组日保养
                equipment_Tally_report.Day_project5 = String.IsNullOrEmpty(tally.Rows[8][1].ToString()) ? null : Convert.ToString(tally.Rows[8][1]);//日保养项目5
                equipment_Tally_report.Day_opera5 = String.IsNullOrEmpty(tally.Rows[8][3].ToString()) ? null : Convert.ToString(tally.Rows[8][3]);//日保养操作方法5
                #endregion

                #region---F组日保养
                equipment_Tally_report.Day_project6 = String.IsNullOrEmpty(tally.Rows[9][1].ToString()) ? null : Convert.ToString(tally.Rows[9][1]);//日保养项目6
                equipment_Tally_report.Day_opera6 = String.IsNullOrEmpty(tally.Rows[9][3].ToString()) ? null : Convert.ToString(tally.Rows[9][3]);//日保养操作方法6
                #endregion

                #region---G组日保养
                equipment_Tally_report.Day_project7 = String.IsNullOrEmpty(tally.Rows[10][1].ToString()) ? null : Convert.ToString(tally.Rows[10][1]);//日保养项目7
                equipment_Tally_report.Day_opera7 = String.IsNullOrEmpty(tally.Rows[10][3].ToString()) ? null : Convert.ToString(tally.Rows[10][3]);//日保养操作方法7
                #endregion

                #region---H组日保养
                equipment_Tally_report.Day_project8 = String.IsNullOrEmpty(tally.Rows[11][1].ToString()) ? null : Convert.ToString(tally.Rows[11][1]);//日保养项目8
                equipment_Tally_report.Day_opera8 = String.IsNullOrEmpty(tally.Rows[11][3].ToString()) ? null : Convert.ToString(tally.Rows[11][3]);//日保养操作方法8
                #endregion

                #region---I组日保养
                equipment_Tally_report.Day_project9 = String.IsNullOrEmpty(tally.Rows[12][1].ToString()) ? null : Convert.ToString(tally.Rows[12][1]);//日保养项目9
                equipment_Tally_report.Day_opera9 = String.IsNullOrEmpty(tally.Rows[12][3].ToString()) ? null : Convert.ToString(tally.Rows[12][3]);//日保养操作方法9
                #endregion

                #region---J组日保养
                equipment_Tally_report.Day_project10 = String.IsNullOrEmpty(tally.Rows[13][1].ToString()) ? null : Convert.ToString(tally.Rows[13][1]);//日保养项目10
                equipment_Tally_report.Day_opera10 = String.IsNullOrEmpty(tally.Rows[13][3].ToString()) ? null : Convert.ToString(tally.Rows[13][3]);//日保养操作方法10
                #endregion

                #region---K组日保养
                equipment_Tally_report.Day_project11 = String.IsNullOrEmpty(tally.Rows[14][1].ToString()) ? null : Convert.ToString(tally.Rows[14][1]);//日保养项目11
                equipment_Tally_report.Day_opera11 = String.IsNullOrEmpty(tally.Rows[14][3].ToString()) ? null : Convert.ToString(tally.Rows[14][3]);//日保养操作方法11
                #endregion

                #region---周保养
                equipment_Tally_report.Week_Check1 = String.IsNullOrEmpty(tally.Rows[17][1].ToString()) ? null : Convert.ToString(tally.Rows[17][1]);//周保养项目1
                equipment_Tally_report.Week_Inspe1 = String.IsNullOrEmpty(tally.Rows[17][3].ToString()) ? null : Convert.ToString(tally.Rows[17][3]);//周保养操作方法1
                equipment_Tally_report.Week_Check2 = String.IsNullOrEmpty(tally.Rows[18][1].ToString()) ? null : Convert.ToString(tally.Rows[18][1]);//周保养项目2
                equipment_Tally_report.Week_Inspe2 = String.IsNullOrEmpty(tally.Rows[18][3].ToString()) ? null : Convert.ToString(tally.Rows[18][3]);//周保养操作方法2
                equipment_Tally_report.Week_Check3 = String.IsNullOrEmpty(tally.Rows[19][1].ToString()) ? null : Convert.ToString(tally.Rows[19][1]);//周保养项目3
                equipment_Tally_report.Week_Inspe3 = String.IsNullOrEmpty(tally.Rows[19][3].ToString()) ? null : Convert.ToString(tally.Rows[19][3]);//周保养操作方法3
                equipment_Tally_report.Week_Check4 = String.IsNullOrEmpty(tally.Rows[20][1].ToString()) ? null : Convert.ToString(tally.Rows[20][1]);//周保养项目4
                equipment_Tally_report.Week_Inspe4 = String.IsNullOrEmpty(tally.Rows[20][3].ToString()) ? null : Convert.ToString(tally.Rows[20][3]);//周保养操作方法4
                equipment_Tally_report.Week_Check5 = String.IsNullOrEmpty(tally.Rows[21][1].ToString()) ? null : Convert.ToString(tally.Rows[21][1]);//周保养项目5
                equipment_Tally_report.Week_Inspe5 = String.IsNullOrEmpty(tally.Rows[21][3].ToString()) ? null : Convert.ToString(tally.Rows[21][3]);//周保养操作方法5
                equipment_Tally_report.Week_Check6 = String.IsNullOrEmpty(tally.Rows[22][1].ToString()) ? null : Convert.ToString(tally.Rows[22][1]);//周保养项目6
                equipment_Tally_report.Week_Inspe6 = String.IsNullOrEmpty(tally.Rows[22][3].ToString()) ? null : Convert.ToString(tally.Rows[22][3]);//周保养操作方法6
                equipment_Tally_report.Week_Check7 = String.IsNullOrEmpty(tally.Rows[23][1].ToString()) ? null : Convert.ToString(tally.Rows[23][1]);//周保养项目7
                equipment_Tally_report.Week_Inspe7 = String.IsNullOrEmpty(tally.Rows[23][3].ToString()) ? null : Convert.ToString(tally.Rows[23][3]);//周保养操作方法7
                equipment_Tally_report.Week_Check8 = String.IsNullOrEmpty(tally.Rows[24][1].ToString()) ? null : Convert.ToString(tally.Rows[24][1]);//周保养项目8
                equipment_Tally_report.Week_Inspe8 = String.IsNullOrEmpty(tally.Rows[24][3].ToString()) ? null : Convert.ToString(tally.Rows[24][3]);//周保养操作方法8
                equipment_Tally_report.Week_Check9 = String.IsNullOrEmpty(tally.Rows[25][1].ToString()) ? null : Convert.ToString(tally.Rows[25][1]);//周保养项目9
                equipment_Tally_report.Week_Inspe9 = String.IsNullOrEmpty(tally.Rows[25][3].ToString()) ? null : Convert.ToString(tally.Rows[25][3]);//周保养操作方法9
                equipment_Tally_report.Week_Check10 = String.IsNullOrEmpty(tally.Rows[26][1].ToString()) ? null : Convert.ToString(tally.Rows[26][1]);//周保养项目10
                equipment_Tally_report.Week_Inspe10 = String.IsNullOrEmpty(tally.Rows[26][3].ToString()) ? null : Convert.ToString(tally.Rows[26][3]);//周保养操作方法10
                equipment_Tally_report.Week_Check11 = String.IsNullOrEmpty(tally.Rows[27][1].ToString()) ? null : Convert.ToString(tally.Rows[27][1]);//周保养项目11
                equipment_Tally_report.Week_Inspe11 = String.IsNullOrEmpty(tally.Rows[27][3].ToString()) ? null : Convert.ToString(tally.Rows[27][3]);//周保养操作方法11

                #endregion

                #region---月保养
                equipment_Tally_report.Month_Project1 = String.IsNullOrEmpty(tally.Rows[30][1].ToString()) ? null : Convert.ToString(tally.Rows[30][1]);//月保养项目1
                equipment_Tally_report.Month_Approach1 = String.IsNullOrEmpty(tally.Rows[30][3].ToString()) ? null : Convert.ToString(tally.Rows[30][3]);//月保养操作方法1
                equipment_Tally_report.Month_Project2 = String.IsNullOrEmpty(tally.Rows[31][1].ToString()) ? null : Convert.ToString(tally.Rows[31][1]);//月保养项目2
                equipment_Tally_report.Month_Approach2 = String.IsNullOrEmpty(tally.Rows[31][3].ToString()) ? null : Convert.ToString(tally.Rows[31][3]);//月保养操作方法2
                equipment_Tally_report.Month_Project3 = String.IsNullOrEmpty(tally.Rows[32][1].ToString()) ? null : Convert.ToString(tally.Rows[32][1]);//月保养项目3
                equipment_Tally_report.Month_Approach3 = String.IsNullOrEmpty(tally.Rows[32][3].ToString()) ? null : Convert.ToString(tally.Rows[32][3]);//月保养操作方法3
                equipment_Tally_report.Month_Project4 = String.IsNullOrEmpty(tally.Rows[33][1].ToString()) ? null : Convert.ToString(tally.Rows[33][1]);//月保养项目4
                equipment_Tally_report.Month_Approach4 = String.IsNullOrEmpty(tally.Rows[33][3].ToString()) ? null : Convert.ToString(tally.Rows[33][3]);//月保养操作方法4
                equipment_Tally_report.Month_Project5 = String.IsNullOrEmpty(tally.Rows[34][1].ToString()) ? null : Convert.ToString(tally.Rows[34][1]);//月保养项目5
                equipment_Tally_report.Month_Approach5 = String.IsNullOrEmpty(tally.Rows[34][3].ToString()) ? null : Convert.ToString(tally.Rows[34][3]);//月保养操作方法5
                equipment_Tally_report.Month_Project6 = String.IsNullOrEmpty(tally.Rows[35][1].ToString()) ? null : Convert.ToString(tally.Rows[35][1]);//月保养项目6
                equipment_Tally_report.Month_Approach6 = String.IsNullOrEmpty(tally.Rows[35][3].ToString()) ? null : Convert.ToString(tally.Rows[35][3]);//月保养操作方法6
                equipment_Tally_report.Month_Project7 = String.IsNullOrEmpty(tally.Rows[36][1].ToString()) ? null : Convert.ToString(tally.Rows[36][1]);//月保养项目7
                equipment_Tally_report.Month_Approach7 = String.IsNullOrEmpty(tally.Rows[36][3].ToString()) ? null : Convert.ToString(tally.Rows[36][3]);//月保养操作方法7
                equipment_Tally_report.Month_Project8 = String.IsNullOrEmpty(tally.Rows[37][1].ToString()) ? null : Convert.ToString(tally.Rows[37][1]);//月保养项目8
                equipment_Tally_report.Month_Approach8 = String.IsNullOrEmpty(tally.Rows[37][3].ToString()) ? null : Convert.ToString(tally.Rows[37][3]);//月保养操作方法8
                equipment_Tally_report.Month_Project9 = String.IsNullOrEmpty(tally.Rows[38][1].ToString()) ? null : Convert.ToString(tally.Rows[38][1]);//月保养项目9
                equipment_Tally_report.Month_Approach9 = String.IsNullOrEmpty(tally.Rows[38][3].ToString()) ? null : Convert.ToString(tally.Rows[38][3]);//月保养操作方法9
                equipment_Tally_report.Month_Project10 = String.IsNullOrEmpty(tally.Rows[39][1].ToString()) ? null : Convert.ToString(tally.Rows[39][1]);//月保养项目10
                equipment_Tally_report.Month_Approach10 = String.IsNullOrEmpty(tally.Rows[39][3].ToString()) ? null : Convert.ToString(tally.Rows[39][3]);//月保养操作方法10
                equipment_Tally_report.Month_Project11 = String.IsNullOrEmpty(tally.Rows[40][1].ToString()) ? null : Convert.ToString(tally.Rows[40][1]);//月保养项目11
                equipment_Tally_report.Month_Approach11 = String.IsNullOrEmpty(tally.Rows[40][3].ToString()) ? null : Convert.ToString(tally.Rows[40][3]);//月保养操作方法11

                #endregion

                JObject mes = new JObject();
                mes.Add("mes", true);
                mes.Add("equipment_Tally_report", JsonConvert.SerializeObject(equipment_Tally_report));
                return Content(JsonConvert.SerializeObject(mes));
            }
            catch
            {
                return Content("您输入的表格跟点检保养记录模板表格不一致，请使用标准模板表格。");
            }
        }

        #endregion

        #region------设备点检保养记录修改
        [HttpPost]
        public ActionResult Equipment_Tally_maintenance_Edit(Equipment_Tally_maintenance equipment_Tally_maintenance)
        {
            JObject tally = new JObject();
            if (equipment_Tally_maintenance != null)
            {
                if (db.Equipment_Tally_maintenance.Count(c => c.EquipmentNumber == equipment_Tally_maintenance.EquipmentNumber && c.Year == equipment_Tally_maintenance.Year && c.Month == equipment_Tally_maintenance.Month && c.Month_minister_3 != null) > 0)
                {
                    tally.Add("tally", false);
                    tally.Add("equipment_Tally_maintenance", "部长确认有数据");
                    return Content(JsonConvert.SerializeObject(tally));
                }
                else
                {
                    if (db.Equipment_Tally_maintenance.Count(c => c.EquipmentNumber == equipment_Tally_maintenance.EquipmentNumber && c.Year == equipment_Tally_maintenance.Year && c.Month == equipment_Tally_maintenance.Month) > 0)
                    {
                        db.Entry(equipment_Tally_maintenance).State = EntityState.Modified;
                        var result = db.SaveChanges();
                        if (result > 0)
                        {
                            tally.Add("tally", true);
                            tally.Add("equipment_Tally_maintenance", JsonConvert.SerializeObject(equipment_Tally_maintenance));
                            return Content(JsonConvert.SerializeObject(tally));
                        }
                        else
                        {
                            tally.Add("tally", false);
                            tally.Add("equipment_Tally_maintenance", null);
                            return Content(JsonConvert.SerializeObject(tally));
                        }
                    }
                }
            }
            return Content("数据有误");
        }
        #endregion

        #endregion

        #region------仪器设备报修单------
        public ActionResult EquipmentRepairbill()
        {
            return View();
        }
        #region---获取所有仪器设备报修单的设备编号的方法
        [HttpPost]
        public ActionResult InstrumentList()
        {
            var Instr_Number = db.EquipmentRepairbill.OrderByDescending(m => m.Id).Select(c => c.EquipmentNumber).Distinct();
            return Content(JsonConvert.SerializeObject(Instr_Number));
        }
        #endregion

        #region---设备报修单有数据使用部门的方法
        [HttpPost]
        public ActionResult Deparlist()
        {
            var depar = db.EquipmentRepairbill.OrderByDescending(m => m.Id).Select(c => c.UserDepartment).Distinct();
            return Content(JsonConvert.SerializeObject(depar));
        }
        #endregion

        #region-----根据部门，设备编号，设备名称，故障时间查询仪器设备报修单

        public ActionResult EquipmentRepairbill_Query()
        {
            return View();
        }

        [HttpPost]
        public ActionResult EquipmentRepairbill_Query(string userdepartment, string equnumber, string equipname, DateTime? date, DateTime? starttime, DateTime? endtime, int? year, int? month)
        {
            var equipment_list = db.EquipmentRepairbill.ToList();
            if (!String.IsNullOrEmpty(userdepartment))
            {
                equipment_list = equipment_list.Where(c => c.UserDepartment == userdepartment).ToList();
            }
            if (!String.IsNullOrEmpty(equnumber))
            {
                equipment_list = equipment_list.Where(c => c.EquipmentNumber == equnumber).ToList();
            }
            if (!String.IsNullOrEmpty(equipname))
            {
                equipment_list = equipment_list.Where(c => c.EquipmentName == equipname).ToList();
            }
            if (date != null)
            {
                equipment_list = equipment_list.Where(c => c.FaultTime == date).ToList();
            }
            if (starttime != null && endtime != null)
            {
                equipment_list = equipment_list.Where(c => c.FaultTime >= starttime && c.FaultTime <= endtime).ToList();
            }
            if (year != null)
            {
                equipment_list = equipment_list.Where(c => c.FaultTime.Value.Year == year && c.ConfirmName != null).ToList();
            }
            if (year != null && month != null)
            {
                equipment_list = equipment_list.Where(c => c.FaultTime.Value.Year == year && c.FaultTime.Value.Month == month && c.ConfirmName != null).ToList();
            }
            return Content(JsonConvert.SerializeObject(equipment_list));
        }
        #endregion

        #region------仪器设备报修单数据创建保存
        public ActionResult Repairbill_maintenance(EquipmentRepairbill equipmentRepairbill)
        {
            JObject equipment = new JObject();
            if (equipmentRepairbill != null && equipmentRepairbill.UserDepartment != null && equipmentRepairbill.FaultTime != null)
            {
                if (db.EquipmentRepairbill.Count(c => c.EquipmentNumber == equipmentRepairbill.EquipmentNumber && c.EquipmentName == equipmentRepairbill.EquipmentName && c.FaultTime == equipmentRepairbill.FaultTime) > 0)
                {
                    equipment.Add("addEquipment", false);
                    equipment.Add("equipmentRepairbill", "已有重复数据，请重新填写故障时间！");
                    return Content(JsonConvert.SerializeObject(equipment));

                }
                equipmentRepairbill.RepairDate = DateTime.Now;
                equipmentRepairbill.RepairName = ((Users)Session["user"]).UserName;
                db.EquipmentRepairbill.Add(equipmentRepairbill);
                var savecount = db.SaveChanges();
                if (savecount > 0)
                {
                    equipment.Add("addEquipment", true);
                    equipment.Add("equipmentRepairbill", "新建保存成功！");
                    return Content(JsonConvert.SerializeObject(equipment));
                }
                else
                {
                    equipment.Add("addEquipment", false);
                    equipment.Add("equipmentRepairbill", "新建保存失败！");
                    return Content(JsonConvert.SerializeObject(equipment));
                }
            }
            equipment.Add("addEquipment", false);
            equipment.Add("equipmentRepairbill", "数据有误！");
            return Content(JsonConvert.SerializeObject(equipment));
        }
        #endregion

        #region------仪器设备报修单修改
        public ActionResult Modify_repairs(EquipmentRepairbill equipmentRepairbill)
        {
            JObject repairbill = new JObject();
            if (equipmentRepairbill != null)
            {
                db.Entry(equipmentRepairbill).State = EntityState.Modified;
                var savecount = db.SaveChanges();
                if (savecount > 0)
                {
                    repairbill.Add("repairbill", "修改成功！");
                    repairbill.Add("equipmentRepairbill", JsonConvert.SerializeObject(equipmentRepairbill));
                    return Content(JsonConvert.SerializeObject(repairbill));
                }
                else
                {
                    repairbill.Add("repairbill", "修改失败！");
                    repairbill.Add("equipmentRepairbill", null);
                    return Content(JsonConvert.SerializeObject(repairbill));
                }

            }
            return Content("false");
        }
        #endregion

        #endregion

        #region------设备月保养时间计划表------

        public ActionResult Equipment_MonthlyMaintenance_plan()//首页index
        {
            return View();
        }

        #region----查询页
        public ActionResult Query_Maintenance_plan(string userDepartment, int year, int month)
        {
            JArray Maintenance_plan_list = new JArray();
            JObject query_plan = new JObject();
            JObject query_plan1 = new JObject();
            var mainplan_list = db.Equipment_MonthlyMaintenance.Where(c => c.Year == year && c.Month == month).ToList();
            if (mainplan_list != null)
            {
                var mainplan = mainplan_list.Where(c => c.UserDepartment == userDepartment && c.Year == year && c.Month == month).ToList();
                foreach (var item in mainplan)
                {
                    //id
                    query_plan.Add("Id", mainplan.Count == 0 ? 0 : item.Id);
                    //保养部门
                    query_plan.Add("UserDepartment", mainplan.Count == 0 ? null : item.UserDepartment);
                    //年
                    query_plan.Add("Year", mainplan.Count == 0 ? 0 : item.Year);
                    //月
                    query_plan.Add("Month", mainplan.Count == 0 ? 0 : item.Month);
                    //设备编号
                    query_plan.Add("EquipmentNumber", mainplan.Count == 0 ? null : item.EquipmentNumber);
                    //设备名称
                    query_plan.Add("EquipmentName", mainplan.Count == 0 ? null : item.EquipmentName);
                    //保养时间
                    query_plan.Add("Mainten_equipment", mainplan.Count == 0 ? null : item.Mainten_equipment);
                    //保养工时
                    query_plan.Add("Maintenance_work", mainplan.Count == 0 ? null : item.Maintenance_work);
                    //保养负责人
                    query_plan.Add("Mainten_supervisor", mainplan.Count == 0 ? null : item.Mainten_supervisor);
                    //备注
                    query_plan.Add("Remark", mainplan.Count == 0 ? null : item.Remark);
                    //月保养设备异常记录
                    query_plan.Add("Abnormal_records", mainplan.Count == 0 ? null : item.Abnormal_records);
                    Maintenance_plan_list.Add(query_plan);
                    query_plan = new JObject();
                }
                query_plan1.Add("mes", Maintenance_plan_list);
                Maintenance_plan_list = new JArray();
                //制表人
                query_plan1.Add("Mainten_Lister", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().Mainten_Lister);
                //制表时间
                query_plan1.Add("TabulationTime", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().TabulationTime);
                //技术部确认
                query_plan1.Add("Tec_Notarize", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().Tec_Notarize);
                //技术部确认时间
                query_plan1.Add("Tec_NotarizeTime", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().Tec_NotarizeTime);
                //保养设备部门确认
                query_plan1.Add("AssortDepar", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().AssortDepar);
                //保养设备部门确认时间
                query_plan1.Add("AssortTime", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().AssortTime);
                //PC部确认
                query_plan1.Add("PCDepar", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().PCDepar);
                //PC部确认时间
                query_plan1.Add("PCdeparTime", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().PCdeparTime);
                //审核
                query_plan1.Add("Assessor", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().Assessor);
                //审核时间
                query_plan1.Add("AssessedDate", mainplan.Count == 0 ? null : mainplan.FirstOrDefault().AssessedDate);
            }
            return Content(JsonConvert.SerializeObject(query_plan1));
        }
        #endregion

        #region-----检索时间计划表部门（有数据）
        [HttpPost]
        public ActionResult UserDepar_list()
        {
            var departmrnt_list = db.Equipment_MonthlyMaintenance.OrderByDescending(m => m.Id).Select(c => c.UserDepartment).Distinct();
            return Content(JsonConvert.SerializeObject(departmrnt_list));
        }

        #endregion

        #region----创建保存页
        public ActionResult ADDMonthlyMain_plan(Equipment_MonthlyMaintenance equipment_MonthlyMaintenance) //保存数据
        {
            JObject ADDequipment_Monthly = new JObject();
            string plan = null;
            if (equipment_MonthlyMaintenance != null)
            {
                if (db.Equipment_MonthlyMaintenance.Count(c => c.UserDepartment == equipment_MonthlyMaintenance.UserDepartment && c.Year == equipment_MonthlyMaintenance.Year && c.Month == equipment_MonthlyMaintenance.Month && c.EquipmentNumber == equipment_MonthlyMaintenance.EquipmentNumber) > 0)
                {
                    plan = plan + equipment_MonthlyMaintenance.UserDepartment + equipment_MonthlyMaintenance.Year + equipment_MonthlyMaintenance.Month + equipment_MonthlyMaintenance.EquipmentNumber + ",";
                    ADDequipment_Monthly.Add("meg", "false");
                    ADDequipment_Monthly.Add("plan_main", plan + "已有相同数据");
                    return Content(JsonConvert.SerializeObject(ADDequipment_Monthly));
                }
                if (db.Equipment_MonthlyMaintenance.Count(c => c.UserDepartment == equipment_MonthlyMaintenance.UserDepartment && c.Year == equipment_MonthlyMaintenance.Year && c.Month == equipment_MonthlyMaintenance.Month && c.AssortDepar != null) > 0)
                {
                    plan = plan + equipment_MonthlyMaintenance.UserDepartment + equipment_MonthlyMaintenance.Year + equipment_MonthlyMaintenance.Month + ",";
                    ADDequipment_Monthly.Add("meg", "false");
                    ADDequipment_Monthly.Add("plan_main", plan + "已经审核过");
                    return Content(JsonConvert.SerializeObject(ADDequipment_Monthly));
                }
                else
                {
                    equipment_MonthlyMaintenance.Mainten_Lister = ((Users)Session["user"]).UserName;
                    equipment_MonthlyMaintenance.TabulationTime = DateTime.Now;
                    db.Equipment_MonthlyMaintenance.Add(equipment_MonthlyMaintenance);
                    var savecount = db.SaveChanges();
                    if (savecount > 0)
                    {
                        ADDequipment_Monthly.Add("meg", "true");
                        return Content(JsonConvert.SerializeObject(ADDequipment_Monthly));
                    }
                    else
                    {
                        ADDequipment_Monthly.Add("meg", "false");
                        return Content(JsonConvert.SerializeObject(ADDequipment_Monthly));
                    }
                }
            }
            return Content("保存失败！");
        }
        #endregion

        #region---月保养计划批量添加
        public ActionResult Equip_ManintList(List<Equipment_MonthlyMaintenance> inputList, int year, int month, string userdepartment)
        {
            if (year != 0 && month != 0 && userdepartment != null)
            {
                JArray res = new JArray();
                string repat = "";
                foreach (var item in inputList)
                {

                    item.TabulationTime = DateTime.Now;
                    item.Mainten_Lister = ((Users)Session["User"]) != null ? ((Users)Session["User"]).UserName : "";
                    if (db.Equipment_MonthlyMaintenance.Count(c => c.UserDepartment == userdepartment && c.Year == year && c.Month == month && c.EquipmentNumber == item.EquipmentNumber) > 0)
                        repat = item.EquipmentNumber;
                    res.Add(repat);

                }
                JObject result = new JObject();
                if (!String.IsNullOrEmpty(repat))
                {
                    return Content(JsonConvert.SerializeObject(res));
                }
                foreach (var it in inputList)
                {
                    it.UserDepartment = userdepartment;
                    it.Year = year;
                    it.Month = month;
                    db.SaveChanges();
                }
                db.Equipment_MonthlyMaintenance.AddRange(inputList);
                int savecount = db.SaveChanges();
                if (savecount > 0) return Content("true");
                else return Content("false");
            }
            return Content("false");
        }

        #endregion

        #region----修改月保养时间计划表方法
        public ActionResult Edit_MonthMain_plan(Equipment_MonthlyMaintenance equipment_MonthlyMaintenance)
        {
            JObject Editequipment_Monthly = new JObject();
            if (equipment_MonthlyMaintenance != null)
            {
                equipment_MonthlyMaintenance.ModifyTime = DateTime.Now;
                equipment_MonthlyMaintenance.Modifier = ((Users)Session["user"]).UserName;
                db.Entry(equipment_MonthlyMaintenance).State = EntityState.Modified;
                var savecount = db.SaveChanges();
                if (savecount > 0)
                {

                    Editequipment_Monthly.Add("Editequipment_Monthly", "修改成功！");
                    Editequipment_Monthly.Add("Editequipment_MonthlyMaintenance", JsonConvert.SerializeObject(equipment_MonthlyMaintenance));
                    return Content(JsonConvert.SerializeObject(Editequipment_Monthly));
                }
                else
                {
                    Editequipment_Monthly.Add("Editequipment_Monthly", "修改失败！");
                    Editequipment_Monthly.Add("Editequipment_MonthlyMaintenance", null);
                    return Content(JsonConvert.SerializeObject(Editequipment_Monthly));
                }
            }
            return Content("false");
        }
        #endregion

        #region---审核、确认时间计划表
        public ActionResult EditAsserMonthMain_plan(string userdepartment, int year, int month, string assortdepar, string tec_notarize, string pcdepar, string assessor)
        {
            var plan = db.Equipment_MonthlyMaintenance.Where(c => c.UserDepartment == userdepartment && c.Year == year && c.Month == month).ToList();
            if (plan != null)
            {
                foreach (var item in plan)
                {
                    if (!String.IsNullOrEmpty(assortdepar))
                    {
                        item.AssortDepar = assortdepar;
                        item.AssortTime = DateTime.Now;
                        db.SaveChanges();
                    }
                    else if (!String.IsNullOrEmpty(tec_notarize))
                    {
                        item.Tec_Notarize = tec_notarize;
                        item.Tec_NotarizeTime = DateTime.Now;
                        db.SaveChanges();
                    }
                    else if (!String.IsNullOrEmpty(pcdepar))
                    {
                        item.PCDepar = pcdepar;
                        item.PCdeparTime = DateTime.Now;
                        db.SaveChanges();
                    }
                    else if (!String.IsNullOrEmpty(assessor))
                    {
                        item.Assessor = assessor;
                        item.AssessedDate = DateTime.Now;
                        db.SaveChanges();
                    }
                }
                return Content("true");
            }
            return Content("false");
        }

        #endregion

        #endregion

        #region---设备周保养质量目标达成状况统计表---
        public ActionResult Equipment_Quality_target()
        {
            return View();
        }

        #region---显示设备周保养质量目标达成状况统计表
        public ActionResult Equipment_Quality_statistical(int year, int month)
        {
            JArray quality = new JArray();
            JObject quality_list = new JObject();
            JObject useritem = new JObject();
            JObject table = new JObject();
            JArray statist = new JArray();
            int i = 0;
            var Quality_list = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month == month).ToList();
            var target = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month <= month).OrderByDescending(c => c.Id).Select(c => c.LiaDepartment).Distinct().ToList();
            foreach (var dep in target)
            {
                var item = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month <= month && c.LiaDepartment == dep).OrderByDescending(c => c.Id).Distinct().ToList();
                //ID
                table.Add("Id", target.Count == 0 ? 0 : item.FirstOrDefault().Id);
                //担责部门
                table.Add("LiaDepartment", target.Count == 0 ? null : item.FirstOrDefault().LiaDepartment);
                //质量目标
                table.Add("Quality_objec", target.Count == 0 ? null : item.FirstOrDefault().Quality_objec);
                //目标值
                table.Add("Target_value", target.Count == 0 ? null : item.FirstOrDefault().Target_value);
                //计算公式
                table.Add("Formulas", target.Count == 0 ? null : item.FirstOrDefault().Formulas);
                //统计周期
                table.Add("Statistical", target.Count == 0 ? null : item.FirstOrDefault().Statistical);
                //项目：按规定要求保养台天次
                table.Add("Required_maintain", target.Count == 0 ? null : item.FirstOrDefault().Required_maintain);
                //项目：计划保养总台天次
                table.Add("Planned_maintenance", target.Count == 0 ? null : item.FirstOrDefault().Planned_maintenance);
                //项目：有效率
                table.Add("With_efficiency", target.Count == 0 ? null : item.FirstOrDefault().With_efficiency);
                //年
                table.Add("Year", target.Count == 0 ? 0 : item.FirstOrDefault().Year);
                var mouthlist = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month <= month && c.LiaDepartment == dep).Select(c => c.Month).ToList();
                foreach (var it in mouthlist)
                {
                    var lisr = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month == it && c.LiaDepartment == dep).FirstOrDefault();
                    //月
                    useritem.Add("Month", target.Count == 0 ? 0 : it);
                    if (lisr.Planned == 0 && lisr.Required == 0 && lisr.efficiency == 0)
                    {
                        var required = db.EquipmentBasicInfo.Where(c => c.UserDepartment == lisr.LiaDepartment).ToList();
                        var tally = db.Equipment_Tally_maintenance.Where(c => c.UserDepartment == lisr.LiaDepartment && c.Year == year && c.Month == month && c.Week_engineer_1 != null && c.Week_engineer_2 != null && c.Week_engineer_3 != null && c.Week_engineer_4 != null).ToList();
                        //项目：按规定要求保养台天次实际值
                        useritem.Add("Required", required.Count == 0 ? 0 : required.Count);
                        //项目：计划保养总台天次实际值
                        useritem.Add("Planned", tally.Count == 0 ? 0 : tally.Count);
                        if (tally.Count > 0)
                        {
                            decimal efficiency = (tally.Count / required.Count) * 100;
                            //项目：有效率百分比
                            useritem.Add("efficiency", efficiency);
                        }
                        else
                        {
                            //项目：有效率百分比
                            useritem.Add("efficiency", 0);
                        }
                    }
                    else
                    {
                        //项目：按规定要求保养台天次实际值
                        useritem.Add("Required", lisr.Required);
                        //项目：计划保养总台天次实际值
                        useritem.Add("Planned", lisr.Planned);
                        //项目：有效率百分比
                        useritem.Add("efficiency", lisr.efficiency);
                    }
                    quality.Add(useritem);
                    useritem = new JObject();
                }
                table.Add("ass", quality);
                quality = new JArray();
                statist.Add(table);
                table = new JObject();
                i++;
            }
            quality_list.Add("table", statist);
            statist = new JArray();
            if (Quality_list.Count == 0)//如果当月没有数据，显示上一个月的数据
            {
                var ta = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month < month).OrderByDescending(c => c.Id).FirstOrDefault();
                //备注
                quality_list.Add("Remark", ta == null ? null : ta.Remark);
            }
            else
            {
                //备注
                quality_list.Add("Remark", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().Remark);
            }
            //编制人
            quality_list.Add("PrepareName", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().PrepareName);
            //编制日期
            quality_list.Add("PrepareTime", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().PrepareTime);
            //审核
            quality_list.Add("Assessor", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().Assessor);
            //审核日期
            quality_list.Add("AssessedDate", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().AssessedDate);
            //批准
            quality_list.Add("Approve", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().Approve);
            //批准日期
            quality_list.Add("ApprovedDate", Quality_list.Count == 0 ? null : Quality_list.FirstOrDefault().ApprovedDate);

            return Content(JsonConvert.SerializeObject(quality_list));
        }
        #endregion

        #region---新增时，根据部门返回相对应的数据
        public ActionResult AddQuality(string liaDepartment)
        {
            if (db.Equipment_Quality_target.Count(c => c.LiaDepartment == liaDepartment) > 0)
            {
                var partic = db.Equipment_Quality_target.Where(c => c.LiaDepartment == liaDepartment).Max(c => c.Year);
                var partic1 = db.Equipment_Quality_target.Where(c => c.LiaDepartment == liaDepartment).Max(c => c.Month);
                var depar = db.Equipment_Quality_target.Where(c => c.LiaDepartment == liaDepartment && c.Year == partic && c.Month == partic1).Select(c => new { c.LiaDepartment, c.Quality_objec, c.Target_value, c.Formulas, c.Statistical });
                return Content(JsonConvert.SerializeObject(depar));
            }
            return Content("false");
        }

        #endregion

        #region---保存当月数据周保养质量目标达成状况统计表
        public ActionResult ADDequipment_quality(List<Equipment_Quality_target> Quality_target, string remark, int year, int month, string assessor)
        {
            if (assessor != null && year != 0 && month != 0)
            {
                foreach (var item in Quality_target)
                {
                    if (db.Equipment_Quality_target.Count(c => c.LiaDepartment == item.LiaDepartment && c.Year == year && c.Month == month) > 0)
                    {
                        var deparlist = db.Equipment_Quality_target.Where(c => c.LiaDepartment == item.LiaDepartment && c.Year == year && c.Month == month).FirstOrDefault();
                        deparlist.LiaDepartment = item.LiaDepartment;
                        deparlist.Required = item.Required;
                        deparlist.Planned = item.Planned;
                        deparlist.efficiency = item.efficiency;
                        deparlist.Year = year;
                        deparlist.Month = month;
                        db.Entry(deparlist).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
                return Content("true");
            }
            return Content("false");
        }


        #endregion

        #region---修改备注和审核、批准周保养质量目标达成状况统计表
        public ActionResult Editequipment_Quality(int year, int month, string remark, string preparName, string assessor, string approve)
        {
            JObject quality = new JObject();
            var target_list = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month == month).ToList();
            if (target_list.Count != 0)
            {
                string target = "";
                foreach (var item in target_list)
                {
                    if (!String.IsNullOrEmpty(remark))
                    {
                        item.Remark = remark;
                        db.SaveChanges();
                        target = remark;
                    }
                    else if (!String.IsNullOrEmpty(preparName))
                    {
                        item.PrepareName = preparName;
                        item.PrepareTime = DateTime.Now;
                        db.SaveChanges();
                        target = preparName;
                    }
                    else if (!String.IsNullOrEmpty(assessor))
                    {
                        item.Assessor = assessor;
                        item.AssessedDate = DateTime.Now;
                        db.SaveChanges();
                        target = assessor;
                    }
                    else if (!String.IsNullOrEmpty(approve))
                    {
                        item.Approve = approve;
                        item.ApprovedDate = DateTime.Now;
                        db.SaveChanges();
                        target = approve;
                    }
                }
                quality.Add("quality", target);
                quality.Add("date", DateTime.Now);
                quality.Add("mes", true);
                return Content(JsonConvert.SerializeObject(quality));
            }
            quality.Add("mes", false);
            return Content(JsonConvert.SerializeObject(quality));
        }

        #endregion

        #region ---保存左边的数据
        public ActionResult Equipment_QualityADD(List<Equipment_Quality_target> inputList, string remark, int year, int month)
        {
            if (year != 0 && month != 0)
            {
                string repeat = null;
                foreach (var item in inputList)
                {
                    item.PrepareTime = DateTime.Now;
                    item.PrepareName = ((Users)Session["User"]) != null ? ((Users)Session["User"]).UserName : "";
                    if (db.Equipment_Quality_target.Count(c => c.LiaDepartment == item.LiaDepartment && c.Quality_objec == item.Quality_objec && c.Year == year && c.Month == month) > 0)
                        repeat = repeat + item.LiaDepartment + year + month + ",";
                }
                JObject result = new JObject();
                if (!string.IsNullOrEmpty(repeat))
                {
                    return Content(repeat);
                }
                if (!String.IsNullOrEmpty(remark))
                {
                    foreach (var it in inputList)
                    {
                        it.Remark = remark;
                        db.SaveChanges();
                    }
                }
                if (year != 0 && month != 0)
                {
                    foreach (var it in inputList)
                    {
                        it.Year = year;
                        it.Month = month;
                        db.SaveChanges();
                    }
                }
                db.Equipment_Quality_target.AddRange(inputList);
                int savecount = db.SaveChanges();
                if (savecount > 0) return Content("true");
                else return Content("false");
            }
            return Content("false");
        }
        #endregion

        #region ---修改左边的数据
        public ActionResult Modifi_Equipment_Quality(int year, int month, string liadepartment, string quality_objec, string target_value, string formulas, string statistical, string required_maintain, string planned_maintenance, string with_efficiency)
        {
            JObject table = new JObject();
            var quality = db.Equipment_Quality_target.Where(c => c.Year == year && c.Month <= month && c.LiaDepartment == liadepartment).ToList();
            if (quality.Count > 0)
            {
                string equipment = "";
                foreach (var item in quality)
                {
                    if (!String.IsNullOrEmpty(quality_objec))
                    {
                        item.Quality_objec = quality_objec;
                        db.SaveChanges();
                        equipment = quality_objec;
                    }
                    if (!String.IsNullOrEmpty(target_value))
                    {
                        item.Target_value = target_value;
                        db.SaveChanges();
                        equipment = target_value;
                    }
                    if (!String.IsNullOrEmpty(formulas))
                    {
                        item.Formulas = formulas;
                        db.SaveChanges();
                        equipment = formulas;
                    }
                    if (!String.IsNullOrEmpty(statistical))
                    {
                        item.Statistical = statistical;
                        db.SaveChanges();
                        equipment = statistical;
                    }
                    if (!String.IsNullOrEmpty(required_maintain))
                    {
                        item.Required_maintain = required_maintain;
                        db.SaveChanges();
                        equipment = required_maintain;
                    }
                    if (!String.IsNullOrEmpty(planned_maintenance))
                    {
                        item.Planned_maintenance = planned_maintenance;
                        db.SaveChanges();
                        equipment = planned_maintenance;
                    }
                    if (!String.IsNullOrEmpty(with_efficiency))
                    {
                        item.With_efficiency = with_efficiency;
                        db.SaveChanges();
                        equipment = with_efficiency;
                    }
                    item.ModifyTime = DateTime.Now;
                    item.Modifier = ((Users)Session["user"]).UserName;
                }
                table.Add("quality", equipment);
                table.Add("mes", true);
                return Content(JsonConvert.SerializeObject(table));
            }
            table.Add("mes", false);
            return Content(JsonConvert.SerializeObject(table));
        }

        #endregion

        #endregion

        #region-----设备安全库存清单
        public ActionResult Equipment_safety()//安全库存清单查询页
        {
            return View();
        }
        #region ---下拉框检索数据库有数据的使用部门，设备名称，配料料号，品名，规格/型号
        public ActionResult Getsafety_equipmentName()//设备名称
        {
            var equipment = db.Equipment_Safetystock.OrderByDescending(m => m.Id).Select(m => m.EquipmentName).Distinct();
            return Content(JsonConvert.SerializeObject(equipment));
        }
        public ActionResult Getsafety_material()//配料料号
        {
            var material = db.Equipment_Safetystock.OrderByDescending(m => m.Id).Select(m => m.Material).Distinct();
            return Content(JsonConvert.SerializeObject(material));
        }
        public ActionResult Getsafety_descrip()//品名
        {
            var descrip = db.Equipment_Safetystock.OrderByDescending(m => m.Id).Select(m => m.Descrip).Distinct();
            return Content(JsonConvert.SerializeObject(descrip));
        }
        public ActionResult Getsafety_specifica()//规格/型号
        {
            var speci = db.Equipment_Safetystock.OrderByDescending(m => m.Id).Select(m => m.Specifica).Distinct();
            return Content(JsonConvert.SerializeObject(speci));
        }
        #endregion

        #region---按使用部门，设备名称，品名，规格/型号，配料料号查询数据
        public ActionResult Safeatquery(string userdepartment, string equipmentName, string descrip, string specifica, string material)
        {
            var security = db.Equipment_Safetystock.ToList();
            if (!String.IsNullOrEmpty(userdepartment))
            {
                security = security.Where(c => c.UserDepartment == userdepartment).ToList();
            }
            if (!String.IsNullOrEmpty(equipmentName))
            {
                security = security.Where(c => c.EquipmentName == equipmentName).ToList();
            }
            if (!String.IsNullOrEmpty(descrip))
            {
                security = security.Where(c => c.Descrip == descrip).ToList();
            }
            if (!String.IsNullOrEmpty(specifica))
            {
                security = security.Where(c => c.Specifica == specifica).ToList();
            }
            if (!String.IsNullOrEmpty(material))
            {
                security = security.Where(c => c.Material == material).ToList();
            }
            return Content(JsonConvert.SerializeObject(security));
        }

        #endregion

        #region ---批量上传安全库存清单

        public ActionResult ADDsafestock(List<Equipment_Safetystock> inputList, int year, int month, string userdepartment)
        {
            if (year != 0 && month != 0 && userdepartment != null)
            {
                JArray res = new JArray();
                string repat = "";
                foreach (var item in inputList)
                {
                    item.FinishingDate = DateTime.Now;
                    item.FinishingName = ((Users)Session["User"]) != null ? ((Users)Session["User"]).UserName : "";
                    if (db.Equipment_Safetystock.Count(c => c.UserDepartment == userdepartment && c.Year == year && c.Month == month && c.EquipmentName == item.EquipmentName && c.Material == item.Material) > 0)
                    {
                        repat = item.Material;
                        repat = item.EquipmentName;
                        res.Add(repat);
                    }
                }
                JObject result = new JObject();
                if (!String.IsNullOrEmpty(repat))
                {
                    return Content(JsonConvert.SerializeObject(res));
                }
                foreach (var it in inputList)
                {
                    it.UserDepartment = userdepartment;
                    it.Year = year;
                    it.Month = month;
                    db.SaveChanges();
                }
                db.Equipment_Safetystock.AddRange(inputList);
                int savecount = db.SaveChanges();
                if (savecount > 0) return Content("true");
                else return Content("false");
            }
            return Content("false");
        }
        #endregion

        #region ---编辑修改安全库存清单
        public ActionResult Modifi_safety(Equipment_Safetystock equipment_Safetystock)
        {
            JObject Safety = new JObject();
            if (equipment_Safetystock.UserDepartment != null && equipment_Safetystock.Year != 0 && equipment_Safetystock.Month != 0 && equipment_Safetystock.EquipmentName != null && equipment_Safetystock.Material != null)
            {
                equipment_Safetystock.ModifyTime = DateTime.Now;
                equipment_Safetystock.Modifier = ((Users)Session["user"]).UserName;
                db.Entry(equipment_Safetystock).State = EntityState.Modified;
                var savecount = db.SaveChanges();
                if (savecount > 0)
                {
                    Safety.Add("Safety", true);
                    Safety.Add("equipment_Safetystock", JsonConvert.SerializeObject(equipment_Safetystock));
                    return Content(JsonConvert.SerializeObject(Safety));
                }
                else
                {
                    Safety.Add("Safety", false);
                    Safety.Add("equipment_Safetystock", null);
                    return Content(JsonConvert.SerializeObject(Safety));
                }
            }
            return Content("false");
        }
        #endregion

        #region ---审核确认安全库存清单
        public ActionResult Verification(string userdepartment, int year, int month, string tec_asse, string assembl_depar, string smtdepsr, string assessor, string approve)
        {
            JObject Safety = new JObject();
            var stock = db.Equipment_Safetystock.Where(c => c.UserDepartment == userdepartment && c.Year == year && c.Month == month).ToList();
            if (stock != null)
            {
                string depar = null;
                foreach (var item in stock)
                {
                    if (!String.IsNullOrEmpty(tec_asse))
                    {
                        item.Tec_Assessor = tec_asse;
                        item.Tec_AssessedDate = DateTime.Now;
                        db.SaveChanges();
                        depar = tec_asse;
                    }
                    else if (!String.IsNullOrEmpty(assembl_depar))
                    {
                        item.Assembling_depar = assembl_depar;
                        item.Assembling_deparDate = DateTime.Now;
                        db.SaveChanges();
                        depar = assembl_depar;
                    }
                    else if (!String.IsNullOrEmpty(smtdepsr))
                    {
                        item.SMTDepar = smtdepsr;
                        item.SMTDeparDate = DateTime.Now;
                        db.SaveChanges();
                        depar = smtdepsr;
                    }
                    else if (!String.IsNullOrEmpty(assessor))
                    {
                        item.Assessor = assessor;
                        item.AssessedDate = DateTime.Now;
                        db.SaveChanges();
                        depar = assessor;
                    }
                    else if (!String.IsNullOrEmpty(approve))
                    {
                        item.Approve = approve;
                        item.ApprovedDate = DateTime.Now;
                        db.SaveChanges();
                        depar = approve;
                    }
                }
                Safety.Add("Safety", true);
                Safety.Add("depar", depar);
                return Content(JsonConvert.SerializeObject(Safety));
            }
            return Content("false");
        }

        #endregion

        #endregion

        #region---设备关键元器件清单汇总
        public ActionResult Equipment_Keycomponents()
        {
            return View();
        }

        #region---根据‘设备编号’查询关键元器件清单
        public ActionResult Keyinquire(string equipmentNumber)
        {
            JObject table = new JObject();
            JArray keycom = new JArray();
            var component = db.Equipment_keycomponents.Where(c => c.EquipmentNumber == equipmentNumber).ToList();
            if (component.Count > 0)
            {
                foreach (var item in component)
                {
                    //ID
                    table.Add("Id", component.Count == 0 ? 0 : item.Id);
                    //设备名称
                    table.Add("EquipmentName", component.Count == 0 ? null : item.EquipmentName);
                    //设备编号
                    table.Add("EquipmentNumber", component.Count == 0 ? null : item.EquipmentNumber);
                    //品名
                    table.Add("Descrip", component.Count == 0 ? null : item.Descrip);
                    //规格/型号
                    table.Add("Specifica", component.Count == 0 ? null : item.Specifica);
                    //用途
                    table.Add("Materused", component.Count == 0 ? null : item.Materused);
                    //备注
                    table.Add("Remark", component.Count == 0 ? null : item.Remark);
                    keycom.Add(table);
                    table = new JObject();
                }
            }
            return Content(JsonConvert.SerializeObject(keycom));
        }
        #endregion

        #region---批量上传关键元器件清单
        public ActionResult Keycomponents_query(List<Equipment_keycomponents> inputList)
        {
            if (inputList != null && inputList.FirstOrDefault().EquipmentNumber != null)
            {
                JArray res =new JArray();
                JObject repat = new JObject();
                foreach (var item in inputList)
                {
                    item.TabulationTime = DateTime.Now;
                    item.Mainten_Lister = ((Users)Session["User"]) != null ? ((Users)Session["User"]).UserName : "";
                    if (db.Equipment_keycomponents.Count(c => c.EquipmentNumber == item.EquipmentNumber && c.Descrip == item.Descrip && c.Specifica == item.Specifica && c.Materused == item.Materused) > 0)
                    {
                        repat.Add("EquipmentNumber", item.EquipmentNumber);
                        repat.Add("Descrip", item.Descrip);
                        repat.Add("Specifica", item.Specifica);
                        repat.Add("Materused", item.Materused);
                        res.Add(repat);
                        repat = new JObject();
                    }
                }
                JObject result = new JObject();
                if (res.Count>0)
                {
                    result.Add("repat", false);
                    result.Add(" res", res);
                    return Content(JsonConvert.SerializeObject(result));
                }
                db.Equipment_keycomponents.AddRange(inputList);
                int savecount = db.SaveChanges();
                if (savecount > 0) return Content("true");
                else return Content("false");
            }
            return Content("false");
        }
        #endregion

        #region---修改关键元器件清单
        public ActionResult Equipment_EditComponet(string equipmentNumber, string descrip, string specifica, string materused, string remark, int id)
        {
            JObject keycompont = new JObject();
            var componlist = db.Equipment_keycomponents.Where(c => c.Id == id && c.EquipmentNumber == equipmentNumber).ToList();
            if (componlist.Count > 0)
            {
                string componet = null;
                foreach (var item in componlist)
                {
                    if (!String.IsNullOrEmpty(descrip))
                    {
                        item.Descrip = descrip;
                        db.SaveChanges();
                        componet = descrip;
                    }
                    if (!String.IsNullOrEmpty(specifica))
                    {
                        item.Specifica = specifica;
                        db.SaveChanges();
                        componet = specifica;
                    }
                    if (!String.IsNullOrEmpty(materused))
                    {
                        item.Materused = materused;
                        db.SaveChanges();
                        componet = materused;
                    }
                    if (!String.IsNullOrEmpty(remark))
                    {
                        item.Remark = remark;
                        db.SaveChanges();
                        componet = remark;
                    }
                    item.ModifyTime = DateTime.Now;
                    item.Modifier = ((Users)Session["user"]).UserName;
                }
                keycompont.Add("mes", true);
                keycompont.Add("componet", componet);
                return Content(JsonConvert.SerializeObject(keycompont));
            }
            return Content("false");
        }

        #endregion

        #endregion


        #region------其他方法

        // GET: Equipment/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Equipment/Create
        // 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
        // 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "Id,SerialNumber,EquipmentNumber,AssetNumber,EquipmentName,Brand,ModelSpecification,InfoPlate,ManufacturingNumber,Quantity,ActionDate,DepreciableLife,UserDepartment,StoragePlace,WorkShop,LineNum,Section,FunctionDiscription,Status,Creator,CreateTime,Modifier,ModifyTime,Remark")] EquipmentBasicInfo equipmentBasicInfo)
        {
            if (ModelState.IsValid)
            {
                db.EquipmentBasicInfo.Add(equipmentBasicInfo);
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            return View(equipmentBasicInfo);
        }

        // GET: Equipment/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EquipmentBasicInfo equipmentBasicInfo = await db.EquipmentBasicInfo.FindAsync(id);
            if (equipmentBasicInfo == null)
            {
                return HttpNotFound();
            }
            return View(equipmentBasicInfo);
        }

        // POST: Equipment/Edit/5
        // 为了防止“过多发布”攻击，请启用要绑定到的特定属性，有关 
        // 详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkId=317598。
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id,SerialNumber,EquipmentNumber,AssetNumber,EquipmentName,Brand,ModelSpecification,InfoPlate,ManufacturingNumber,Quantity,ActionDate,DepreciableLife,UserDepartment,StoragePlace,WorkShop,LineNum,Section,FunctionDiscription,Status,Creator,CreateTime,Modifier,ModifyTime,Remark")] EquipmentBasicInfo equipmentBasicInfo)
        {
            if (ModelState.IsValid)
            {
                db.Entry(equipmentBasicInfo).State = EntityState.Modified;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }
            return View(equipmentBasicInfo);
        }

        // GET: Equipment/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EquipmentBasicInfo equipmentBasicInfo = await db.EquipmentBasicInfo.FindAsync(id);
            if (equipmentBasicInfo == null)
            {
                return HttpNotFound();
            }
            return View(equipmentBasicInfo);
        }

        // POST: Equipment/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int id)
        {
            EquipmentBasicInfo equipmentBasicInfo = await db.EquipmentBasicInfo.FindAsync(id);
            db.EquipmentBasicInfo.Remove(equipmentBasicInfo);
            await db.SaveChangesAsync();
            return RedirectToAction("Index");
        }
        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #region --------------------返回指定目录下所有文件信息
        /// <summary>  
        /// 返回指定目录下所有文件信息  
        /// </summary>  
        /// <param name="strDirectory">目录字符串</param>  
        /// <returns></returns>  
        public List<FileInfo> GetAllFilesInDirectory(string strDirectory)
        {
            List<FileInfo> listFiles = new List<FileInfo>(); //保存所有的文件信息  
            DirectoryInfo directory = new DirectoryInfo(strDirectory);
            DirectoryInfo[] directoryArray = directory.GetDirectories();
            FileInfo[] fileInfoArray = directory.GetFiles();
            if (fileInfoArray.Length > 0) listFiles.AddRange(fileInfoArray);
            foreach (DirectoryInfo _directoryInfo in directoryArray)
            {
                DirectoryInfo directoryA = new DirectoryInfo(_directoryInfo.FullName);
                DirectoryInfo[] directoryArrayA = directoryA.GetDirectories();
                FileInfo[] fileInfoArrayA = directoryA.GetFiles();
                if (fileInfoArrayA.Length > 0) listFiles.AddRange(fileInfoArrayA);
                GetAllFilesInDirectory(_directoryInfo.FullName);//递归遍历  
            }
            return listFiles;
        }
        #endregion

    }
}

