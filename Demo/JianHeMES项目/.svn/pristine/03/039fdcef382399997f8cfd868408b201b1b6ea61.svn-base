@model IEnumerable<JianHeMES.Models.Personnel_Framework>

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Scripts/jquery.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/font-awesome.min.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/jquery.orgchart.min.css" rel="stylesheet" />
<script src="~/Scripts/Scripts/jquery.orgchart.min.js"></script>
<style>
      html,
      body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }
      h4{
          text-align:center;
      }

      #orgChartContainer{
          overflow:auto !important;
      }

      body {
        font-family: Arial;
        font-size: 14px;
        line-height: 1.428571429;
        color: #333333;
      }

      /* 去掉网格背景 */

      .orgchart {
        background-color: #fff !important;
        background-image: none;
      }

      /* 跟节点稳如狗--给个定位 */

      #orgChartContainer {
        
        position: relative;
        left:-20% !important;
        display: inline-block;
        top: 10px;
        left: 10px;
        height: 100%;
        /* css3动态计算属性函数：calc()  以下样式表示：container的width总是总宽度减去24像素 */
        width: calc(140% - 24px);
        /*border: 2px dashed #aaa;*/
        border-radius: 5px;
        overflow: auto;
        text-align: center;
      }

      /* 颜色样式:源数据中传入对应nclassname,然后根据这些classname编写样式--同意分支层级的样式给个一样的颜色(doge) */

      .orgchart td.left,
      .orgchart td.right,
      .orgchart td.top {
        border-color: #aaa;
      }

      .orgchart td>.down {
        background-color: #aaa;
      }

      .orgchart .middle-level .title {
        background-color: #006699;
      }

      .orgchart .middle-level .content {
        border-color: #006699;
      }

      .orgchart .product-dept .title {
        background-color: #009933;
      }

      .orgchart .product-dept .content {
        border-color: #009933;
      }

      .orgchart .rd-dept .title {
        background-color: #993366;
      }

      .orgchart .rd-dept .content {
        border-color: #993366;
      }

      .orgchart .pipeline1 .title {
        background-color: #996633;
      }

      .orgchart .pipeline1 .content {
        border-color: #996633;
      }

      .orgchart .frontend1 .title {
        background-color: #cc0066;
      }

      .orgchart .frontend1 .content {
        border-color: #cc0066;
      }

      /* 自定义模板样式*---title跟content部门还是用的插件原本的样式，页可以修改 */

      .office {
        width: 45%;
        border: none;
        margin: 3px;
        opacity: .5;
        transition: all linear .2s;
      }

      .officex{
          width: 48%;
          margin: 3px;
      }
      .officess {
        display: flex;
        justify-content: space-between;
      }

      .office:hover {
        text-align: center;
        border: 1px solid #333333;
        border-radius: 5px;
        color: red;
        opacity: 1;
      }
      

      .node {
        width: 140px !important;
      }

      .newguys{
          background-color:#ff99cc;
          border-radius:5px;
      }
      .resign{
          background-color:#808080;
          border-radius:5px;
      }
      .askforleave{
          background-color:#ffff00;
          border-radius:5px;
      }
      .absent{
          background-color:red;
          border-radius:5px;
      }
      .jobber{
          background-color:#a4d08e;
          border-radius:5px;
      }
      .businesstrip{
          background-color:#00b0f0;
          border-radius:5px;
      }
      .onposition{
          background-color:#46ea06;
          border-radius:5px;
      }
       .tttt{
        width:48%;
        margin:3px;
    }

</style>

<div class="top-container" style="margin-top:75px" id="app">
    <h4>组织架构</h4>
    @*<p>
            @Html.ActionLink("Create New", "Create")
        </p>*@
    <div id='chartcontainer'></div>
    <div id="orgChartContainer">

    </div>
    <el-table v-show="flag" v-bind:data="departmentInfos"
              style="width: 100%">
        <el-table-column prop="depar"
                         label="部门"
                         width="180">
        </el-table-column>
        <el-table-column prop="Employees"
                         label="实际人数"
                         width="180">
        </el-table-column>
        <el-table-column prop="Aurhorized"
                         label="编制人数"
                         width="180">
        </el-table-column>
        <el-table-column prop="LackAurhorized"
                         label="缺编人数">
        </el-table-column>
        <el-table-column prop="Notonduty"
                         label="请假/旷工人数">
        </el-table-column>
        <el-table-column prop="Attendance"
                         label="出勤人数">
        </el-table-column>
        <el-table-column prop="waitQuit"
                         label="待离职人数">
        </el-table-column>
    </el-table>
    @*loding*@
    <div class="spinnerModel" v-show="loading">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
    </div>


    @{
        var UserName = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).UserName;
        var UserRole = Session["User"] == null ? string.Empty : ((JianHeMES.Models.Users)Session["User"]).Role;
        var UserId = Session["User"] == null ? 0 : ((JianHeMES.Models.Users)Session["User"]).UserNum;
        var ischeck = ViewBag.editinfo;
    }
</div>


    <script>
        var vm = new Vue({
            el: "#app",
            data: {
                flag:false,
                loading: true,
                departments: null,
                departmentInfos: [],
                userId:"@UserId",
            },
            watch: {
                departments() {
                    if (this.departments != null) {
                        this.departmentInfos = [];   //每次点击只显示当前点击的部门的信息。页可以叠加之前点击的部门的信息显示--目前单独显示
                        axios.post("/Personnel_Framework/DepartmentUserInfo", { department: this.departments }).then(res=> {
                            //console.log(res.data)
                            res.data.depar = this.departments;
                            this.departmentInfos.push(res.data);
                        }).catch(err=> {
                            console.log('out of connected.')
                        })
                    } else {
                        this.departmentInfos = [];
                    }
                },
                departmentInfos() {
                    if (this.departmentInfos.length < 1) {
                        this.flag = false;
                    } else {
                        this.flag = true;
                    }
                }
            }
        })

        $(function () {

            var orgChaart = document.getElementById('orgChartContainer')
            orgChaart.onclick = function (event) {  //  解决点击回复原本状态问题
                var outer = event.clientX
                var selects = document.getElementsByTagName('select')
                console.log(selects)
                var selectArr = []
                for (let i = 0; i < selects.length; i++) {
                    selectArr.push(selects[i])
                }
                selectArr.forEach(item=> {
                    console.log(item.children[0].innerHTML)  //获取所有已被点击而出现的选择框的值
                    console.log($(item).parent())
                    var color = ''
                    if (item.children[0].innerHTML == '在岗') {
                        colors = 'onposition'
                    } else if (item.children[0].innerHTML == '请假') {
                        colors = 'askforleave'
                    } else if (item.children[0].innerHTML == '新进') {
                        colors = 'newguys'
                    } else if (item.children[0].innerHTML == '出差') {
                        colors = 'businesstrip'
                    } else if (item.children[0].innerHTML == '旷工') {
                        colors = 'absent'
                    }
                    else if (item.children[0].innerHTML == '辞职') {
                        colors = 'resign'
                    }
                    else if (item.children[0].innerHTML == '临时工') {
                        colors = 'jobber'
                    }
                    $(item).parent().removeClass()
                    $(item).parent().addClass(colors)
                    $(item).parent().addClass('tttt')
                    $(item).parent().html(`<span>${item.children[0].innerHTML}</span>`)
                })
                console.log('outer ciliked!!')

            }
             

            var datas = ''
            axios.post("/Personnel_Framework/Framework").then(res=> {
                datas = res.data;
                //console.log(datas)
                console.log('connected')
                var nodeTemplate = function (data) {

                    var depar = `<div class="title">${data.name}</div><div class="content">${data.title}</div>`
                    var arr = data.userid || '';
                    var result = '';

                    for (let i = 0; i < arr.length; i++) {   //判断初始状态给定背景颜色并按顺序输出
                        var colors = '';
                        if (arr[i].status == '在岗') {
                            colors = 'onposition'
                        } else if (arr[i].status == '请假') {
                            colors = 'askforleave'
                        } else if (arr[i].status == '新进') {
                            colors = 'newguys'
                        } else if (arr[i].status == '出差') {
                            colors = 'businesstrip'
                        } else if (arr[i].status == '旷工') {
                            colors = 'absent'
                        }
                        else if (arr[i].status == '辞职') {
                            colors = 'resign'
                        }
                        else if (arr[i].status == '临时工') {
                            colors = 'jobber'
                        }
                        result += `<div class="officess"><div onclick="listClick(this,'${arr[i]}','${arr[i].id}',event)"title="点击编辑" class="office">${arr[i].name}</div><div class='status ${colors} officex' onclick="justforstop(event)">${arr[i].status}</div></div>`
                    }
                    vm.loading = false;
                    return `${depar}${result}`

                }
                var oc = $('#orgChartContainer').orgchart({
                    'visibleLevel': 2,
                    //'pan': true,
                    'data': res.data,
                    'nodeContent':'title',
                    'nodeTemplate': nodeTemplate,
                    'draggable': true, //可拖动
                    'dropCriteria': function ($draggedNode, $dragZone, $dropZone) { //拖动规则--符合规则则可拖动，不符合则拖动无效
                        //if ($draggedNode.find('.content').text().indexOf('manager') > -1 &&
                        //  $dropZone.find('.content').text().indexOf('engineer') > -1) {
                        //    return false;
                        //}
                        //return true;
                    },
                    'createNode': function ($node, data) {
                        $node.on('click', function (event) { //点击事件：点击哪个节点哪个节点就会相对于屏幕居中--方便用户操作
                            console.log(data.name)
                            if (data.department=='true') {
                                vm.departments = data.name;
                            } else {
                                vm.departments = null;
                            }
                        });
                    }
                });
                //oc.$chart.on('nodedrop.orgchart', function (event, extraParams) { //拖动时的数据改变可以在这里操作--重组保存
                //    console.log('draggedNode:' + extraParams.draggedNode.children('.title').text() +
                //      ', dragZone:' + extraParams.dragZone.children('.title').text() +
                //      ', dropZone:' + extraParams.dropZone.children('.title').text()
                //    );
                //});
            });

        }).catch(err=> {
            console.log('out of connected')
        })

        function listClick(item, listitem, itemid,event) { //点击事件生效--点击每一个员工时可单独操作

            axios.post("/Personnel_Framework/Alter", { userid: itemid, loginid: vm.userId }).then(res=> {
                //console.log(res.data)
                console.log('连接成功')
                if (res.data=='True') {   //权限判断
                    var target = $(item).next();
                    var selectVal = $(item).next().text().trim();
                    //console.log(selectVal);
                    if (selectVal.length > 8) { } else {
                        $(item).next().html(`<select onchange="selectChange(this,'${selectVal}','${itemid}')"><option>${selectVal}</option><option>出差</otion><option>在岗</otion><option>请假</otion><option>临时工</otion><option>新进</otion><option>旷工</otion><option>辞职</otion></select>`)
                    }
                } else {
                    alert('暂无修改权限')
                }
            }).catch(err=> {
                console.log('获取权限判断连接失败')
            })

            event.stopPropagation()  // 阻止点击事件冒泡
        }

        function justforstop(event) {
            event.stopPropagation()  // 阻止点击事件冒泡
        }


        function selectChange(item, slectVals,itemid) {
            //console.log(itemid);
            //console.log(item.value)
            //console.log(slectVals);
            // 此处进行数据提交：姓名+状态   提交成功再执行下一步
            var statuss = '';
            if (item.value == '在岗') { //根据特定状态给背景色
                statuss = 0
            } else if (item.value == '请假') {
                statuss = 1
            }  else if (item.value == '新进') {
                statuss = 2
            } else if (item.value == '出差') {
                statuss = 3
            }
            else if (item.value == '旷工') {
                statuss = 4
            }
            else if (item.value == '辞职') {
                statuss = 5
            }
            else if (item.value == '临时工') {
                statuss = 6
            }
            console.log(statuss)
            axios.post("/Personnel_Framework/UpateStatus", { id: itemid, statue: statuss }).then(res=> {
                console.log("进到axois:" + res.data)
            var color = null; //存储动态类名的变量
            if (item.value == '在岗') { //根据特定状态给背景色
                color = 'onposition'
            } else if (item.value == '请假') {
                color = 'askforleave'
            } else if (item.value == '新进') {
                color = 'newguys'
            } else if (item.value == '出差') {
                color = 'businesstrip'
            }
            else if (item.value  == '旷工') {
                color = 'absent'
            }
            else if (item.value == '临时工') {
                color = 'jobber'
            } else if (item.value == '辞职') {
                color = 'resign'
            }
            $(item).parent().html(`<div class="${color}">${item.value}</div>`);
            }).catch(err=> {

            })


        }
    </script>
