
@{
    ViewBag.Title = "ViewDisplay";
}
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<h2 style="text-align:center">订单详情</h2>
<style>
    table .cell,table td {
        text-align: center;
        padding:2px !important;
    }
        table td{
        padding: 2px 0 !important;
    }

    .topcontainer{
        display:flex;
    }
    .top-left{
        width:25%;
    }
    .top-rigth{
        width:55%;
        text-align:center;
    }
    .table-container{
        width:55%;
        margin: 0 auto;
    }
</style>
<div id="app">
    
    <div class="topcontainer">
        <div class="top-left">
            <el-button v-on:click="goBack" type="primary" size="mini"><i class="el-icon-d-arrow-left"></i>返回</el-button>
        </div>
        <div class="top-rigth">
            <el-select v-model="value" clearable filterable  placeholder="选择外箱条码">
                <el-option v-for="item in options"
                           v-bind:key="item.label"
                           v-bind:label="item.label"
                           v-bind:value="item.label">
                </el-option>
            </el-select>
            <el-select v-model="value2" clearable filterable  placeholder="选择模组条码">
                <el-option v-for="item in options2"
                           v-bind:key="item.label"
                           v-bind:label="item.label"
                           v-bind:value="item.label">
                </el-option>
            </el-select>
        </div>
    </div>


    <el-table v-bind:data="tableDataDetails"
              size="small"
              style="width: 100%;text-align:center;">
        <el-table-column prop="orderNum"
                         label="订单"
                         width="100">
        </el-table-column>
        <el-table-column prop="Worth"
                         width="105"
                         label="总产值（万）">
        </el-table-column>
        <el-table-column prop="moduleCount"
                         width="75"
                         label="模组数量">
        </el-table-column>
        <el-table-column prop="packingCount"
                         width="90"
                         label="已包装数量">
        </el-table-column>
        <el-table-column prop="warehousJoinCount"
                         width="85"
                         label="已入库数量">
        </el-table-column>
        <el-table-column prop="warehousOutCount"
                         width="90"
                         label="已出库数量">
        </el-table-column>
        <el-table-column prop="warehouseJoinValue"
                         width="115"
                         label="目前入库产值（万）">
        </el-table-column>
        <el-table-column prop="uncompleteValue"
                         width="115"
                         label="未完成产值（万）">
        </el-table-column>
        <el-table-column prop="warehousJoinComplete"
                         width="80"
                         label="入库完成率">
        </el-table-column>
        <el-table-column prop="warehousOutComplete"
                         width="80"
                         label="出库完成率">
        </el-table-column>
        <el-table-column prop="remark"
                         width="205"
                         label="备注">
        </el-table-column>
    </el-table>

    <div class="table-container">
        <el-table v-bind:data="tableData"
                  v-bind:span-method="objectSpanMethod"
                  style="width: 100%;margin-top:15px;"
                  max-height="550"
                  border>
            <el-table-column prop="orderN"
                             label="外箱条码"
                             width="180">
            </el-table-column>
            <el-table-column prop="status"
                             label="状态"
                             width="180">
            </el-table-column>
            <el-table-column prop="orderSon"
                             label="模组条码">
            </el-table-column>
        </el-table>
    </div>
</div>
    
<script>

    // 获取按照当前表格数据而得到的合并信息
    function getSpan(arrs){
        let contactDot = 0;
        let contactDots = 0;
        arrs.forEach((item, index) => {
            if (index === 0) {
                app.spanArr.push(1)
            } else {
                if (item.orderN === arrs[index - 1].orderN) {
                    app.spanArr[contactDot] += 1;
                    app.spanArr.push(0)
                } else {
                    contactDot = index
                    app.spanArr.push(1)
                }
            }
        })

        arrs.forEach((item, index) => {
            if (index === 0) {
                app.spanArrs.push(1)
            } else {
                if (item.orderN === arrs[index - 1].orderN) {
                    app.spanArrs[contactDots] += 1;
                    app.spanArrs.push(0)
                } else {
                    contactDots = index
                    app.spanArrs.push(1)
                }
            }
        })
    }

    var app = new Vue({
        el: "#app",
        data: {
            tableDataDetails:[],
            value2:'',
            value:'',
            options: [],
            options2: [],
            orderNums:'',   // 无用变量
            tableData: [],
            tableData2:[],   // 用于当两个选择框的值都为空的时候复原表格的初始值
            spanArr: [],
            spanArrs:[],
            orderDetails: {
                orderNum: '',
                worth: '',
                moduleCount: '',
                packingCount: '',
                warehousJoinCount: '',
                warehousOutCount: '',
                warehouseJoinValue: '',
                uncompleteValue: '',
                warehousJoinComplete: '',
                warehousOutComplete: '',
                remark:''
            },
            originData:[]  //原始数据
        },
        mounted() {   // 页面加载时请求数据 以及将href中传递过来的属性值保存到data

            this.orderDetails.orderNum = getUrlParam('orderNum')
            this.orderDetails.worth = getUrlParam('worth')
            this.orderDetails.moduleCount = getUrlParam('moduleCount')
            this.orderDetails.packingCount = getUrlParam('packingCount')
            this.orderDetails.warehousJoinCount = getUrlParam('warehousJoinCount')
            this.orderDetails.warehousOutCount = getUrlParam('warehousOutCount')
            this.orderDetails.warehouseJoinValue = getUrlParam('warehouseJoinValue')
            this.orderDetails.uncompleteValue = getUrlParam('uncompleteValue')
            this.orderDetails.warehousJoinComplete = getUrlParam('warehousJoinComplete')
            this.orderDetails.warehousOutComplete = getUrlParam('warehousOutComplete')
            this.orderDetails.remark = getUrlParam('remark')
            
            // 中间表格的数据
            this.tableDataDetails.push(this.orderDetails)
            //console.log(this.orderDetails)
            axios.post("/Packagings/DisplayWarehouse", { ordernum: this.orderDetails.orderNum }).then(res=> {
                console.log(`这是res.data${res.data}`)
                //console.log(res.data)
                var tabledata = []
                for (let i in res.data) {
                    tabledata.push(res.data[i])
                }

                //  获取第一个选择框的值
                //console.log(tabledata)
                tabledata.forEach(item=>{
                    //var objs = {value:item.orderN,label:item.orderN}
                    var objs = {value:item.otherBarcode,label:item.otherBarcode}
                    this.options.push(objs)
                })
                
                this.originData = tabledata   //保存每次加载的原始数据用来支持行合并计算
                
                var finalArr = []
                tabledata.forEach(item=> {
                    for (let i = 0; i < item.codeList.length; i++) {
                        var obj = { orderN: item.otherBarcode, status: item.status, orderSon: item.codeList[i] }
                        finalArr.push(obj)
                    }
                })
                this.tableData = finalArr
                this.tableData2 = finalArr
                // 获取第二个选择框的值
                this.tableData.forEach(item=>{
                    var obj = {value:item.orderSon,label:item.orderSon}
                    this.options2.push(obj)
                })
                getSpan(app.tableData)
            }).catch(err=> {
                this.$message({
                    message: '链接失败！',
                    type: 'warning'
                });
            })

            


        },
        watch:{
            value(){
                this.tableData = this.tableData2
                this.spanArr = []
                this.spanArrs = []
                let firstArr = [];
                let secondArr = [];
                if(this.value !=''){
                    if(this.value2!=''){  //两个都不为空
                        this.tableData.forEach(item=>{
                            if(item.orderN==this.value){
                                firstArr.push(item)
                            }
                        });
                        firstArr.forEach(item=>{
                            if(item.orderSon==this.value2){
                                secondArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(secondArr)
                        this.tableData = secondArr
                    }else{  // 只有第一个框有值
                        this.tableData.forEach(item=>{
                            if(item.orderN==this.value){
                                firstArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }
                }else{
                    if(this.value2!=''){  //第二个值不为空但是第一个空
                        this.tableData.forEach(item=>{
                            if(item.orderSon==this.value2){
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }else{  // 两个都空
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(app.tableData2)
                        this.tableData = this.tableData2;
                    }
                }
            },
            value2(){
                this.tableData = this.tableData2
                this.spanArr = []
                this.spanArrs = []
                let firstArr = [];
                let secondArr = [];
                if(this.value2 !=''){
                    if(this.value !=''){//两个都不为空
                        this.tableData.forEach(item=>{
                            if(item.orderSon==this.value2){
                                firstArr.push(item)
                            }
                        });
                        firstArr.forEach(item=>{
                            if(item.orderN==this.value){
                                secondArr.push(item)
                            }
                        });

                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(secondArr)
                        this.tableData = secondArr
                    }else{  // 只有第二个框有值
                        this.tableData.forEach(item=>{
                            if(item.orderSon==this.value2){
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }
                }else{
                    if(this.value !=''){  //第二框空值，但是第一个框有值
                        this.tableData.forEach(item=>{
                            if(item.orderN==this.value){
                                firstArr.push(item)
                            }
                        });
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(firstArr)
                        this.tableData = firstArr
                    }else{  // 两个都空
                        // 此处可以利用最新筛选出来的结果集更新spanArr的值
                        getSpan(app.tableData2)
                        this.tableData = this.tableData2;
                    }
                }
                console.log(this.tableData)
            }
        },
        methods: {
            formatter(row, column) {
                //return row.address;
            },
            objectSpanMethod({row,column,rowIndex,columnIndex}) {
                if (columnIndex === 0) {
                    if (this.spanArr[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan: this.spanArr[rowIndex],
                            colspan: 1
                        }
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        }
                    }
                }
                if (columnIndex === 1) {
                    if (this.spanArrs[rowIndex]) { // [3,0,0,2,0,3,0,0]
                        return {
                            rowspan:this.spanArrs[rowIndex],
                            colspan:1
                        }
                    } else {
                        return {
                            rowspan:0,
                            colspan:0
                        }
                    }
                }
    },
    goBack() {
                history.back();
            },

        }
    })


    //  返回href中传递过来的属性值
    function getUrlParam(name) {
        //构造一个含有目标参数的正则表达式对象
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); 
        var r = window.location.search.substr(1).match(reg); //匹配目标参数
        //console.log('---rb--')
        var test = r[0].replace(/\&/g, '')
        var testArr = test.split('=')
        //console.log(r[0].replace(/\&/g, ''))
        //console.log(testArr[1])
        //console.log('---re--')
        if (r != null) {
            return testArr[1];
        } else {
            return null; //返回参数值
        }
    }
</script>