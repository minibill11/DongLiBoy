@model IEnumerable<JianHeMES.Models.Personnel_Framework>

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Scripts/jquery.min.js"></script>
<script src="~/Scripts/Bootstraps/Element-ui.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<link href="~/Scripts/Bootstraps/Element-ui.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/font-awesome.min.css" rel="stylesheet" />
<link href="~/Scripts/Scripts/jquery.orgchart.min.css" rel="stylesheet" />
<script src="~/Scripts/Scripts/jquery.orgchart.min.js"></script>
<style>
    .titleright{
        float:right;margin-right:18px;
        display:inline-block;
        width:25px;
        border-radius:50%;
        transition:all linear .2s;
    }
    .titleright:hover{
        background-color:green;
        color:white;
        border:1px solid black;
        cursor:pointer
    }
    .topEdge,.bottomEdge {
        width:15px !important;
        margin-left:44%;
    }
    .selectContainer{
        margin-top:15px;
    }
    #chart-container{
        overflow: auto;
        text-align: center;
        /* css3动态计算属性函数：calc()  以下样式表示：container的width总是总宽度减去24像素 */
        width: calc(140% - 24px);
        position: relative;
        left:-20% !important;
        display: inline-block;
        top: 10px;
        left: 10px;
        height: 100%;
    }
    .orgchart {
        background-color: #fff !important;
        background-image: none;
      }
    .checktime{
        text-align:center;
    }
    .bottom-container{
        border:1px solid black;
        margin-top:15px;
        display:flex;
        justify-content:space-between;
    }
    .officexx{
        width:100%;
        text-align:center;
    }
   .selectLevel{
        color:black !important;
   }
      /* 去掉网格背景 */

      .orgchart {
        background-color: #fff !important;
        background-image: none;
      }

      /* 跟节点稳如狗--给个定位 */

      .orgchart td.left,
      .orgchart td.right,
      .orgchart td.top {
        border-color: #aaa;
      }

      .orgchart td>.down {
        background-color: #aaa;
      }

      .orgchart .middle-level .title {
        background-color: #006699;
      }

      .orgchart .middle-level .content {
        border-color: #006699;
      }

      .orgchart .product-dept .title {
        background-color: #009933;
      }

      .orgchart .product-dept .content {
        border-color: #009933;
      }

      .orgchart .rd-dept .title {
        background-color: #993366;
      }

      .orgchart .rd-dept .content {
        border-color: #993366;
      }

      .orgchart .pipeline1 .title {
        background-color: #996633;
      }

      .orgchart .pipeline1 .content {
        border-color: #996633;
      }

      .orgchart .frontend1 .title {
        background-color: #cc0066;
      }

      .orgchart .frontend1 .content {
        border-color: #cc0066;
      }

      /* 自定义模板样式*---title跟content部门还是用的插件原本的样式，页可以修改 */

      .office {
        width: 55%;
        border: none;
        margin: 0;
        opacity: .5;
        transition: all linear .2s;
      }

      .officex{
          width: 48%;
          margin: 0;
      }
      .officess {
        display: flex;
        justify-content: space-between;
      }

      .office:hover {
        text-align: center;
        border: 1px solid #333333;
        border-radius: 5px;
        color: red;
        opacity: 1;
      }
      

      .node {
        width: 170px !important;
      }

      .newguys{
          background-color:#ff99cc;
          border-radius:5px;
      }
      .resign{
          background-color:#808080;
          border-radius:5px;
      }
      .askforleave{
          background-color:#ffff00;
          border-radius:5px;
      }
      .absent{
          background-color:red;
          border-radius:5px;
      }
      .jobber{
          background-color:#a4d08e;
          border-radius:5px;
      }
      .businesstrip{
          background-color:#00b0f0;
          border-radius:5px;
      }
      .onposition{
          background-color:#46ea06;
          border-radius:5px;
      }
       .tttt{
        width:48%;
        margin:0;
    }

      #edit-panel {
        position: relative;
        left: 10px;
        border-radius: 4px;
        margin-top: 10px;
        padding: 10px;
        color: #fff;
        background-color: #aaa;
      }

      #edit-panel .btn-inputs {
        font-size: 24px;
      }

      #edit-panel.edit-state>:not(#chart-state-panel) {
        display: none;
      }

      #edit-panel label {
        font-weight: bold;
      }

      #edit-panel.edit-parent-node .selected-node-group {
        display: none;
      }

      #chart-state-panel,
      #selected-node,
      #btn-remove-input {
        margin-right: 20px;
      }

      #edit-panel button {
        color: #333;
        background-color: #fff;
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      #edit-panel.edit-parent-node button:not(#btn-add-nodes) {
        display: none;
      }

      #edit-panel button:hover,
      .edit-panel button:focus,
      .edit-panel button:active {
        border-color: #eea236;
        box-shadow: 0 0 10px #eea236;
      }

      #new-nodelist {
        display: inline-block;
        list-style: none;
        margin-top: -2px;
        padding: 0;
        vertical-align: text-top;
      }

      #new-nodelist>* {
        padding-bottom: 4px;
      }

      .btn-inputs {
        vertical-align: sub;
      }

      #edit-panel.edit-parent-node .btn-inputs {
        display: none;
      }

      .btn-inputs:hover {
        text-shadow: 0 0 4px #fff;
      }

      .radio-panel input[type='radio'] {
        display: inline-block;
        height: 24px;
        width: 24px;
        vertical-align: top;
      }

      #edit-panel.view-state .radio-panel input[type='radio']+label {
        vertical-align: -webkit-baseline-middle;
      }

      #btn-add-nodes {
        margin-left: 20px;
      }
      .dismiss{
          display:none;
      }
</style>

<div id="app" v-loading="loaddingFlag">
    <div class="selectContainer">
        <el-select size="small" v-model="selectVersion" placeholder="请选择架构版本">
            <el-option v-for="item in versionList"
                       v-bind:key="item.value"
                       v-bind:label="item.value"
                       v-bind:value="item.value">
            </el-option>
        </el-select>
    </div>
    <div id="chart-container"></div>
</div>

<script>
    const app = new Vue({
        el: "#app",
        data: {
            selectVersion: null,
            loaddingFlag:false,
            versionList: [],
            selectNodeId:null,
            orgchartData: {
                name: "工厂厂长",
                title: "周金成",
                workStatue:"在岗",
                children: []
            },
            isBelogin:null
        },
        mounted() {
            this.getDefultInfos();
            this.getVersisonList();
        },
        watch: {
            // 监听版本变化并获取数据
            selectVersion() {
                if (this.selectVersion != -null) {
                    this.getDefultInfos(this.selectVersion);
                } else {
                    this.$notify({
                        message: "请选择有效版本",
                        type: "warning"
                    });
                }
            }
        },
        methods: {
            // 获取架构版本列表
            getVersisonList() {
                axios.post("/Personnel_Framework/VersionList").then(res=> {
                    //console.log(res.data)
                    if (res.data.length > 0) {
                        this.versionList = res.data
                    } else {
                        this.$notify({
                            message: "暂无历史版本",
                            type: "info"
                        })
                    }
                })
            },
            // 获取初始数据
            getDefultInfos(version, department, title) {
                this.loaddingFlag = true;
                axios.post("/Personnel_Framework/Framework", { version: version, department: department, title: title }).then(res=> {
                    console.log(res.data);
                    if (!department && !title) {   // 只有厂长时直接将数据添加到厂长chilrend
                        res.data.forEach(item=> {
                            if (item.title != '') {
                                item.title = item.position + ':' + item.title;
                            }
                        });
                        this.orgchartData.children = res.data;
                        myorgchart(this.orgchartData);    // 实例化树形图
                        this.loaddingFlag = false;
                    } else {                       // 将数据添加到制定节点的chilrend
                        if(res.data.length>0){
                            this.reverseData(res.data);
                        } else {
                            this.$message({
                                message: "已经是最底节点",
                                type:"success"
                            })
                        }
                        
                        this.loaddingFlag = false;
                    }
                });
            },
            // 统一处理后台返回数据的方法
            reverseData(data) {
                console.log(data);
                this.orgchartData.children.forEach(item=> {
                    if (item.id == this.selectNodeId) {
                        item.children = data
                    } else {
                        if (item.children) {
                            item.children.forEach(item2=> {
                                if (item2.id == this.selectNodeId) {
                                    item2.children = data
                                } else {
                                    if (item2.children) {
                                        item2.children.forEach(item3=> {
                                            if (item3.id == this.selectNodeId) {
                                                item3.children = data
                                            } else {
                                                if (item3.children) {
                                                    item3.children.forEach(item4=> {
                                                        if (item4.id == this.selectNodeId) {
                                                            item4.children = data
                                                        }
                                                    })
                                                }
                                            }
                                        })
                                    }
                                }
                            });
                        }
                    }
                });
                myorgchart(this.orgchartData);
            }
        }
    });

    // 自定义节点架构代码
    var nodeTemplate = function (data) {
        var arr = data;
        var result = '';
        let targetData = arr
        var colors = '';
        if (true) {
            let code = targetData.workStatue
            if (code == '在岗') {
                colors = 'onposition'
            } else if (code == '请假') {
                colors = 'askforleave'
            } else if (code == '新进') {
                colors = 'newguys'
            } else if (code == '出差') {
                colors = 'businesstrip'
            } else if (code == '旷工') {
                colors = 'absent'
            }
            else if (code == '辞职') {
                colors = 'resign'
            }
            else if (code == '临时工') {
                colors = 'jobber'
            }
            result = `<div class="officess"><div onclick="listClick(this,'${targetData}','${targetData.jobnum}',event)"title="点击编辑" class="office">${data.title}</div><div class='status ${colors} officex' onclick="justforstop(event)">${code==undefined?'':code}</div></div>`

        } else {
            if (data.name == "") {

            } else {
                result = `<div class="officess"><div onclick="listClick(this,'${targetData}','${targetData.jobnum}',event) "title="点击编辑" class="office">${data.name}</div><div class='status onposition officex' onclick="justforstop(event)">在岗</div></div>`
            }
        }
        // 由于在判断节点是否可操作时并不能获取到节点的所有data --只能写一个隐藏的span来承载这个判断所需的值
        var depar = `<div class="title">${data.name}<span class='titleright'onclick="getChildrenData('${data.department}','${data.name}','${data.id}','${data.isBelogin}')">↓</span></div><div class="content">${result}</div>`
        return `${depar}`
    };

    // 生成树形图的函数
    function myorgchart(source) {
        $('#chart-container').empty();
        $('#chart-container').orgchart({
            'data': source, //数据
            'nodeContent': 'title', //内容对应的字段
            'nodeTemplate': nodeTemplate,
        });
        let tt = $(".titleright")[0]
        $(tt).hide();   // 影藏第一个向下箭头
    }

    // 点击节点获取子节点数据
    function getChildrenData(depar, name, id, flag) {
        app.isBelogin = flag
        app.selectNodeId = id
        app.getDefultInfos(app.selectVersion, depar, name)
    }


    function listClick(item, listitem, itemid, event) { //点击事件生效--点击每一个员工时可单独操作
        var roles = JSON.parse(localStorage.getItem("rigths"));
        if (checkRoles(roles, '修改组织架构人员状态')) {
            axios.post("/Personnel_Framework/Alter").then(res=> {
                //console.log(res.data)
                //console.log('连接成功')
                if (res.data == 'True') {   //权限判断
                    var target = $(item).next();
                    var selectVal = $(item).next().text().trim();
                    //console.log(selectVal);
                    if (selectVal.length > 8) { } else {
                        $(item).next().html(`<select class="statusSelect" onchange="selectChange(this,'${selectVal}','${itemid}')"><option>${selectVal}</option><option>出差</otion><option>在岗</otion><option>请假</otion><option>临时工</otion><option>新进</otion><option>旷工</otion><option>辞职</otion></select>`)
                    }
                } else {
                    alert('暂无修改权限')
                }
            }).catch(err=> {
                console.log('获取权限判断连接失败')
            })

            event.stopPropagation()  // 阻止点击事件冒泡
        } else {
            alert("暂无权限修改")
            event.stopPropagation()  // 阻止点击事件冒泡
        }

    };


    function justforstop(event) {
        event.stopPropagation()  // 阻止点击事件冒泡
    };

</script>