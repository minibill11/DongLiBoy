@model JianHeMES.Models.CalibrationRecord

@{
    ViewBag.Title = "完成校正";
}

<h3 class="hidden-xs">@ViewBag.Title</h3>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4 class="hidden-xs">校正记录</h4>
        <h4 class="text-center visible-xs">完成校正</h4>
        <hr class="hidden-xs" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.BeginCalibration)
        @Html.HiddenFor(model => model.FinishCalibration)
        @Html.HiddenFor(model => model.CalibrationTime)
        @Html.HiddenFor(model => model.CalibrationTimeSpan)
        @Html.HiddenFor(model => model.Operator)

        <div class="form-group">
            @Html.LabelFor(model => model.OrderNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNum, new { htmlAttributes = new { @class = "form-control",@readonly="readonly" } })
                @Html.ValidationMessageFor(model => model.OrderNum, "", new { @class = "text-danger" })
             </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BarCodesNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BarCodesNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.BarCodesNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ModuleGroupNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleGroupNum, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ModuleGroupNum, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
        @Html.LabelFor(model => model.BeginCalibration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
        @Html.DisplayFor(model => model.BeginCalibration)
        @Html.EditorFor(model => model.BeginCalibration, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.BeginCalibration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
        @Html.LabelFor(model => model.FinishCalibration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FinishCalibration, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FinishCalibration, "", new { @class = "text-danger" })
        </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Normal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                    @Html.EditorFor(model => model.Normal)
                    @Html.ValidationMessageFor(model => model.Normal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="DescriptionDetial" style="display:none" >
             @Html.LabelFor(model => model.AbnormalDescription, htmlAttributes: new { @class = "control-label col-md-2" })
             <div class="col-md-10"  >
                    @Html.EditorFor(model => model.AbnormalDescription, new { htmlAttributes = new { @class = "form-control"} })
                    @Html.ValidationMessageFor(model => model.AbnormalDescription, "", new { @class = "text-danger" })
             </div>
        </div>
     

        @*<div class="form-group" id="Description">
        @Html.LabelFor(model => model.CalibrationTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CalibrationTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CalibrationTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="Description">
        @Html.LabelFor(model => model.CalibrationTimeSpan, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CalibrationTimeSpan, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CalibrationTimeSpan, "", new { @class = "text-danger" })
        </div>
    </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="okPQC" value="完成校正" class="btn btn-default" />  
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("返回", "CreateCal")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-1.11.3.js"></script>
<script type="text/javascript">
    $(function () {
        $("#Normal").prop("checked", true);
        $("#AbnormalDescription").val("正常")
    });
    $("#Normal").click(function () {
        $("#DescriptionDetial").toggle();
        if ($(this).prop("checked")==true) {
            $("#AbnormalDescription").val("正常")
            $("#okPQC").removeAttr("disabled")
        }else{
            $("#AbnormalDescription").val("");
            $("#okPQC").attr("disabled", true);
            $("#AbnormalDescription").focus();
        }
    });
    $('#AbnormalDescription').bind('input propertychange', function (val) {
        if (val.target.value == "") {
            $("#okPQC").attr("disabled", true);
        } else {
            $("#okPQC").removeAttr("disabled")
        }
    })
</script>
